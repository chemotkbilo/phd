% \iffalse meta-comment
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
phd-pkgmanager --- a package to shorten preambles
E-mail: yannislaz@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------
This file provides a phd for defining a class.
%</readme>
%<*readmemd>
###The `phd` LaTeX2e package

The `phd` latex package and the class with the same name provide
convenient methods to create new styles for books, reports
and articles. It also loads the most commonly used packages 
and resolves conflicts.

This work consists of the file  `phd.dtx`,
and the derived files   `phd.ins`,  `phd.pdf`, and `phd.sty`.

###Installation

run
          phd-lua.bat on windows
           pdflatex phd.dtx
           makeindex -s gind.ist -g phd 

If you have any difficulties with the package come and join us at
http://tex.stackexchange.com and post a new question or
add a comment at http://tex.stackexchange.com/a/45023/963.
or send me a message at  yannislaz at gmail.com

### Documentation

The package was written using the `doc` and `docscript` packages,
so that it is self documented in a literary programming style. 
The .pdf is a fat document, providing over fifty book styles (the
equivalent of classes) plus there is a lot of write-up on the inner
workings of TeX and LaTeX2e. However, you don't need to know much
to use it.

      \usepackage{phd}
      \input{style13}

All choices, are made via an extended key-value interface. 
Although not a compliment, it resembles CSS and the keys are a bit verbose but
attributes are easy to change and have a consistent and easy to remember interface.

To set or add a key we only use one command:

      \cxset{chapter name font-size = Huge,
             chapter number font-size = HUGE} 

### Future Development

This is still an experimental version, but I will retain the
interface in future releases. There is a large amount of
work still to be carried out to improve the template styles
provided, to test it more thoroughly and to add a number of
improvements in the special designs. At present I estimate
that I have completed about 70% of the work that needs
to be done.

__The package as it stands is not production stable.__ 


%</readmemd>
%
%<*TODO>
1. On final round add pkg options. This was left as last in order not to solve problems by adding
    options. Too many options are not a good User Interface.
2.  Finish symbol management, both text and math. Math already 60% incorporated.
3.  Better integration of indexing commands.   
4.  Revisit layout manager for Chapters. Broke again in tests.
5.  Docs. Add all references.
6.  Incorporate phd class for more flexibility.
7. Improve package manager.
8. Group script loading for better font management.
9. General font management to relook it again.
10. Add all style sections (about 100 already prepared). Once they
     are all working issue beta version.
%</TODO>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
phd --- A package to beautify documents.
E-mail: yannislaz@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------
\endpreamble

%\BaseDirectory{C:/users/admin/my documents/github/phd}
%\usedir{MWE}
\generate{\file{\jobname.sty}{
  \from{\jobname.dtx}{LSECT}
  \from{phd-specials.dtx}{SPECIAL}
  }
  }

%\nopreamble\nopostamble

%</install>

%<install>\endbatchfile
%<*internal>
%\usedir{tex/latex/phd}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble

\generate{
	\file{README.txt}{\from{\jobname.dtx}{readme}}
  }

\generate{
  \file{README.md}{\from{\jobname.dtx}{readmemd}}
}
\generate{
  \file{TODO.tex}{\from{\jobname.dtx}{TODO}}
}

\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
%<*driver>

%\listfiles
%gdef\@onlypreamble{} % TO BE REMOVED NEEDED FOR TUTS
\documentclass[oneside,11pt,a4paper]{ltxdoc}
\usepackage[bottom=2cm]{geometry}
\savegeometry{std}
% \usepackage[style=mla]{biblatex}
\usepackage{phd}
\usepackage{phd-lowersections}
\usepackage{phd-runningheads}
\pagestyle{headings}
\sethyperref

\begin{filecontents}{defaults-chapters}
%%    General Defaults for Chapters
\cxset{%    
    chapter title margin-top-width    =  0cm,
    chapter title margin-right-width  =  1cm,
    chapter title margin-bottom-width = 10pt,
    chapter title margin-left-width   = 0pt,
    chapter align                     = left,
    chapter title align               = left, %checked
    chapter name                      = hang,
    chapter format                    = hdr,
    chapter font-size                 = Huge,
    chapter font-weight               = bold,
    chapter font-family               = sffamily,
    chapter font-shape                = upshape,
    chapter color                     = black,
    chapter number prefix             = ,
    chapter number suffix             = ,
    chapter numbering                 = arabic,
    chapter indent                    = 0pt,
    chapter beforeskip                = -3cm,
    chapter afterskip                 = 30pt,
    chapter afterindent               = off,
    chapter number after              = ,
    chapter arc                       = 0mm,
    chapter background-color          = bgsexy,
    chapter afterindent               = off,
    chapter grow left                 = 0mm,
    chapter grow right                = 0mm, 
    chapter rounded corners           = northeast,
    chapter shadow                    = fuzzy halo,
    chapter border-left-width         = 0pt,
    chapter border-right-width     = 0pt,
    chapter border-top-width       = 0pt,
    chapter border-bottom-width    = 0pt,
    chapter padding-left-width     = 0pt,
    chapter padding-right-width    = 10pt,
    chapter padding-top-width      = 10pt,
    chapter padding-bottom-width   = 10pt,
    chapter number color           = white,
    chapter label color            = white,    
    }
 \cxset{    
    chapter number font-size        = huge,
    chapter number font-weight      = bfseries,
    chapter number font-family      = sffamily,
    chapter number font-shape       = upshape,
    chapter number align            = Centering,
    }
\cxset{%    
     chapter title font-size        = Huge,
     chapter title font-weight      = bold,
     chapter title font-family      = calligra,
     chapter title font-shape       = upshape,
     chapter title color            = black,
     }    
\end{filecontents}
\input{defaults-chapters}  
\definecolor{bgsexy}{HTML}{FF6927}

\definecolor{creamy}{HTML}{FDEBD7}
\cxset{chapter title color= creamy,
       chapter label color = creamy,
       chapter number color = creamy,
       chapter number font-size = Huge,
       subsection title color = creamy,
       chapter name = CHAPTER,
       chapter label case = upper,
       chapter number align=left,
       part format = traditional,
       part background-color=spot,
       part beforeskip                = -3cm,
       part afterskip                 = 30pt,
       }
\begin{document}
\parindent1em
\coverpage{asia}{Book Design }{Camel Press}{HEADINGS}{DESIGN} 
\pagestyle{empty}
%\coverpage{habtoor-city}{Delay Claim}{HLS-DSE/JV}{HABTOOR CITY}{MEP CLAIM} 
\secondpage
\pagestyle{empty}
\clearpage
\ExplSyntaxOn
\tableofcontents
\ExplSyntaxOff
\pagestyle{empty}
\setcounter{secnumdepth}{6}
\parskip0pt plus.1ex minus.1ex
\mainmatter
\pagenumbering{arabic}
\pagestyle{headings}        
%       
%\input{./sections/tikz}
%\input{./mep/claim}  
%\input{./mep/dewa} 
%\input{./mep/busbar}
%\input{./mep/disruption}
%\input{./mep/RFI-mechanical}
%\input{./mep/RFI-electrical}
%%\input{./mep/internal}
%\input{./mep/provisional-sums}
%\input{./sections/introduction}
%
%\input{./styles/style01}
%\input{./styles/style02}
%\input{./styles/style03}
%\input{./styles/style04}
%\input{./styles/style05}
%\cxset{chapter format=block}
%\input{./sections/chapterdesign}
%\input{./sections/lowerlevelheadings}
\makeatletter
%\@debugtrue

\makeatother

\DocInput{\jobname.dtx}
\DocInput{phd-specials.dtx}
\input{test-sectioning}
% \printindex
 %
% 
\end{document}
%</driver>
% \fi
% 
%  \CheckSum{0}
%  \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
%
% \changes{1.0}{2013/01/26}{Converted to DTX file}
%
% \DoNotIndex{\newcommand,\newenvironment}
% \GetFileInfo{phd.dtx}
% 
%  \def\fileversion{v1.0}          
%  \def\filedate{2012/03/06}
% \title{The \textsf{phd} package.
% \thanks{This
%        file (\texttt{phd.dtx}) has version number \fileversion, last revised
%        \filedate.}
% }
% \author{Dr. Yiannis Lazarides \\ \url{yannislaz@gmail.com}}
% \date{\filedate}
%
%
% 
% ^^A\maketitle
% 
% ^^A\frontmatter
%  ^^A\coverpage{./images/hine02.jpg}{Book Design }{Camel Press}{}{}
%  \newpage
% ^^A\secondpage
% \pagestyle{empty}
%
%
% 
%
%
% \pagestyle{headings}
% \raggedbottom
%  \OnlyDescription
%
%  ^^A\StopEventually{\printindex}

% \CodelineNumbered
% \pagestyle{headings}
% 
% 
% ^^A\part{IMPLEMENTATION AND FRIENDS}
% 
%
% \chapter{Code Implementation Objectives and Strategy}
% 
% \epigraph{
% I was reflecting on the convoluted Java frameworks widely adopted at work. Those hefty frameworks brought coding structures and conventions to large engineering teams; meanwhile, they also sucked the fun of programming like a Pastafarian monster slurping all the tomato sauce on a plate of spaghetti.
%}{\href{http://blog.zmxv.com/2015/07/code-golf-at-google.html}{Zhen Wang}}
%
% We start by outlining what we are trying to achieve with this package:
%
% \begin{enumerate}
% \item To provide a declarative interface to enable users to modify headings by
%       setting keys, rather than writing macros.  
% \item The interface must be able to manupulate properties of headings down to
%       the last detail.
% \item To provide a compatibility mode, where documents wishing to test the package
% can have an easy switch to switch in and out. This is also important for the testing of the package.
% \item To provide a number of templates that cover most of the typical use case.
% \item To provide means for a plug-in architecture for extensions.

% \end{enumerate}
% 
% \section{Terminology}
%
%  \begin{description}
%  \item [document] Any written item, as a book, article, or letter, especially 
%                  of a factual or informative nature.
%  \item [heading] A division of a document or document series. For a normal
%        book headings are chapters, sections etc. However we allow for
%        specifying a more complex document divided into books, volumes
%        parts etc. For example the Bible has Books, chapters and verses,
%        where a legal document might require divisions such as clauses.
%        In general these divisions are numbered. These document divisions
%        are stored in the comma list \refCom{phd_book_divisions_clist}.
%  \item [head] A typeset heading, such as chapter head, or section head.
%        This can include a counter, label and title for example, 
%        \emph{Chapter 1 Introduction}.
%  \item [dom] This is a programming interface that provides a structured
%        representation of the document (a tree) and it defines a way
%        that the structure can be accessed. Although \latexe does not
%        offer a standard way to build such a tree (mainly because
%        \tex does not require the marking of paragraphs, it is 
%        useful to think of the document as a tree structure. We also
%        allow for a semi-automated way to build such a tree (with the 
%        exception that paragraphs are not included).
% \item [element] A part of the document tree that can be styled on
%       its own. For example the chapter label, or the section number.
%
% \end{description}
%
% \section{Users}
%  We classify users according to the \LaTeX3 terminology as a) programmers b) template designers
%  and c) authors.
% \subsection{Author}
%  We assume that the author has an exising template which she is using but might want to do
%  some minor modifications, for example use an italic shape for the font of the mark, but an 
%  upright font for the page numbers. 
%
% {\obeylines 
%~~ |\cxset|
%~~~~~|{|
%~~~~~~~~\textit{chapter number color}~~|format          = apa,|
%~~~~~~~~\textit{section title font-size} |font-size   = Large,|
%~~~~~|}|
%}  
%
% We follow the idea of representing the basic elements of documents
% as elements, each one having a parent in order to specify
% the element we need to style as accurate as possible. One can think of
% this approach being congruent with objects in other languages.
% As a matter fact nothing stops us from defining a key value
% interface as shown below.
%
% {\obeylines 
%~~ |\cxset|
%~~~~~|{| 
%~~~~~~~~\textit{header.even.mark.font.size}   = |Large,|
%~~~~~~~~\textit{header.even.mark.font.family} = |serif,|
%~~~~~|}|
%}  
%
% This would pehaps make it easier for the template designer, but I have rejected
% the idea as my aim is to make it easy for the author, who can search the template
% and just enter a couple of new proerty values.
%
% \subsection{Template designer}
% \pagestyle{headings}
% The template designer in the example above would have selected the format style
% from a number of predefined formats (templates) or would have created a style
% called \textit{apa} from an existing template and modified it using declarative
% key style.
%
% \subsection{The programmer}
%
% The programmer in the example above could have created the basic format
% \textit{apa} by using both declarative as well as defining or using existing
% macros. To the programmer we offer an extension mechanism, where the contents
% of a |ps@| command are defined. For example the programmer can define a new
% style using \tikzname, but without having to worry about defining full |ps@|
% and their interface.
%
% \section{Preliminaries}
%
%  Standard file identification. We first announce the package 
%	 and require that it be used with \LaTeX2e. 
% \iffalse
%<*LSECT>
% \fi
%  
%
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1994/12/01]%
\RequirePackage[2014/05/01]{latexrelease}
\ProvidesFile{phd-lowersections}[2015/1/13 v1.0 less preamble (YL)]%
%    \end{macrocode}
%
% 
% \section{Source2e Interface}
% 
% I am not very fond of mixing expl3 control sequences with source2e commands. Here
% we provide an interface for all these commands we might use. 
% This section can be revisited once expl3 code becomes available.
%
%    \begin{macrocode}
\ExplSyntaxOn
\let\ltxtoday\today
\let\phd_hang_from:nn \@hangfrom
\newif\if@ltxcompat \@ltxcompatfalse
\ExplSyntaxOff
%    \end{macrocode}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_if_exist:cTF {tikzi}
  {}
  {
    \newcommand\tikzi[1][after heading] 
    {
   %\if@debug
    \tikz[remember~picture,overlay] 
    \draw[<->] (0,0)--(0,.2)--++(-.5,0) node[left,fill=blue!15,text=black]%
       {
         \parbox{2cm} 
         {
           {\sffamily
            \footnotesize #1}
         }
       };%\space%
   %\fi    
    }
  }
\ExplSyntaxOff  
%    \end{macrocode}
%
% \section{Key Management}
%
% This part of the code is a bit verbose. We care to provide keys for all
% parameters in order to allow flexibility and easy extensions.
%
% \subsection{Sections}
%    \begin{macrocode}
\ExplSyntaxOn
\def\l_phd_subsection_number_prefix_tl {}
\def\l_phd_subsection_number_suffix_tl {}
\def\l_phd_subsubsection_number_prefix_tl{}
\def\l_phd_subsubsection_number_suffix_tl{}
\def\l_phd_paragraph_number_prefix_tl{}
\def\l_phd_paragraph_number_suffix_tl{}
\def\l_phd_subparagraph_number_prefix_tl{}
\def\l_phd_subparagraph_number_suffix_tl{}
%    \end{macrocode}
%
% \begin{docCommand} {phd_book_divisions_clist} { \meta{} }
%   This clist contains all the book divisions, we later also
%   provide an interface for the user to add new content to it.
% \end{docCommand} 
%
%    \begin{macrocode} 
\clist_new:N   \phd_book_divisions_clist
\clist_gset:Nn \phd_book_divisions_clist
  {
    part,chapter,section,subsection,subsubsection,
    paragraph,subparagraph
  }
%    \end{macrocode}
%
% \begin{docCommand} {phd_create_new_element:nn} { \marg{label}}
%  Creates new dims for primary elements. The label is one of chapter, section
%  etc. 
% \end{docCommand}
%    \begin{macrocode}
\cs_new:Npn \phd_create_new_element:nn #1 
  {
    \dim_gzero_new:c {l_phd_#1_margin_top_width_dim} %margin
    \dim_gzero_new:c {l_phd_#1_margin_right_width_dim}
    \dim_gzero_new:c {l_phd_#1_margin_bottom_width_dim}
    \dim_gzero_new:c {l_phd_#1_margin_left_width_dim}
    
    \dim_gzero_new:c {l_phd_#1_padding_top_width_dim} %margin
    \dim_gzero_new:c {l_phd_#1_padding_right_width_dim}
    \dim_gzero_new:c {l_phd_#1_padding_bottom_width_dim}
    \dim_gzero_new:c {l_phd_#1_padding_left_width_dim}
    
    \dim_gzero_new:c {l_phd_#1_border_top_width_dim} %margin
    \dim_gzero_new:c {l_phd_#1_border_right_width_dim}
    \dim_gzero_new:c {l_phd_#1_border_bottom_width_dim}
    \dim_gzero_new:c {l_phd_#1_border_left_width_dim}
 }
%    \end{macrocode}
%
% Next we create the secondary elements.
%
%    \begin{macrocode}  
\clist_map_inline:Nn \phd_book_divisions_clist
  {
    \phd_create_new_element:nn {#1}
  }

 \clist_new:N \phd_secondary
 \clist_gset:Nn \phd_secondary 
 { 
   part_label,
   part_label_before,
   part_number, 
   part_title,
   part_title_before   
   part_number_before,
   
   chapter_title,
   section_title,
   subsection_title,
   subsubsection_title,
   paragraph_title,
   subparagraph_title,
   chapter_title_before,
%   
   chapter_label,
   section_label,
   subsection_label,
   subsubsection_label,
   paragraph_label,
   subparagraph_label,
   chapter_label_before,
%  
   chapter_number,section_number,
   subsection_number,subsubsection_number,
   paragraph_number,subparagraph_number,
   
   chapter_number_before,

 }    
 
\clist_map_inline:Nn \phd_secondary
  {
    \phd_create_new_element:nn {#1}
  }
  
    
\cs_new:Npn \printproperties
  {
    \input{debug-dims}  
  }    
\ExplSyntaxOff  
%    \end{macrocode}
%
%  \begin{docCommand} { l_phd_make_new_heading_keys:n} { \meta {element name} }
%    Creates a new set of keys for an element for exmaple, chapter, section or 
%    chapter title.
%    Not all keys are applicable to all elements (for example numbering), hence the
%    code is split into primary and secondary elements. A primary element is an
%    element whose parent is |document|.
%  \end{docCommand} 
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \l_phd_make_new_heading_keys:n #1 #2
 {
  \cxset
    {
% Main elements names etc
     #1~name/.store                = #1name, 
% afterindent     
     #1~afterindent/.onoff         = afterindent@cx, 
% Main text alignment
     #1~align/.textalign           = l_phd_#2_align_tl,       
% spacing     
     #1~beforeskip/.store          = l_phd_#2_before_skip_tl,
     #1~afterskip/.store           = l_phd_#2_afterskip_tl,
     #1~indent/.store              = l_phd_#2_indent_tl,
% fonts
     #1~font-size/.fontsize        = l_phd_#2_fontsize_tl,
     #1~font-weight/.fontweight    = l_phd_#2_fontweight_tl, 
     #1~font-shape/.fontstyle      = l_phd_#2_fontshape_tl,  
     #1~font-family/.fontfamily    = l_phd_#2_fontfamily_tl, 
% text case     
     #1~case/.case                 = l_phd_#2_case_tl,  
% Format
     #1~format/.format~in          = l_phd_#2_format_tl,   
%    \end{macrocode}
%
% The following defaults are only applicable to css models.
%
%    \begin{macrocode}     
% Colors
     #1~background-color/.store    = l_phd_#2_background_color_tl,
     #1~frame-color/.store         = l_phd_#2_frame_color_tl,
     #1~color/.colorin             = l_phd_#2_color_tl, 
     #1~shadow/.shadow             = l_phd_#2_shadow_tl,

% Box
     #1~width/.store               = l_phd_#2_width,
     #1~arc/.store                 = l_phd_#2_arc_tl,
     #1~grow~left/.store           = l_phd_#2_grow_left_dim,
     #1~grow~right/.store          = l_phd_#2_grow_right_dim,
     #1~rounded~corners/.store     = l_phd_#2_rounded_corners_tl,
% Borderlines     
     #1~borderline~top/.store      = l_phd_#2_borderline_top_tl,
     #1~borderline~right/.store    = l_phd_#2_borderline_right_tl, 
     #1~borderline~bottom/.store   = l_phd_#2_borderline_bottom_tl, 
     #1~borderline~left/.store     = l_phd_#2_borderline_left_tl, 
% Borderline color
     #1~borderline~top-color/.store      = l_phd_#2_borderline_top_color_tl,
     #1~borderline~right-color/.store    = l_phd_#2_borderline_right_color_tl, 
     #1~borderline~bottom-color/.store   = l_phd_#2_borderline_bottom_color_tl, 
     #1~borderline~left-color/.store     = l_phd_#2_borderline_left_color_tl,           
% Box borders
     #1~border-top-width/.store     =  {l_phd_#2_border_top_width_dim}    ,  
     #1~border-right-width/.store   =  {l_phd_#2_border_right_width_dim}  , 
     #1~border-bottom-width/.store  =  {l_phd_#2_border_bottom_width_dim} ,  
     #1~border-left-width/.store    =  {l_phd_#2_border_left_width_dim}   , 
% Box padding
     #1~padding-top-width/.store    =  {l_phd_#2_padding_top_width_dim}    ,  
     #1~padding-right-width/.store  =  {l_phd_#2_padding_right_width_dim}  , 
     #1~padding-bottom-width/.store =  {l_phd_#2_padding_bottom_width_dim} ,  
     #1~padding-left-width/.store   =  {l_phd_#2_padding_left_width_dim}   , 
% Box margin        
     #1~margin-top-width/.store     =  {l_phd_#2_margin_top_width_dim}    ,  
     #1~margin-right-width/.store   =  {l_phd_#2_margin_right_width_dim}  , 
     #1~margin-bottom-width/.store  =  {l_phd_#2_margin_bottom_width_dim} ,  
     #1~margin-left-width/.store    =  {l_phd_#2_margin_left_width_dim}   , 
   }
 }
\ExplSyntaxOff 
%    \end{macrocode}
%
% \begin{docCommand} {l_phd_make_new_numbering_keys:n} { \marg{element name} }
%  Not all heading elements need to access a counter and associated fields, so
%  we provide a function to specifically target these keys.
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \l_phd_make_new_numbering_keys:n #1 
  {     
% Numbering Wow!
\cxset{
     #1~number~prefix/.store       = l_phd_#1_number_prefix_tl,
     #1~number~suffix/.store       = l_phd_#1_number_suffix_tl,
     
     #1~number~after/.store        = l_phd_#1_number_after_tl,
     #1~numbering/.is~choice,
     #1~numbering/roman/.code          =
       \cs_gset:cpn {the#1}
         {
           \cs:w l_phd_#1_number_prefix_tl \cs_end: 
             \@roman\cs:w c@#1\cs_end:\relax
           \cs:w l_phd_#1_number_suffix_tl \cs_end:   
         },
     #1~numbering/Roman/.code          =
      \cs_gset:cpn {the#1}
        {
          \cs:w l_phd_#1_number_prefix_tl \cs_end: 
          \expandafter\@Roman{\cs:w c@#1\cs_end:\relax} 
          \cs:w l_phd_#1_number_suffix_tl \cs_end:  
        },
    #1~numbering/(roman)/.code          =
    \cs_gset:cpn {the#1}
       {
       \cs:w l_phd_#1_number_prefix_tl \cs_end: 
         (\@roman\cs:w c@#1\cs_end:\relax)
       \cs:w l_phd_#1_number_suffix_tl \cs_end:    
       },
    #1~numbering/(Roman)/.code          =
    \cs_gset:cpn {the#1}
      {
        \cs:w l_phd_#1_number_prefix_tl \cs_end: 
        (\@Roman \cs:w c@#1\cs_end:\relax)
        \cs:w l_phd_#1_number_suffix_tl \cs_end:  
      },
   #1~numbering/arabic/.code           =
    \cs_gset:cpn {the#1}
      {
        \cs:w l_phd_#1_number_prefix_tl \cs_end: 
        \@arabic\cs:w c@#1\cs_end: \relax
        \cs:w l_phd_#1_number_suffix_tl \cs_end: 
      },
   #1~numbering/numeric/.code          =
    \cs_gset:cpn {the#1}
      {
        \cs:w l_phd_#1_number_prefix_tl \cs_end: 
        \@arabic\cs:w c@#1\cs_end:\relax
        \cs:w l_phd_#1_number_suffix_tl \cs_end: 
      },
   #1~numbering/none/.code             = 
    \cs_gset:cpn {the#1} {},
   #1~numbering/alpha/.code            = 
    \cs_gset:cpn {the#1}
      {
        \cs:w l_phd_#1_number_prefix_tl \cs_end: 
        \exp_after:wN \alphalph {\cs:w c@#1\cs_end:\relax}
        \cs:w l_phd_#1_number_suffix_tl \cs_end:   
      },
   #1~numbering/Alpha/.code            = 
    \cs_gset:cpn {the#1}
      {
        \cs:w l_phd_#1_number_prefix_tl \cs_end: 
          \exp_after:wN \AlphAlph{\cs:w c@#1\cs_end:\relax}
        \cs:w l_phd_#1_number_suffix_tl \cs_end:  
      },
   #1~numbering/words/.code            = 
    \cs_gset:cpn {the#1}
      {
       \cs:w l_phd_#1_number_prefix_tl \cs_end: 
       \words@cx{\@arabic\cs:w c@#1\cs_end:\relax}
       \cs:w l_phd_#1_number_suffix_tl \cs_end:  
      },
   #1~numbering/Words/.code            =
    \cs_gset:cpn {the#1}
      {
        \cs:w l_phd_#1_number_prefix_tl \cs_end: 
        \Words@cx{\@arabic\cs:w c@#1\cs_end:\relax }
        \cs:w l_phd_#1_number_suffix_tl \cs_end:  
      },
   #1~numbering/WORDS/.code            =
    \cs_gset:cpn {the#1}
      {
       \cs:w l_phd_#1_number_prefix_tl \cs_end:   
       \WORDS@cx{\@arabic\cs:w c@#1\cs_end:\relax}
       \cs:w l_phd_#1_number_suffix_tl \cs_end:  
      },
   #1~numbering~custom/.code           = 
    \cs_gset:cpn {the#1} {##1},        
  }   
 }   
\ExplSyntaxOff
%    \end{macrocode}
%
% We are now ready to start creating the keys for the headings. The headings names are
% stored in  \refCom{phd_book_divisions_clist}. We iterate through all the elements to
% create the keys.
%
%    \begin{macrocode}
\ExplSyntaxOn
%

\clist_map_inline:Nn \phd_book_divisions_clist 
  {    
    \l_phd_make_new_heading_keys:n{#1}{#1}
    \l_phd_make_new_numbering_keys:n{#1}
  }

\clist_map_inline:Nn \phd_book_divisions_clist 
  {  \wlog{#1, }
    \l_phd_make_new_heading_keys:n {#1~title}{#1_title} 
    \l_phd_make_new_heading_keys:n {#1~title~before}{#1_title_before} 
    \l_phd_make_new_heading_keys:n {#1~number}{#1_number}
    \l_phd_make_new_heading_keys:n {#1~number~before}{#1_number_before}
    \l_phd_make_new_heading_keys:n {#1~label}{#1_label}
    \l_phd_make_new_heading_keys:n {#1~label~before}{#1_label_before}
    \l_phd_make_new_heading_keys:n {#1~before}{#1_before}
    \l_phd_make_new_heading_keys:n {#1~after}{#1_after}
  }
  

\ExplSyntaxOff
%    \end{macrocode}
% \section{Programmatically create key defaults}

% With such a large list of properties, we create default values programmatically. Then
% these are overwritten later to more appropriate values. This ensures that all keys are
% created and that no errors occur.
%
% \begin{docCommand} {l_phd_set_headings_key_defaults:n } { \marg{element name} }
%   This function takes one agument and inititalizes all the keys.
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \l_phd_set_headings_key_defaults:n #1 
  {
    \cxset
      { 
% name      
       % #1~name                   = Chapter,
% numbering    
      %  #1~numbering              = arabic,        
        #1~align                  = Centering,
% renderer format        
        #1~format                 = block,
% fonts    
        #1~font-size              = HUGE,
        #1~font-weight            = bold,
        #1~font-family            = sffamily,
        #1~font-shape             = upshape,
        #1~case                   = upper, 
% colors    
        #1~color                  = black,
        #1~background-color       = bgsexy,
        #1~frame-color            = bgsexy,
% spacing    
        #1~indent                 = 0pt,
        #1~beforeskip             = 10pt,
        #1~afterskip              = -3ex,
        #1~afterindent            = off,
% box and effects   
        #1~arc                    = 0pt,
        #1~afterindent            = off, 
        #1~grow~left              = 0mm,
        #1~grow~right             = 0mm, 
        #1~rounded~corners        = northeast,
        #1~shadow                 = drop~shadow,
% borderlines
        #1~borderline~top          = 1pt,
        #1~borderline~right        = 1pt,        
        #1~borderline~bottom       = 1pt,        
        #1~borderline~left         = 1pt, 
% borderlines color
        #1~borderline~top-color    = black,
        #1~borderline~right-color  = black,        
        #1~borderline~bottom-color = black,        
        #1~borderline~left-color   = black,                 
%    
        #1~border-left-width      = 1pt,
        #1~border-right-width     = 1pt,
        #1~border-top-width       = 1pt,
        #1~border-bottom-width    = 1pt,
    
        #1~padding-left-width     = 1pt,
        #1~padding-right-width    = 1pt,
        #1~padding-top-width      = 1pt,
        #1~padding-bottom-width   = 1pt,
%        
     }
  }
%    \end{macrocode}
% Next we map all the keys to defaults.
%
%    \begin{macrocode}
\clist_map_inline:Nn \phd_book_divisions_clist
  { \wlog{set defaults ... #1 ...,}
    \l_phd_set_headings_key_defaults:n {#1}  
    \l_phd_set_headings_key_defaults:n {#1~title} 
    \l_phd_set_headings_key_defaults:n {#1~title~before} 
    \l_phd_set_headings_key_defaults:n {#1~label} 
    \l_phd_set_headings_key_defaults:n {#1~label~before}
    \l_phd_set_headings_key_defaults:n {#1~number}
    \l_phd_set_headings_key_defaults:n {#1~number~before}
    \l_phd_set_headings_key_defaults:n {#1~before}
    \l_phd_set_headings_key_defaults:n {#1~after}
  }
\ExplSyntaxOff
%    \end{macrocode}
%
%    \begin{macrocode} 
\ExplSyntaxOn 
\cxset 
  { 
    section~spaceout/.is~choice,
    section~spaceout/soul/.code            = \@sectionspaceouttrue,
    section~spaceout/none/.code            = \@sectionspaceoutfalse,
 }  
\ExplSyntaxOff 
%    \end{macrocode}
% As described earlier boxed headings have numerous elements, each of which can be styled
% on its own. 
% 
%
% 
% \chapter{Formatters and Associated Functions}

% Formatters are functions that produce a layout and apply the properties
% to a number of elements. There are is a formatter for each format
% available as a property to a heading. The most comprehensive is the
% css block formatter that can size individual boxes and also
% float them as required. Special formatters can be added to the package
% as extensions. 
%
% \section{Helper functions}
%
% The helper functions transfer properties form keys to
% tikz or tcolorbox boxes or to plain macros for simpler formatters. They
% are just convenient functions to keep the code for the formatters, shorter.
%
% \begin{docCommand} {set_font_aux:n} { \marg{element name} }
%  This helper function sets the font properties.
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \set_font_aux:n #1
 {
   \cs_if_exist_use:c { #1_fontfamily_tl }
   \cs_if_exist_use:c { #1_fontweight_tl }
   \cs_if_exist_use:c { #1_fontshape_tl  }
   \cs_if_exist_use:c { #1_fontsize_tl   }
 }
%    \end{macrocode} 
% 
%    \begin{macrocode}
\cs_new:Npn \set_borders_aux:nn #1 #2
 {
   \dim_if_exist:cTF{l_phd_#1_border_#2_width_dim } {8pt}{2pt}
  }
 
\cs_new:Npn \set_color_aux:nn #1 #2
 {
   \cs:w l_phd_#1_#2_color_tl \cs_end:
 }
\ExplSyntaxOff 
%    \end{macrocode}
%
% \begin{docCommand} { set_borderline_aux:nn } { \marg{} \marg{}}
%  Sets the borders of a tcolorbox or other box. For tcolorbox, there
%  is an important difference between borderlines and rules.
%  Borderlines are a bit problematic in a declarative interface. 
%  Firstly they take four arguments. Following the shadows
%  interface we offer predetermined, styles as well as allow 
%  maximum flexibility through styles for the user.
%
%  To draw them they require offset, thikness, color and line type.
%  The offset determines if they drawn away or inwards the original
%  path.
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \set_borderline_aux:nn #1 #2   
{
   \tcbset{borderline~style/.style = 
   {
     borderline~west = {\cs:w l_phd_#1_borderline_left_tl \cs_end:}
                       {-\set_borders_aux:nn {#1} {left}-0pt }
                       {
                        \cs:w l_phd_#1_borderline_left_color_tl \cs_end: , 
                         solid,
                       }, 
     borderline~east = {\cs:w l_phd_#1_borderline_right_tl \cs_end:}
                       {-\set_borders_aux:nn {#1} {right}-0pt }
                       { 
                         \cs:w l_phd_#1_borderline_right_color_tl \cs_end:,
                         solid
                       },  
     borderline~north = {\cs:w l_phd_#1_borderline_top_tl \cs_end:}
                       {-\set_borders_aux:nn {#1} {top}-0pt }
                       { \cs:w l_phd_#1_borderline_top_color_tl \cs_end:, 
                        dashed},   
     borderline~south = {\cs:w l_phd_#1_borderline_bottom_tl \cs_end:}
                       {-\set_borders_aux:nn {#1} {bottom}-0pt }
                       {
                         \cs:w l_phd_#1_borderline_bottom_color_tl \cs_end:, 
                         dashed
                       },                                                    
    }
  }                       
}
\ExplSyntaxOff
%    \end{macrocode}
%
% \begin{docCommand} {format_inmargin} {}{}{}
%  This is a simple formatter that places the heading in the margin.
%  Useful for old style books.
% \end{docCommand}
%    \begin{macrocode}      
\ExplSyntaxOn
\cs_set:Npn \format_inmargin:nnn #1#2#3
  {
     \tcbdocmarginnote
     { 
       
       \hbox{Section~\@svsec}
       #3
     } 
  }    
\ExplSyntaxOff  
%    \end{macrocode}
%
% \section {Hanged formats}
% Most books will have sections as hanged paragraphs. They can be indented or outdented
% into the margins and can consist of a single line or more. We provide a genereric
% formatter based on the one in \latexe first. 

%
% \lorem
%
% \begin{docCommand} {format_hang:nn} { \marg{element name} }
%  This formatter renders the classic \latexe hanged paragraph. As all the 
%  properties are available in the keys, we do not really need to concern ourselves
%  with passing values from the main function to here. 
% \end{docCommand}
%  
%    \begin{macrocode}
\ExplSyntaxOn
% 1 skip from left
% 2 
%\phd_hang_from:nn{#6\relax\@svsec}%
%        \interlinepenalty\@M {#6#8}\par\xsect:n{#5} 
\cs_set:Npn \format_hang:nn #1#2#3 
  {
    \phd_hang_from:nn
        {
         \set_font_aux:n {l_phd_#1}
         \cs:w 
          l_phd_#1_number_color_tl 
          \cs_end:
         {\hskip 0pt %indent
           \cs:w the#1 \cs_end:
           \hskip1em
         }
        }
        {
          \set_font_aux:n {l_phd_#1}
          \cs:w 
          l_phd_#1_color_tl 
          \cs_end:
          #3 
        }
   { \interlinepenalty\@M   
    \@@par }
%    \end{macrocode}
%
% In classic \latexe end of section action depends on the sign of the
% afterskip. A negative sign is used to indicate an inline paragraph and a
% positive a hanged section. All the post action being handled by |\@xsect|.
% 
% As this is not very intuitive, we move the xsect code below for the
% hang paragraphs, with the intention to simplify the inline code in the
% inline renderer later.
%
%    \begin{macrocode}  
    \par \nobreak
    \skip_vertical:c {l_phd_#1_afterskip_tl}
    \phd_after_heading: 
    \tex_ignorespaces:D
  }
\ExplSyntaxOff
%    \end{macrocode}
%
% \begin{docCommand} {format_hang_inmargin} { \marg{element name} \marg{text} }
%  This is a variation to the hanged format, where the heading number is in the 
%  margin.
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \format_hang_inmargin:nn #1#2 
  {
    \bgroup
    \parindent0pt
    \setbox\@tempboxb\hbox 
     {
       \set_font_aux:n {l_phd_#1}
       \expandafter\@arabic\cs:w c@#1 \cs_end:
     }
     \makebox[0pt]{
          \makebox[-\wd\@tempboxb][r]{%
         \set_font_aux:n {l_phd_#1}
         {
           \tcbox[nobeforeafter,box~align=center,
                  colback=bgsexy]
                  {
                    \cs:w the#1 \cs_end:
                  }
         }
        }
        }
     \begin{tcolorbox}[size=minimal,nobeforeafter,box~align=center] 
          \set_font_aux:n {l_phd_#1}
          \cs:w 
          l_phd_#1_color_tl 
          \cs_end:
          #2 
    \end{tcolorbox}      
    \egroup
    \interlinepenalty\@M   
    \@@par
%    \end{macrocode}
%
%    \begin{macrocode}  
    \par \nobreak
    \skip_vertical:c {l_phd_#1_afterskip_tl}
    \phd_after_heading: 
  }
\ExplSyntaxOff
%    \end{macrocode}
% 
% \section {This is a very long section to see how it will wrap and also to ensure that the afterindents perform as they should.}

% \lorem\lorem
% \section{Format block}
%
%  
% \begin{docCommand}{format_block:nnnn} { \meta{element name} \meta{} \marg{} \marg{} }
%   This function is the main function for block and fancy headings.
%   ornamentation if any. 
% \end{docCommand}
% 
% We create a boolean that determines if the element label and its number are to
% betypeset inline or not.
%
%    \begin{macrocode}   
\ExplSyntaxOn 
\bool_new:N \combo_if_bool \bool_gset_true:N \combo_if_bool
%    \end{macrocode}
%
% We are now ready to define the function.
%    \begin{macrocode}
\cs_set:Npn \format_block:nnnn #1#2#3#4
  {
    \bgroup
    %\leftskip-1.25in
    \set_borderline_aux:nn {#1}{}
    \begin{tcolorbox}[enhanced,
      width       = \textwidth-4pt, %\pdfpagewidth-4cm,
      arc         = 10mm,
      auto~outer~arc,
      \cs_if_exist_use:cTF {l_phd_#1_shadow_tl}{}{},
        colback           = \set_color_aux:nn {#1}{background},
        colframe          = \set_color_aux:nn {#1}{frame},
        toprule           = \set_borders_aux:nn {#1} {top},
        rightrule         = \set_borders_aux:nn {#1} {right},
        bottomrule        = \set_borders_aux:nn {#1} {bottom},
        leftrule          = \set_borders_aux:nn {#1} {left},
%       borderline        = {5pt}{5pt}{blue,double,dashed,line~join=bevel},
%       borderline~north = {2pt}{-3pt}{dotted},
%       borderline~south = {2pt}{-3pt}{dotted},
%       borderline~east  = {2pt}{-3pt}{dotted},
%       borderline~west  = {2pt}{-3pt}{dotted},      
        %borderline~style, 
%       no~borderline,     
%       show~bounding~box,
        rounded~corners=all,
        drop~lifted~shadow=black,
     ] 
     \bool_if:NTF \combo_if_bool 
     {
       \phd_float_box:nnn {chapter_number} {}{
         \tcbox{\cs:w #1name\cs_end:\space 
                \cs:w the#1\cs_end:}          
           }
    }
    {         
     \phd_float_box:nnn {#1}{}
       {
         \tcbox{\@svsec}
  
       }  
    }
%  
% above title box {empty}    
   \phd_float_box:nnn {#1_title_before}{}{}     
% title float box    
   \phd_float_box:nnn {#1_title}{}{#4}
   \par
   \end{tcolorbox}
 \egroup  
 \par\nobreak\nointerlineskip
}    
%    \end{macrocode}
%
%
%  \begin{docCommand} {phd_float_box} { \marg{identifier} \marg{} \marg{}}
%    |#1|  The section label\\
%    |#2|  The secondary identifier i.e, title\\
%    |#3|  The text of the box\\
%  \end{docCommand}
%
%  This box contains an outer and an inner box, permitting the second box to float freely into
%  the first box. The widths are constrained based on user inputs or automatic calculations.
%
%    \begin{macrocode}
\cs_set:Npn \phd_float_box:nnn #1 #2 #3
{\set_borderline_aux:nn {#1}{}
  \begin{tcolorbox}
    [
      size=minimal,no~shadow,
      colback  = \cs:w l_phd_#1_background_color_tl \cs_end:, 
      colframe = \cs:w l_phd_#1_frame_color_tl \cs_end:, 
      toprule  = .1pt,
      borderline~style,
     ]
    \cs:w l_phd_#1_align_tl \cs_end:
    \begin{tcolorbox}
      [
        %#1~outer,
        size=minimal, 
        no~shadow,
        colback = \cs:w l_phd_#1_background_color_tl \cs_end:,
        colframe= \cs:w l_phd_#1_frame_color_tl \cs_end:,,
        boxsep=10pt,
        %drop~shadow, 
        width=0.7\textwidth, 
        borderline~style,
       % halign = ,
       ]
       {   \language-1\relax

      \set_font_aux:n {l_phd_#1}
      \cs:w  l_phd_#1_color_tl       \cs_end:
      \cs:w  l_phd_#1_align_tl  \cs_end:
       {#3}\relax %
         
      }
  \end{tcolorbox}
   \par
  \end{tcolorbox}
}

\ExplSyntaxOff
%    \end{macrocode}
%
% ^^A\ExplSyntaxOn
% ^^A\format_block:nnnn {chapter} {Demo Chapter} {} {Demo}
% ^^A\ExplSyntaxOff
%
% \subsection{Display format}
% The display format typesets a heading in a similar fashion to 
% traditional chapters.
%
% \begin{docCommand}{format_display:nn} {\marg{section name}} { \marg{skip after number} \marg {} }
%   Displays a section similar to Chapters
% \end{docCommand}
%  \#1 Section name \\
%  \#2 indent       \\
%  \#3 format para        \\
%  \#4 Title text\\
%  svsec number
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \format_display:nnnn #1 #2 #3 #4
{
  \cxset{#1~title~margin-top-width=30pt}
  \format_block:nnnn {#1}{#2}{#3}{#4}
}
 \ExplSyntaxOff
%    \end{macrocode}
%
% \#1 name
% \#2 indent
% \#3 title
%  
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \format_inline:nnn #1 #2 #3
  {
   {\bfseries\normalfont
    \theparagraph #3}
   }    
\ExplSyntaxOff  
%    \end{macrocode}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \format_part_traditional:nn #1 #2 #3
  {\par\leavevmode
   \group_begin:
    \centering
     \interlinepenalty \@M
     \normalfont
     \cs:w l_phd_#1_number_tl\cs_end:
     \set_font_aux:n {l_phd_#1_number}
     \ifnum \c@secnumdepth >-2\relax
       \partname\nobreakspace\thepart
       \par
       \vskip 20\p@
     \fi
     \group_begin:
       %\set_color:nn {#1}{color}
       \set_font_aux:n {l_phd_#1 }
          #3
     \group_end:
     \par
   \group_end:  
  }
\ExplSyntaxOff  
%    \end{macrocode}  
%
% \chapter{Layout Engine Code}
%
% 
% 
% The function is declared using |xparse| to simplify the switching between 
% the various options of the headings commands.
%
% \begin{docCommand} {start_section:nnnnnnnnn} { \marg{nine parameters}}
%
% \end{docCommand}
%
%  |#1| name i.e, section\\
%  |#2| level number 2 section\\
%  |#3| indent\\
%  |#4| beforeskip\\
%  |#5| afterskip\\
%  |#6|  styling command\\
%   

% \section{Test}
% The first action is to
%
% \lorem\lorem\par
%
% \subsection{Test}
%
%    \begin{macrocode}
\ExplSyntaxOn
\DeclareDocumentCommand \start_section:nnnnnnnnn {m m m m m m s o m}      
  {
    \if@noskipsec \leavevmode \fi
    \par
%    check for before skip    
    \l_tmpa_skip #4\relax 
    \@afterindenttrue
    \if_dim:w \l_tmpa_skip <\z@
% make it positive    
      \skip_gset:Nn\l_tmpa_skip {-\l_tmpa_skip}  
      \@afterindentfalse
    \fi:
%    
    \if@nobreak
      \everypar{\tikzi[start\\sect]}
    \else
      \addpenalty \@secpenalty
      \addvspace\l_tmpa_skip
    \fi
%
% redirect depending on star or option
%     
    \IfBooleanTF {#7}
      {\@ssect {#3} {#4} {#5} {#6} {#9} }
      {
        \IfValueTF {#8} {\@sect:  {#1} {#2} {#3} {#4} {#5} {#6} [{#8}] {#9} }
                        {\@sect:  {#1} {#2} {#3} {#4} {#5} {#6} [{#8}] {#9} } 
      }   
  }
%    \end{macrocode}
%
% If we are running in compatibility mode we totally ignore the function and revert 
% back to normal \latexe.
% 
%    \begin{macrocode}  
\@ltxcompatfalse
\if@ltxcompat 
  \else 
  \cs_gset_eq:NN \@startsection \start_section:nnnnnnnnn
\fi

\ExplSyntaxOff  
%    \end{macrocode}
%
% \begin{docCommand} {@sect:} { \marg{8 args} }
%   The auxiliary function to start the rendering process. 
% \end{docCommand}
%

% The function takes now eight parameters, as we do not care about the star option of
% the command.
% 
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \@sect: #1 #2 #3 #4 #5 #6 [#7] #8 
  {
%    \end{macrocode}
%
% We check if the sction number depth allows for the heading to be added to the
% toc, if not we let it to empty.
%
%    \begin{macrocode}
    \int_compare:nTF {#2>\c@secnumdepth} 
      {
         \let\@svsec\@empty
      }
      {
        \refstepcounter{#1}
        \protected@edef\@svsec
          {
            \@seccntformat{#1}\relax
          }
        % add short title or long title  
        \IfValueTF{#7}  
          { 
             \cs:w #1mark\cs_end: {#7}
% put curly brackets around 7 to enable capturing the title             
             \addcontentsline{toc}{#1}{
                \protect\numberline{\csname the#1\endcsname}{#7}}
          }
          { 
             \cs:w #1mark\cs_end: {#8} 
              \addcontentsline{toc}{#1}{ 
                \protect\numberline{\csname the#1\endcsname}{#8}}
          }
      } 
%    \end{macrocode}
%
% The next part is basically a router that redirects rendering to the right
% formatter. This allows for new formatters to be added by the user or in
% future releases of this package.
%
%    \begin{macrocode}     
   \@tempskipa #5\relax
   \gdef\@svsechd{#8}
   
   \phd_format_router:nn {#1}{#8}
}   
\ExplSyntaxOff
%    \end{macrocode}
%
% \begin{docCommand}{phd_format_router:nnn} { \marg{text} }
%   The format router selects the format to be used to render the heading. It takes
%   the text as its parameter. The rendering properties are picked up by the template.
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \phd_format_router:nn #1 #2  
  {
    \str_case_x:nnTF {\cs:w l_phd_#1_format_tl \cs_end:}  
      {
          { display      } {\format_display:nnnn { #1 } {  } {} { #2       } 
                             \xsect:n {3.5ex}   } 
          { block        } { \format_block:nnnn  {#1 } {  } {} { {#2}      } 
                             \xsect:n {3.5ex} 
                           } 
          { plain        } { \format_hang:nn    {#1} {  }   {#2}           } 
          { hang         } { \format_hang:nn    { #1 } {  } {#2}           }                     
          { hanginmargin } {\format_hang_inmargin:nn {#1} {#2}             }   
          { leftmargin   } {\format_hang_inmargin:nn {#1} {#2}             }          
          { inline       } {  \xsect:n {-3.5ex}                            }
          { inmargin     } {\format_inmargin:nnn {#1} {} {#2}              }
          { traditional  } {\format_part_traditional:nn {#1}{}{#2}         }
      }  
      {       } 
%    \end{macrocode}
%
% We test for formatters provided as extensions. If they have been defined by the
% user, they can either exist in a file or have been entered in the preamble. We first
% test for the preamble. If they exist we load them.
%    \begin{macrocode}
 
      {       
        \cs_if_exist:cTF { l_phd_#1_format_tl } 
          { 
            \expandafter\cs:w
               \cs:w l_phd_#1_format_tl 
               \cs_end:
               \cs_end:
               %\stewart 
               { #1 } { #2 } 
          }
          { FALSE }
      }
  }
 
\ExplSyntaxOff  
%    \end{macrocode}
%
% \begin{docCommand}{@ssect} { {\meta{indent}} {\meta{beforeskip}} {\meta{afterskip}} \meta{styling commands} \meta{arg1} }
% This is the star verson of the command.  What it means is that we want a heading with
% no numbers and not in the toc. Also it does not add it as a mark! This is very limiting
% as originally programmed in the kernel; probably the thinking was to use it to create
% same style headings, that one would use for purposes other than sectioning. In reality
% many books have unnumbered sections and one might want them to go on the headings.
% We modify it to be able to do both based on a settings command.
% So to summarize star section means unumbered. Will use choices as
% to what must be done with it.
%
%  
%  \#1 indent\\
%  \#2 beforeskip\\
%  \#3 afterskip\\
%  \#4 styling command\\
%  \#5 arg1 follows\\
%
% \end{docCommand} 
%    \begin{macrocode}  
\ExplSyntaxOn  
%  
\cs_set:Npn \@ssect #1 #2 #3 #4 #5 {%
  \@tempskipa #3\relax
%    \end{macrocode}
% 
%    \begin{macrocode}  
  \ifdim \@tempskipa>\z@
  \begingroup
    #4{
    \phd_hang_from:nn{\hskip #1}%
    \interlinepenalty \@M (#5)\@@par}%
    \endgroup
  \else
  \def\@svsechd{#4{\hskip #1\relax #5}}%
  \fi
% |\xsect:n{afterskip}| then sets the afteskipping as well as the afterindent.   
  \xsect:n{#3} %ONLY NEEDED FOR HANG PARA
}
%   
\ExplSyntaxOff   
   
%    \end{macrocode}
%
% \begin{docCommand}{@xsect:n} {\marg{afterskip}}
%  This command sets handles indentation after a sectioning command. It also handles
%  the printing of the title for inline sections (it is saved as |\@svsechd| earlier. It is common
%  for both the star and unstarred versions of |\section|.
% \end{docCommand}
%
% Note that |\@noskipsec| is a switch set true by a sectioning command when it is creating an
%in-text heading with |\everypar|.
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \xsect:n #1 
  { 
  \l_tmpa_skip #1\relax
  \if_dim:w \l_tmpa_skip>0pt %WATCH better boolean
    \par \nobreak
    \vskip\l_tmpa_skip
    \phd_after_heading: 
   \else:
    \@nobreakfalse
    \global\@noskipsectrue
    \tex_everypar:D 
      {\if@noskipsec
          \global\@noskipsecfalse%resets switch
          {\setbox\z@\lastbox}
          \tex_clubpenalty:D\@M
          \group_begin:
            \parindent0pt\tcbox[size=minimal,
                    nobeforeafter,
                    box~align=base]{\bfseries \@svsechd }%} 
          \group_end:
          \tex_unskip:D
          \l_tmpa_skip #1\relax
          \hskip -\l_tmpa_skip
        \else
          \tex_clubpenalty:D \@clubpenalty
          \tex_everypar:D {\tikzi[every]}
        \fi
      }
  \fi:
  \tex_ignorespaces:D
  }

\cs_set:Npn \after_block:n #1 
 {
   \par \nobreak
    \vskip\l_tmpa_skip
    \phd_after_heading:
 }    
\ExplSyntaxOff 
%    \end{macrocode} 
% \begin{docCommand} {phd_after_heading:} { \meta{void} }
%  This is an explorified version of the \latexe \docAuxCommand{@afterheading} control sequence.
%  It has an interesting purpose. It is called after block headings to remove
%  the indentation from the first line of the next paragraph. 
% \end{docCommand}
%
% The nobreak hackery is used to ensure that there is no page break after a heading
% (it will look very odd). We add some hooks for visual debugging. Note that
% |\nobreak|, |\break| and |\allowbreak| are just macros holding penalty values.
%
% Also note the definitions of the kernel.
%
% |58 \def\@nobreakfalse{\global\let\if@nobreak\iffalse}|\\
% |59 \def\@nobreaktrue {\global\let\if@nobreak\iftrue}|\\
% |60 \@nobreakfalse|\\
%
%    \begin{macrocode}  
\ExplSyntaxOn
\cs_gset:Npn \phd_after_heading:
  {
    \@nobreaktrue
    \tex_everypar:D
      {
        \if@nobreak
          \@nobreakfalse
          \clubpenalty \@M %1000 no orphans from this point onwards
          \if@afterindent 
          \else
            {\setbox\z@\lastbox}%
%             \tikzi[everypar in after heading,
%               clubpenalty ...\\
%               = \the\clubpenalty]
          \fi
       \else
       \clubpenalty \@clubpenalty %150
       \tex_everypar:D
         {
%           \tikzi[everypar in after heading cleared\\
%                  clubpenalty\\ \the\clubpenalty
%                 ]
         }
       \fi
    }
  }  
\ExplSyntaxOff  
%    \end{macrocode}
% 
% When LaTeX is typesetting the section number it calls |\@seccntformat|
% to use it when typsetting a section heading number. This is common for
% all the subsectioning commands. We modify it based on code from \pkgname{sectsty} in order
% to generalize it.
% 
% We first check if \meta{section}|@cntformat| is defined and then we redirect
% to specific section level command.
%
% \begin{docCommand} {@seccntformat} {\marg{section name}}
%  This is a \latexe kernel factory command that produces |thesection| etc.
%  In the kernel it only takes a generic value, where we have 
%  \refCom{section_number_after_tl}.
%  We modify to enable adjustable values for all sectioning commands. 
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
 \cs_gset:Npn \@seccntformat #1
 {
  \@ifundefined{#1@cntformat}%
  {\csname the#1\endcsname\section_number_after_tl}% default
  {\csname #1_cntformat\endcsname}% individual control
 }
%    \end{macrocode}
%
% \begin{docCommand}{section_number_after_tl} { \meta{void}}
%  This function and its siblings are auxiliary functions.
% \end{docCommand}
%
%    \begin{macrocode}
\tl_set:Nn  \section_number_after_tl{\quad}%default value only space
\tl_set:Nn  \subsection_number_after_tl{\quad}%default value only space
\tl_set:Nn  \subsubsection_number_after_tl{\quad}%default value only space
\tl_set:Nn  \l_phd_paragraph_number_after_tl{\quad}%default value only space
\tl_set:Nn  \subparagraph_number_after_tl{\quad}%default value only space
%
\cs_set:Npn \section_cntformat{\thesection\section_number_after_tl}
\cs_set:Npn \subsection_cntformat{\thesubsection\subsection_number_after_tl}
\cs_set:Npn \subsubsection_cntformat{\thesubsubsection\subsubsection_number_after_tl}
\cs_set:Npn \paragraph_cntformat {\theparagraph\l_phd_paragraph_number_after_tl }
\cs_set:Npn \subparagraph_cntformat {\thesubparagraph\subparagraph_number_after_tl }
\ExplSyntaxOff
%    \end{macrocode}
%
% 
% \begin{docCommand}{part} { \meta{*} \oarg{arg1} \marg{arg2} }
%   The standard \latexe part is renewed next. We avoid all the complications of
%   the kernel with different longish sections for chapters and parts.
% \end{docCommand}  
%
%    \begin{macrocode}
\ExplSyntaxOn
 \renewcommand\part {%
   \newpage\null
   \thispagestyle{empty}
    \start_section:nnnnnnnnn{part}%
      {-1}  %level check this conflicts with source2e
      {\l_phd_part_indent_tl} %indent#2
      
      {\l_phd_part_before_skip_tl}%before skip#3
      
      {\l_phd_part_afterskip_tl}% after skip#4
      
      { 
%        \setfont@cx
%        {\l_phd_chapter_fontweight_tl}%
%        {\l_phd_chapter_fontfamily_tl}
%        {\l_phd_chapter_fontsize_tl}
%        {\l_phd_chapter_fontshape_tl}%
          %\expandafter\setfontparam@cx\l_phd_chapter_align_tl;%
          \l_phd_part_color_tl %5
      }
 }
\ExplSyntaxOff 
%    \end{macrocode}
%
% \begin{docCommand}{chapter} { \meta{*} \oarg{arg1} \marg{arg2} }
%   The standard \latexe chapter is renewed next. We avoid all the complications of
%   the kernel with different longish sections for chapters and parts.
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
 \renewcommand\chapter {%
   \newpage\null
   \thispagestyle{empty}
    \start_section:nnnnnnnnn{chapter}%
      {0}  %level check this conflicts with source2e
      
      {\l_phd_chapter_indent_tl} %indent#2
      
      {\l_phd_chapter_before_skip_tl}%before skip#3
      
      {\l_phd_chapter_afterskip_tl}% after skip#4
      
      { 
%        \setfont@cx
%        {\l_phd_chapter_fontweight_tl}%
%        {\l_phd_chapter_fontfamily_tl}
%        {\l_phd_chapter_fontsize_tl}
%        {\l_phd_chapter_fontshape_tl}%
          %\expandafter\setfontparam@cx\l_phd_chapter_align_tl;%
          %\color{\l_phd_chapter_color_tl}%5
      }
 }%

%    \end{macrocode} 
%
% \begin{docCommand}{section} { \meta{*} \oarg{arg1} \marg{arg2} }
%   The standard \latexe subsection is renewed next. 
% \end{docCommand} 
%    \begin{macrocode}

\if@ltxcompat
\else
  \renewcommand\section{%
    \@startsection{section}%
      {1}%level check this conflicts with source2e

      {\l_phd_section_indent_tl}%indent#2
      
      {\l_phd_section_before_skip_tl}%before skip#3
      
      {\l_phd_section_afterskip_tl}% after skip#4
      
      {
        \set_font_aux:n {l_phd_section}
%        {\l_phd_section_fontweight_tl}%
%        {\l_phd_section_fontfamily_tl}
%        {\l_phd_section_fontsize_tl}
%        {\l_phd_section_fontshape_tl}%
%          \expandafter\setfontparam@cx\l_phd_section_align_tl;%
          \l_phd_section_color_tl %5
      }
 }%
%}
\fi
\ExplSyntaxOff
%    \end{macrocode}
% 
% \begin{docCommand}{subsection} { \meta{*} \oarg{arg1} \marg{arg2} }
%   The standard \latexe subsection is renewed next. 
% \end{docCommand}  
%     \begin{macrocode}
\ExplSyntaxOn
\if@ltxcompat
\else
%
 \renewcommand\subsection
    {
      \@startsection{subsection}
        {1}
        {\l_phd_subsection_indent_tl}%indent
        {\l_phd_subsection_before_skip_tl}%before skip#3
        {\l_phd_subsection_afterskip_tl}% after skip#4
      
        { 
        \set_font_aux:n {l_phd_subsection}
         % \expandafter\setfontparam@cx\l_phd_subsection_align_tl;%
         \l_phd_subsection_color_tl  %5
        }
   }
\fi
\ExplSyntaxOff
%\renewcommand\subsection{\@startsection{subsection}{2}{\z@}%
%                                     {-3.25ex\@plus -1ex \@minus -.2ex}%
%                                     {1.5ex \@plus .2ex}%
%                                     {\normalfont\large\bfseries\raggedright}}
%\fi
%
%    \end{macrocode}
%
%  
% \begin{docCommand}{subsubsection} { \meta{*} \oarg{arg1} \marg{arg2} }
%   The standard \latexe subsection is renewed next. 
% \end{docCommand}
%   \begin{macrocode}
\ExplSyntaxOn
\if@ltxcompat
\else
\renewcommand{\subsubsection}
{
  \@startsection{subsubsection}%
    {3}%level
    {\l_phd_subsubsection_indent_tl}%indent
    {\l_phd_subsubsection_before_skip_tl}
    {\l_phd_subsubsection_afterskip_tl}
    {
      \set_font_aux:n {l_phd_subsubsection}
%%    {\l_phd_subsubsection_fontweight_tl }
%%    {\l_phd_subsubsection_fontfamily_tl}
%%    {\l_phd_subsubsection_fontsize_tl}
%%    {\l_phd_subsubsection_fontshape_tl}
%%      \expandafter\setfontparam@cx
%      %\l_phd_subsubsection_align_tl; 
      \l_phd_subsubsection_color_tl
    }
}  
\fi     
\ExplSyntaxOff
%    \end{macrocode}
% 

%
% \subsection{Paragraphs}
%
%  We now deal with paragraphs and subparagraphs, normally termed `runin’ heads, as they produce
%  headings that are inlined with the text that follows. We add hooks, so that later the key mechanism
%  can be used to pick-up values. Although they are termed runins, there is no issue to display
%  them as block.
% 
% \begin{docCommand}{paragraph} { \meta{*} \oarg{arg1} \marg{arg2} }
%  There is a feature in the standard \latexe classes that a subparagraph is indented
%  by the value of \cs{parindent}. This also features in memoir but is absent in the
%  KOMA classes. In our defaults we follow the European norm.
% \end{docCommand}
% 
% Next we provide our definition for paragraphs. 
%
%    \begin{macrocode}
\ExplSyntaxOn
%\if@ltxcompat
%\renewcommand\paragraph{\@startsection{paragraph}{4}{\z@}%
%                                    {3.25ex \@plus1ex \@minus.2ex}%
%                                    {-1em}%
%                                    {\normalfont\normalsize\bfseries}}
%\else
%\if@ltxcompat
%\else
  \renewcommand\paragraph{
     \@startsection{paragraph}
     {4}%level
     {\l_phd_paragraph_indent_tl}%indent
     {\l_phd_paragraph_before_skip_tl}%
     {\l_phd_paragraph_afterskip_tl}%
     {
      \set_font_aux:n {l_phd_paragraph}
%      {\l_phd_paragraph_fontweight_tl}%
%     {\l_phd_paragraph_fontfamily_tl}
%     {\l_phd_paragraph_fontsize_tl}
%     {\l_phd_paragraph_fontshape_tl}%
%     \expandafter\setfontparam@cx\l_phd_paragraph_align_tl;%
      \l_phd_paragraph_color_tl
     }%
   }
%\fi
\ExplSyntaxOff
%    \end{macrocode}
%
% \begin{docCommand}{subparagraph} { \meta{*} \oarg{arg1} \marg{arg2} }
%  There is a feature in the standard \latexe classes that a subparagraph is indented
%  by the value of \cs{parindent}. This also features in memoir but is absent in the
%  KOMA classes. In our defaults we follow the European norm.
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn  
\if@ltxcompat
\renewcommand\subparagraph{\@startsection{subparagraph}{5}{0pt}%
                                       {2ex}%
                                       {-1em}%
                                      {\normalfont\normalsize\bfseries}}
\else                                      
\renewcommand\subparagraph
      {
         \@startsection{subparagraph}
         {5}%level
         {\l_phd_subparagraph_indent_tl}%indent
         {\l_phd_subparagraph_before_skip_tl}
         {\l_phd_subparagraph_afterskip_tl}
         {
           \set_font_aux:n {l_phd_subparagraph}
           \expandafter\setfontparam@cx
            \l_phd_subparagraph_align_tl;
            \l_phd_subparagraph_color_tl
         }
       } 

\fi
\ExplSyntaxOff
%    \end{macrocode}
%

% 
% \cxset{section numbering=arabic}
% 
%
% \chapter{Default Settings}
%
% Setting default values
%
%
%    \begin{macrocode}
\cxset { section name              = Section,
    section format                 = hang,
    section align                  = Centering,
    section title align            = Centering, %checked
%    
    section font-size              = Large,
    section font-weight            = bfseries,
    section font-family            = serif,
    section font-shape             = upshape,
%    
    section number font-size       = Large,
    section number font-weight     = bfseries,
    section number font-family     = serif,
    section number font-shape      = upshape,    
%
    section title font-size        = Large,
    section title font-weight      = bfseries,
    section title font-family      = serif,
    section title font-shape       = upshape,
%    
    section color                  = black,
    section number prefix          = \thechapter.,
    section number suffix          =,
    section numbering              = arabic,
    section indent                 = 0pt,
    section beforeskip             = -3ex,
    section afterskip              = 1.5ex \@plus .1ex,
    section afterindent            = off,
    section number after           = \quad,
%    
    section arc                    = 3pt,
    section background-color       = white,
    section afterindent            = off, 
    section grow left              = 0mm,
    section grow right             = 0mm,
    section rounded corners        = northeast,
%    
    section border-left-width      = 0pt,
    section border-right-width     = 0pt,
    section border-top-width       = 2pt,
    section border-bottom-width    = 2pt,
%
    section padding-left-width     = 0pt,
    section padding-right-width    = 10pt,
    section padding-top-width      = 2pt,
    section padding-bottom-width   = 2pt,
%
    section title margin-top-width       = 2pt, 
    section title color            = spot,    
    section shadow                 = no shadow,  
  }   
%    \end{macrocode} 
%    \begin{macrocode}
\cxset
  { 
    subsection name                   = Subsection,
    subsection format                 = hang, 
%    
    subsection font-size              = large,  
    subsection font-weight            = bfseries,
    subsection font-family            = rmfamily,
    subsection font-shape             = upshape,
%
    subsection number font-size       = large,  
    subsection number font-weight     = bfseries,
    subsection number font-family     = rmfamily,
    subsection number font-shape      = upshape,
%    
    subsection title font-size        = Large,
    subsection title font-weight      = bfseries,
    subsection title font-family      = sffamily,
    subsection title font-shape       = upshape,
    subsection title color            = spot,    
%        
    subsection color                  = bgsexy,
    subsection numbering              = arabic,
    subsection align                  = Centering, %checked
    subsection title align            = Centering, %checked
    subsection beforeskip             = -3.25ex\@plus -1ex \@minus -.2ex,
    subsection afterskip              = 1.5ex \@plus .2ex,
    subsection number prefix          = \thesection.,
    subsection indent                 = 0pt,
    subsection number after           = 0pt,
    subsection background-color       = white,
%    
    subsection border-left-width      = 0pt,
    subsection border-right-width     = 0pt,
    subsection border-top-width       = 5pt,
    subsection border-bottom-width    = 5pt,
%
    subsection padding-left-width     = 0pt,
    subsection padding-right-width    = 0pt,
    subsection padding-top-width      = 20pt,
    subsection padding-bottom-width   = 20pt,                
    subsection shadow                 = drop shadow,
  }
%    \end{macrocode}
%    \begin{macrocode}
\cxset
  { 
    subsubsection name                    = Subsubsection,
    subsubsection format                  = hang,  
    subsubsection background-color        = white!30, %checked
%    
    subsubsection font-family             = rmfamily, 
    subsubsection font-size               = large,
    subsubsection font-weight             = bfseries,
    subsubsection font-family             = tiresias,
    subsubsection font-shape              = upshape,
%    
    subsubsection font-family             = sffamily, 
    subsubsection font-size               = large,
    subsubsection font-weight             = bfseries,
    subsubsection font-family             = tiresias,
    subsubsection font-shape              = upshape,
%    
    subsubsection color                   = bgsexy,
    subsubsection number prefix           = \thesubsection,
    subsubsection number suffix           = ,
    subsubsection numbering               = arabic,
    subsubsection indent                  = 0pt,
    subsubsection beforeskip              = -3.25ex\@plus -1ex \@minus -.2ex,
    subsubsection afterskip               = 1.5ex \@plus .2ex,
    subsubsection align                   = center,
    subsubsection title align             = center,
    subsubsection number after     =,
%    
    subsubsection border-left-width       = 0pt,
    subsubsection border-right-width      = 0pt,
    subsubsection border-top-width        = 2pt,
    subsubsection border-bottom-width     = 0pt,
%
    subsubsection padding-left-width      = 0pt,
    subsubsection padding-right-width     = 0pt,
    subsubsection padding-top-width       = 20pt,
    subsubsection padding-bottom-width    = 20pt, 
    subsubsection shadow                  = no shadow,  
%
    subsubsection title font-size         = large,
    subsubsection title font-weight       = bfseries,
    subsubsection title font-family       = serif,
    subsubsection title font-shape        = upshape,
    subsubsection title color             = spot,          
  }
%    \end{macrocode}
%
%    \begin{macrocode}
% paragraph
\cxset
  {
    paragraph name                = paragraph,
    paragraph format              = inline, 
    paragraph name                = paragraph,
    paragraph font-size           = large,
    paragraph font-weight         = bfseries,
    paragraph font-family         = rmfamily,
    paragraph font-shape          = upshape,
    paragraph numbering           = alpha,
    paragraph align               = flushleft,
    paragraph beforeskip          = 3.25ex plus1ex minus.2ex,
    paragraph afterskip           = -1em,
    paragraph indent              = 0pt,
    paragraph number after        = \quad,
    paragraph color               = bgsexy,
    paragraph background-color    = white,
    paragraph shadow              = no shadow,
  }
%    \end{macrocode}
%    \begin{macrocode}    
\cxset
  {
    subparagraph name             = subparagraph,
    subparagraph format           = inline,
    subparagraph name             = subparagraph, 
    subparagraph font-size        = large,
    subparagraph font-weight      = bfseries,
    subparagraph font-family      = rmfamily,
    subparagraph font-shape       = upshape,
    subparagraph color            = bgsexy,
    subparagraph background-color = bgsexy,
    subparagraph numbering        = none,
    subparagraph align            = flushleft,
    subparagraph beforeskip       = 3.25ex plus1ex minus .2ex,
    subparagraph afterskip        = -1em,
    subparagraph indent           = 0pt,
    subparagraph number after     = ,
    subparagraph shadow           = off, 
  }
%    \end{macrocode}
%
% \section{Styles}
%    \begin{macrocode}  
\cxset{chapter title style/.style= {
       chapter title align = left,}
 } 
\cxset{section title style/.style= {
       section title align = Centering,}
 } 
\cxset{section title style/.style= {
       section title align = Centering,}
 }
 \cxset{subsection title style/.style= {
       subsection title align = Centering,}
 }
 \cxset{subsubsection title style/.style= 
   {
        subsubsection align       = #1,
        subsubsection title align = #1,
   }
 }
 \cxset{subsubsection title style= raggedright}
%    \end{macrocode}
% \cxset{chapter afterskip=60pt}
% \chapter{Tests}
%
%  We prepare a number of tests to verify that all settings work as advertized.
%
% \begin{docCommand}{testsections} {\meta{void}}
%  In honor of Barbara Beeton all testing commands are in lowercase, but we also provide
%  them in mixed case for the rest of the crowd.
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \testsections 
  {
    \section{Sections}
    \lorem\par
    \subsection{Subsections}
    \lorem\par
    \subsubsection{Subsubsections}
    \lorem\par
    \paragraph {Paragraph}
  }
\cs_set_eq:NN \TestSections\testsections  
\ExplSyntaxOff  
%    \end{macrocode}
%  \cxset{section format = block,
%         section font-size=large,
%         section font-weight=bold,
%         subsection format=block,
%         subsubsection format = block,
%         paragraph format =block,
%         subparagraph format = block,
%         subsection font-family=sffamily,
%         chapter title font-size=Huge,
%         chapter number font-size=Huge,
%         chapter number font-family =sffamily ,
%         chapter align  = centering,
%}
% ^^A\testsections
% 
%
%</LSECT>
\endinput
