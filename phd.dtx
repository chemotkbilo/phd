% \iffalse meta-comment
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
phd --- a package to shorten preambles
E-mail: yannislaz@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------
This file provides a phd for defining a class.
%</readme>
%<*readmemd>
###The `phd` LaTeX2e package

The `phd` latex package and the class with the same name provide
convenient methods to create new styles for books, reports
and articles. It also loads the most commonly used packages 
and resolves conflicts.

This work consists of the file  `phd.dtx`,
and the derived files   `phd.ins`,  `phd.pdf`, and `phd.sty`.

###Installation

run
          phd-lua.bat on windows
           pdflatex phd.dtx
           makeindex -s gind.ist -g phd 

If you have any difficulties with the package come and join us at
http://tex.stackexchange.com and post a new question or
add a comment at http://tex.stackexchange.com/a/45023/963.
or send me a message at  yannislaz at gmail.com

### Documentation

The package was written using the `doc` and `docscript` packages,
so that it is self documented in a literary programming style. 
The .pdf is a fat document, providing over fifty book styles (the
equivalent of classes) plus there is a lot of write-up on the inner
workings of TeX and LaTeX2e. However, you don't need to know much
to use it.

      \usepackage{phd}
      \input{style13}

All choices, are made via an extended key-value interface. 
Although not a compliment, it resembles CSS and the keys are a bit verbose but
attributes are easy to change and have a consistent and easy to remember interface.

To set or add a key we only use one command:

      \cxset{chapter name font-size: Huge,
             chapter number font-size: HUGE} 

### Future Development

This is still an experimental version, but I will retain the
interface in future releases. There is a large amount of
work still to be carried out to improve the template styles
provided, to test it more thoroughly and to add a number of
improvements in the special designs. At present I estimate
that I have completed about 70% of the work that needs
to be done.

__The package as it stands is not production stable.__ 


%</readmemd>
%
%<*TODO>
1. On final round add pkg options. This was left as last in order not to solve problems by adding
    options. Too many options are not a good User Interface.
2.  Finish symbol management, both text and math. Math already 60% incorporated.
3.  Better integration of indexing commands.   
4.  Revisit layout manager for Chapters. Broke again in tests.
5.  Docs. Add all references.
6.  Incorporate phd class for more flexibility.
7. Improve package manager.
8. Group script loading for better font management.
9. General font management to relook it again.
10. Add all style sections (about 100 already prepared). Once they
     are all working issue beta version.
%</TODO>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
phd --- A package to beautify documents.
E-mail: yannislaz@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------
\endpreamble

%\BaseDirectory{C:/users/admin/my documents/github/phd}
%\usedir{MWE}
\generate{\file{\jobname.sty}{
  \from{\jobname.dtx}{package}
  \from{hyphenation.dtx}{hyphen}
}}
\generate{
  \file{MWE-02.tex}{\from{minimals.dtx}{MWE-02}}
  \file{MWE-03.tex}{\from{minimals.dtx}{MWE-03}}
  \file{defaults.tex}{\from{minimals.dtx}{DEFAULTS}}
}
\generate{
  \file{test-tufte.tex}{\from{minimals.dtx}{test-tufte}}
  \file{test-memoir.tex}{\from{minimals.dtx}{test-memoir}}
  \file{test-scrartcl.tex}{\from{minimals.dtx}{test-scrartcl}}
  \file{test-algorithms.tex}{\from{minimals.dtx}{test-algorithms}}
  \file{test-hyphenation.tex}{\from{minimals.dtx}{test-hyphenation}}
  \file{settings.tex}{\from{minimals.dtx}{settings}}
  \file{test-spacing.tex}{\from{minimals.dtx}{test-spacing}}
  }
%\nopreamble\nopostamble
\generate{
  \file{hhhiero.la}{\from{hiero.dtx}{hhiero}}
}
%</install>

%<install>\endbatchfile
%<*internal>
%\usedir{tex/latex/phd}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble

\generate{
	\file{README.txt}{\from{\jobname.dtx}{readme}}
  }

\generate{
  \file{README.md}{\from{\jobname.dtx}{readmemd}}
}
\generate{
  \file{TODO.tex}{\from{\jobname.dtx}{TODO}}
}
\generate{
  \file{MWE-01.tex}{\from{\jobname.dtx}{MWE-01}}
}

\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
 
\immediate\write18{makeindex -s gglo.ist -g phd.gls phd.glo}  %needs checking from trivfloat
\immediate\write18{makeindex -s gind.ist -g phd.ind phd.idx} %needs checking from Josephâ€™s trivfloat
%</internal>
%<*driver>

%\listfiles
%gdef\@onlypreamble{} % TO BE REMOVED NEEDED FOR TUTS
\documentclass[oneside,11pt,a4paper]{ltxdoc}

\makeatletter
%\usepackage{pkgindoc}
%\usepackage{phdfilecontents}
%\gdef\@notprerr{supress error for commands only in preamble}
%\def\@eha{}
\let\@notprerr\relax
\let\sidenote\footnote
\def\partname{Part}
\makeatother
%
\usepackage[bottom=2cm]{geometry}
\savegeometry{std}

% \usepackage[style=mla]{biblatex}
\usepackage[unicodemath=on, 
            asianscripts=off,
            microtype=off,
            debug=on]{phd}
\usepackage{pkgindoc}             %%% danger

\usepackage{Acorn, AnnSton, ArtNouv, ArtNouvc, Carrickc, Eichenla, Eileen, EileenBl, Elzevier, GotIn, GoudyIn, Kinigcap, Konanur, Kramer, MorrisIn, Nouveaud, Romantik, Rothdn, Royal, Sanremo, Starburst, Typocaps, Zallman}

\ifASIANSCRIPTS
\ifluatex
  \newfontfamily\UI{Segoe UI}
  \newfontfamily\hiero{NotoSansEgyptianHieroglyphs-Regular.ttf}
  \newfontfamily\meitei{Noto Sans Meetei Mayek}
  \newfontfamily\yi{Microsoft Yi Baiti}
  \newfontfamily\sundanese{SundaneseUnicode-1.0.5.ttf}
  \newfontfamily\tailue{NotoSansNewTaiLue-Regular.ttf}
  \newfontfamily\myanmar{Padauk}
  \newfontfamily\hebrew{Miriam}
  \newfontfamily\arabian
    [Script=Arabic,        % to get correct arabic shaping
     Scale=1.2]            % make the arabic font bigger, a matter of taste
    {Scheherazade}         % whatever Arabic font you like
  \newcommand{\textarabic}[1] % Arabic inside LTR
           {\bgroup\luatextextdir TRT\arabian #1\egroup}
  \newcommand{\narabic}         [1] % for digits inside Arabic text
           {\bgroup\luatextextdir TLT #1\egroup}
  \newcommand{\afootnote} [1] % Arabic footnotes
           {\footnote{\textarabic{#1}}}
  \newenvironment{Arabic}     % Arabic paragraph
           {\luatextextdir TRT\luatexpardir TRT\arabicfont}{}
  \newfontfamily\arabicfont[Script=Arabic]{Amiri}
  \newfontfamily\cherokee{Digohweli_1.ttf}%
  \newfontfamily\telugufam{code2000.ttf}
  \newfontfamily\gujarati[Scale=1.0]{code2000.ttf}
  \newfontfamily\bengal[Script=Bengali,Scale=1]{Shonar Bangla}
  \newfontfamily\russianfonttt{DejaVu Sans Mono}
  \newfontfamily\russianfont{Arial}
  \newfontfamily\armenianfont[Script=Armenian,Scale=MatchLowercase]{FreeSans}
  %%\newfontfamily\titus[Scale=1.05]{TITUSCBZ.ttf}
  %\newfontfamily\noto{NotoSerif-Regular.ttf}
  \newfontfamily\brahmi{Noto Sans Brahmi}
  %\newfontfamily\arial{Arial Unicode MS}
  \newfontfamily\pan{code2000.ttf}
  \let\cjk\pan
  \let\mongolian\pan
  \newfontfamily\aegean{Aegean.ttf}
   % Thai font
  \newfontfamily\thai[Scale=1.0,Script=Thai]{IrisUPC}
  % balinese
  \newfontfamily\balinese{Aksara Bali}
  \let\balinese\pan
  % lao
  \newfontfamily\lao[Scale=1.1]{code2000.ttf}
  \let\lao\pan
  \let\indicative\pan
  \def\defaulttext{\arial }
  \linespread{1.05}
  \frenchspacing
\fi
\fi
\ifxetex
\newfontfamily\arabian
    [Script=Arabic,        % to get correct arabic shaping
     Scale=1.2]            % make the arabic font bigger, a matter of taste
    {Scheherazade}         % whatever Arabic font you like
\newcommand{\textarabic}[1] % Arabic inside LTR
           {\bgroup\luatextextdir TRT\arabian #1\egroup}
\newcommand{\narabic}         [1] % for digits inside Arabic text
           {\bgroup\luatextextdir TLT #1\egroup}
\newcommand{\afootnote} [1] % Arabic footnotes
           {\footnote{\textarabic{#1}}}
\newenvironment{Arabic}     % Arabic paragraph
           {\luatextextdir TRT\luatexpardir TRT\arabicfont}{}
\newfontfamily\arabicfont[Script=Arabic]{Amiri}
  \newfontfamily%
  \arabicfonttt[Script=Arabic,Scale=.75]{DejaVu   Sans Mono}
  \newfontfamily\telugufam{code2000.ttf}
  \newfontfamily\gujarati[Scale=1.0]{code2000.ttf}
  \newfontfamily\bengal[Script=Bengali,Scale=1]{Shonar Bangla}
  \newfontfamily\russianfonttt{DejaVu Sans Mono}
  \newfontfamily%
    \russianfont{Arial}
  \newfontfamily%
    \armenianfont[Script=Armenian,Scale=MatchLowercase]
{FreeSans}
  \newfontfamily\titus[Scale=1.05]{TITUSCBZ.ttf}

  \newfontfamily\noto{NotoSerif-Regular.ttf}
  \newfontfamily\brahmi{Noto Sans Brahmi}
  \newfontfamily\arial{Arial Unicode MS}
  \newfontfamily\pan{code2000.ttf}
  \let\mongolian\pan
  %\newfontfamily\aegean{Aegean.ttf}
   % Thai font
  \newfontfamily\thai[Scale=1.0,Script=Thai]{IrisUPC}
  % balinese
  \newfontfamily\balinese{Aksara Bali}
  \let\balinese\pan
  % lao
  \newfontfamily\lao[Scale=1.1]{code2000.ttf}
  \let\lao\pan
  \let\indicative\pan
  \def\defaulttext{\arial }
  \linespread{1.05}
  \frenchspacing
\fi

\setcounter{secnumdepth}{6}

\sethyperref


%\input{defaultstyle}

%\usepackage[verbose]{backref}  not eith biblatex
%\backrefsetup{verbose=false}
% gives error
%
%% PACKAGES AFTER HYPERREF
%\usepackage{arydshln}
%\usepackage{cleveref}
\usepackage{expl3}
\usepackage{xparse}
%\usepackage{pagenote}
%\usepackage{pkgindoc}
%xfrac loads xtemplate?xbox
\usepackage{subcaption}
\usepackage{calligra} 
%\usedictionary{pages}
%Fix overfful hboxes automatically
\tolerance=2000
\emergencystretch=10pt
\makepagenote %????
%\EnableCrossrefs
% One of the two commands below
%\CodelineIndex

\PageIndex
\RecordChanges
\usepackage{makeidx}
\makeindex

\DeclareFloatingEnvironment[fileext=plate,
                                             listname=List of Plates,
                                             name=Plate,
                                             placement=htbp,
                                             within=none]{plate}
                                             
\DeclareFloatingEnvironment[fileext=painting,
                                             listname=Paintings,
                                             name=Painting,
                                             placement=htbp,
                                             within=none]{painting}                                             
            

% Try getting errors
%\usepackage{opcit}  
%\let\citep\cite
%\let\citet\cite
%\usepackage{glossaries} conflict with acronym
%\makeglossaries %experimental

%\let\oldnobreakspace\nobreakspace
%\usepackage{ctib}
%\let\nobreakspace\oldnobreakspace
\newfontfamily{\codetwothousand}{code2000.ttf}
  \newfontfamily{\codetwothousandone}{code2001.ttf}
  \newfontfamily{\symbola}{symbola.ttf}
 
\begin{document}
\cxset{toc name=Table of Contents,
       toc name align=center}
\mainmatter
\cxset{blank page text=}


\raggedright
%\input{./styles/style87b-doc}
%
\tableofcontents
\listoffigures
\listoftables
\mainmatter

\def\setchapterfont{}
\def\setchaptertitlefont{}

\def\programming{%
  \part{PROGRAMMING}
  \input{./sections/macros}%
  \input{./sections/grouping}%
  \input{./sections/iteration}%
  \input{./sections/expandafter}
  \input{./sections/futurelet}
  \input{./sections/colors}
  \input{./sections/classes}
  \input{./sections/dates}
  \input{./sections/keyvalues}%
 }
%

\def\fontsandsymbols{%
   \part{FONTS}
   \input{./sections/unicode}
    \input{./sections/fonts}
    \input{./sections/symbols}
    \input{./sections/characters}
 }   
%
 \ifUNICODE
      \input{./sections/unicodemath}
 \fi
 
 
\def\mathdocs{
\part{MATHEMATICS}
\input{./sections/maths-01}
 \input{./sections/pericula}
}


  
\def\bibandindex{%
  \part{BIBLIOGRAPHIES, INDICES and GLOSSARIES}
  \input{./sections/bibliographies}
  \input{./sections/indices}
 }  
 


\def\ttreport{
	\input{./mep/claim}
	\input{./mep/dewa}
	\input{./mep/busbar}
	\input{./mep/ahu}
	\input{./mep/disruption}
	\input{./mep/RFI-mechanical}
	\input{./mep/RFI-electrical}
	\input{./mep/provisional-sums}
	\normalsize
}



\def\latexiiidocs{
   \input{./sections/io}
   \input{./sections/l3files}
	\input{./sections/l3macros}
	\input{./sections/latex3-basic}
	\input{./sections/l3expansion}
	\input{./sections/l3quarks}
	\input{./sections/l3keys}
	\input{./sections/l3error}
	\input{./sections/l3counters}
	\input{./sections/l3xtemplate}
	\input{./sections/l3seq}
	\input{./sections/l3token}
	\input{./sections/l3tlists}
	\input{./sections/l3clists}
}

%\latexiiidocs

\def\luadocs{%
  \part{LuaTeX}
  \parindent=1em
  \input{./sections/i18n}
  \input{./sections/luatex}
  \input{./lua/lpeg} 
  \input{./lua/lua-tables}
  \input{./lua/metatables} 
  \input{./lua/luatex-fonts}
  \input{./sections/solar}
  \input{./lua/variadic}
  \input{./lua/strings}    
  \input{./lua/pattern-matching} 
  \input{./lua/modules}
  \input{lua/lua-objects}
  \input{./lua/nodes} 
  \input{./lua/luaio}
}


\def\kernel{%
  \part{THE LaTeX2e KERNEL}
     \input{./sections/book.cls.tex}
     \input{./sections/latexkernel}
     \input{./sections/ltfloat}
     \input{./sections/kernel-ltoutput}
     \input{./sections/kernel-N-ltlength}
%  \input{./sections/kernel-h-ltpar}
     \input{./sections/kernel-ltspace}
     \input{./sections/kernel-ltxref}
     \input{./sections/kernel-lterror}
     \input{./sections/kernel-ltdefns.tex}
     \input{./sections/kernel-ltbibl}
     \input{./sections/kernel-ltsect}
     \input{./sections/kernel-ltlists}
}

  %\input{./sections/acronyms}
 %\ttreport
\def\textdocs{
  \input{./sections/paragraphs}
  \input{./sections/characters}
  \input{./sections/acronyms}
  \input{./sections/hyperlinks}
   \input{./sections/marginpar}
   \input{./sections/quotations}
   \input{./sections/quotationsandotherintrusions}
  %  \input{./sections/dropcaps}
%\input{./sections/verse}
  \input{./sections/docmacros}

   %\input{./sections/tables}
   \input{./sections/headersandfooters01}
   \input{./sections/chemistry}
  \input{./sections/epigraphschapter}
}  
 
%  \input{./sections/book.cls.tex}
%  \input{./sections/kernel-ltlists}
%  \input{./sections/lists}
  

\def\phddoc{%
  \input{./sections/introduction}
  \input{./sections/chapterdesign}
    \input{./sections/lowerlevelheadings}
   \input{./styles/style87}
   \cxset{style87} 
    \cxset{section align=left}
    \cxset{section font-weight=bold}
    \cxset{section font-family=sffamily} 
}

\cxset{chapter numbering=arabic}

\def\graphicsdocs{%
  \part{GRAPHICS}
  \input{./sections/graphics}
  \input{./sections/wrapfig-02}
  \cxset{chapter numbering=arabic}
  \input{./sections/subfigure}
  \input{./sections/long-figures}
  \input{./sections/sideways}
  \input{./sections/twowomenreverse}
  \input{./sections/twowomen}
  \input{./sections/kroll}
  \input{./sections/bache}
  %\input{./sections/elgreco.tex}
  \input{./sections/albumpage}
  \input{./sections/albumpage-vertical-image}
  \restoregeometry
  \input{./sections/captions}
  \input{./sections/captionsandothers}
  \pagestyle{headings}
 
}

 \def\docboxing{%
    \part{BASIC TeX}
    %\input{./sections/characters}
    \input{./sections/boxesandglue}
    \input{./sections/rulesandleaders}
 }


\def\visualizations{
  \part{VISUALIZATIONS AND PLOTTING}
   \input{./sections/pictureenvironment}
   \input{./sections/tikz}
  \input{./sections/charting01}
}

 
 \def\languages{%
    \part{SCRIPTS AND LANGUAGES}
    \input{./sections/languages}
    \input{./languages/ancient-and-historic-scripts}
    \input{south-asian-scripts}
    \input{./languages/middle-eastern-scripts}
    \input{./languages/south-east-asian-scripts}
    \input{./languages/east-asian-scripts}
    \input{./languages/modern-scripts}
    \input{./languages/greek}
 }

\makeatletter
\mainmatter
\newcommand{\normalencoding}{\fontencoding{OT1}}
\newcommand\ttverb[1]{\texttt{\string#1}}
\newfontfamily{\tiresias}{Tiresias PCfont}
\input{./styles/style87}
%\input{./sections/more-on-boxes}


\cxset{section align=left}
\cxset{section font-weight=bold}
\cxset{section font-family=sffamily}
\cxset{subsection beforeskip=10pt} 
\cxset{subsection afterskip=10pt,
       subsection font-weight=bfseries,
       subsection font-family=tiresias,
       subsection font-size=Large,
       subsection font-shape=upshape,
       subsection align=flushleft,%don't say left
       subsection color=spot!50,
       subsection indent=0pt,
       %subsection afterindent=true,
       subsection numbering prefix=\thesection.,
       subsubsection indent=0pt,
       section font-family=tiresias,
       subsection font-family=tiresias,
       subsubsection font-family=tiresias,
       subsubsection indent=0pt,
       subsubsection font-size=large,
       chapter spaceout=soul,
       }

 % \phddoc
  \textdocs
%%
 \fontsandsymbols
%\mathdocs
%\input{./sections/mathlists}
%%
%%  
% \mathdocs 
 \latexiiidocs
%   
% \bibandindex 
%%% 
% \programming
%
 % \luadocs 
% 
% 
%%
  \graphicsdocs
%  \docboxing
% \visualizations
%%%
\ifASIANSCRIPTS
   \languages 
\fi 
%%% % programming source2e
%\kernel 
% \bibliography{phd} 
%% %
 
% \debugchapter
%\input{./sections/chapterdesign}
%\input{./sections/headersandfooters01}
%\input{./sections/lowerlevelheadings}
%\input{./styles/style52}
%\input{./styles/style53}
%\input{./styles/style83}
%%\input{./styles/style08}
%\input{./styles/style09}
%\input{./styles/style10}
%\input{./styles/style11}
%\input{./styles/style12}
%\input{./styles/style17}
%\input{./styles/style18}
%\input{./styles/style77}
%\input{./styles/style78}
%\input{./styles/style79}
%\input{./styles/style80}
%\input{./styles/style81}
%\input{./styles/style82}
%\input{./styles/style83}
\DocInput{\jobname.dtx}
% \printindex
 \end{document}
 %
% \input{./sections/OTR}
% 
%</driver>
% \fi
%  
%  \CheckSum{0}
%  \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
%
% \changes{1.0}{2013/01/26}{Converted to DTX file}
%
% \DoNotIndex{\newcommand,\newenvironment}
% \GetFileInfo{phd.dtx}
% 
%  \def\fileversion{v1.0}          
%  \def\filedate{2012/03/06}
% \title{The \textsf{phd} package.
% \thanks{This
%        file (\texttt{phd.dtx}) has version number \fileversion, last revised
%        \filedate.}
% }
% \author{Dr. Yiannis Lazarides \\ \url{yannislaz@gmail.com}}
% \date{\filedate}
%
%
% 
% ^^A\maketitle
% 
% ^^A\frontmatter
%  ^^A\coverpage{./images/hine02.jpg}{Book Design }{Camel Press}
%  ^^A\newpage
% ^^A\secondpage
% ^^A\pagestyle{empty}
%
%
% 
% \newif\ifmulticols
% \IfFileExists{multicol.sty}{\multicolstrue}{}
%
%
% {\parskip 0pt                ^^A We have to reset \parskip
%  
% 
%
% \gdef\dotsep{10000}          ^^A (bug in \LaTeX?)
% \makeatletter
%^^A  \tableofcontents
%   ^^A\listoftables
%  ^^A\listoffigures
% }

% ^^A\pagenumbering{empty}
%
% \pagestyle{headings}
% \raggedbottom
%  
%  \def\partname{Part}

%  \let\oldinput\input
%  
%  ^^A\def\input#1{\MakePercentComment \oldinput{#1}\MakePercentIgnore}
%  
%  
%  ^^A \input{./sections/pages}  messes layout
%  ^^A \input{./sections/floats}
%   ^^A\input{./sections/headersandfooters01}

%   ^^A\input{./sections/generalsettings}

% 

%  \OnlyDescription
%
%  ^^A\StopEventually{\printindex}
%<*package>
% \CodelineNumbered
% \pagestyle{headings}
% ^^A\cxset{style87}
%
%  \cxset{number color=black}
%
%  \part{IMPLEMENTATION}
% 
%  \cxset{chapter border-top-width=1pt,
%              }
%
% \chapter{Implementation Strategy}
%
% The implementation is divided into parts. Perhaps cutting,
% these parts into smaller packages might have been a better
% choice, but as the aim of the package is to minimize
% the loading of packages and let |phd| to handle
% this, it made more sense to me, anyway to keep everything
% together.
% 	
%
% \begin{description}
%
%  \item[The Package Manager] This section is responsible 
%       for pre-loading  packages, resolving conflicts and 
%       providing all interfacing commands.
%
%  \item[The Sectioning Layouts Manager] This section manages 
%       the design of complex layouts for sectioning commands.
%
%  \item [The Image Page Manager] This section manages the design of 
%       pages that consist primarily of images and complex
%		page layouts.
%
%  \item[Common Macros] We provide a number of predefined commands
%		for macros that us and other people found useful.
%
%  \item[MWE] The package generates a large number
%		of Minimum Working Examples that we use for testing. 
%		Most of them can also used as examples for training 
%		or self-study.
%
% \end{description}
%
% \section{The Package Manager}
%
% The basic requirement for the Package Manager is to load
% an adequate number of packages to enable the typesetting
% of a diverse number of large documents without requiring
% additional packages to be loaded by typical groups of
% authors. This has its advantages, but of course it does 
% slow things down. A long term objective is to select
% packages depending as an option on the type of document
% being prepared.
%
% \subsection{Preliminaries}
%
%    Standard file identification. We first announce the package 
%	 and require that it be used with \LaTeX2e. 
%
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1994/12/01]%
\ProvidesPackage{phd}[2015/1/13 v1.0 less preamble (YL)]%
\let\ltxtoday\today
%    \end{macrocode}
%
% Load the package \pkgname{fixltx2e} to update \LaTeX2e for various fixes. The package fixes a number things in the LaTeX2e kernel. Due to LaTeX's stability policy, these corrections have not been incorporated into the LaTeX2e kernel, but this package does things most people would agree are bugfixes. So to load this package is always recommended for newly created documents. The corrections have no commonalities, but the package's description has a nice summary:
%
%ensure one-column floats don't get ahead of two-column floats;
%correct page headers in twocolumn documents;
%stop spaces disappearing in moving arguments;
%allowing |\fnsymbol| to use text symbols;
%allow the first word after a float to hyphenate;
% cs{emph} can produce caps/small caps text;
%bugs in \cs{setlength} and \cs{flushbottom.}
% 
%    \begin{macrocode}
\RequirePackage{fixltx2e}[2006/03/24]
% mock chapters where necessary
\@ifundefined{c@chapter}{%  
      \newcounter{chapter}
      \def\thechapter{\@arabic\c@chapter}
}{}
%    \end{macrocode}
% We load the \pkg{pgf} package early so we can use it for key management.
% We create a family for keys, unimaginatively named phd. 
% This might  change in the future.
% 
% {pkgfamilyname}
% {cxset}
% {cxsetvalue}
% The macro \cmd{\cxset} is the workhorse of the package. It is used to define or to set options
% for styling documents and also offers other utilities.
%
%    \begin{macrocode}
\RequirePackage{expl3}
\RequirePackage{l3keys2e}
% 
\RequirePackage{morewrites}
\RequirePackage{pgf}      
\usepgfmodule{parser}%for svg     
\usepgflibrary{svg.path}%for futurelet and parser demo       
\def\pkgfamilyname{phd}
\pgfkeys{/\pkgfamilyname/.is family}   
\newcommand\cxset{\pgfqkeys{/\pkgfamilyname}} 
\def\cxkeydef#1#2{%
 \pgfkeyssetvalue{/\pkgfamilyname/#1}{#2}%
}
\def\cxvalueof#1{%
 \expandafter\pgfkeysvalueof{#1}%
}
%\RequirePackage{silence} gives errors with varwidth
 \hfuzz=999pt % reduce overfull hbox errors
 \hbadness=10000 % reduce underfull hbox errors
% 
%    \end{macrocode}
%
% \section{PACKAGE KEY MANAGEMENT}
% The package aims to be loaded with very few options, in order to minimize
% the learning curve and to improve on the User interface. It takes the approach
% that keys should remove functionality rather than add in order to allow the
% advanced user flexibility of use.
%    \begin{macrocode}
\newif\ifUNICODE \UNICODEfalse
\newif\ifASIANSCRIPTS\ASIANSCRIPTSfalse
\newif\ifMICROTYPE\MICROTYPEfalse
\newif\if@debug \@debugfalse

 \ExplSyntaxOn
 \bool_new:N \g_phd_microtype_bool
 \bool_set_false:N \g_phd_microtype_bool
 \bool_new:N \g_phd_unicodemath_bool
 \bool_set_false:N \g_phd_unicodemath_bool
 \bool_new:N \g_phd_asianscripts_bool
 \bool_set_false:N \g_phd_asianscripts_bool
 \bool_new:N \g_phd_debug_bool
 \bool_set_false:N \g_phd_debug_bool
 

 \cs_new:Nn \phd_tl_map_dbl:nN
   {
     \__phd_tl_map_dbl:Nnn #2 #1 \q_recursion_tail {}{} \q_recursion_stop
   }
 \cs_new:Nn \__phd_tl_map_dbl:Nnn
   {
     \quark_if_recursion_tail_stop:n {#2}
     \quark_if_recursion_tail_stop:n {#3}
     #1 {#2} {#3}
     \__phd_tl_map_dbl:Nnn #1
   }
 
 \cs_new:Nn \phd_keys_choices:nn
   {
     \cs_set:Npn \phd_keys_choices_fn:nn { \phd_keys_choices_aux:nnn {#1} }
     \use:x
     {
       \exp_not:N \keys_define:nn {phd}
      {
        #1 .choice: ,
        \phd_tl_map_dbl:nN {#2} \phd_keys_choices_fn:nn
     }
   }
 }
 
 \cs_new:Nn \phd_keys_choices_aux:nnn { #1 / #2 .code:n = { \exp_not:n {#3} } , }
 
 \phd_keys_choices:nn {microtype}
   {
     {on} {\bool_set_true:N \g_phd_microtype_bool  \MICROTYPEtrue}
     {off} {\bool_set_false:N \g_phd_microtype_bool  \MICROTYPEfalse}
     {true} {\bool_set_true:N \g_phd_microtype_bool  \MICROTYPEtrue}
     {false} {\bool_set_false:N \g_phd_microtype_bool  \MICROTYPEfalse}
   }
   
 \phd_keys_choices:nn {unicodemath}
   {
     {on} {\bool_set_true:N \g_phd_unicodemath_bool   \UNICODEtrue }
     {off} {\bool_set_false:N \g_phd_unicodemath_bool  \UNICODEfalse }
     {true} {\bool_set_true:N \g_phd_unicodemath_bool   \UNICODEtrue }
     {false} {\bool_set_false:N \g_phd_unicodemath_bool  \UNICODEfalse }
   }   
 
 \phd_keys_choices:nn {asianscripts}
   {
     {on} {\bool_set_true:N \g_phd_asianscripts_bool  \ASIANSCRIPTStrue}  
     {off} {\bool_set_false:N \g_phd_asianscripts_bool \ASIANSCRIPTSfalse}
     {true} {\bool_set_true:N \g_phd_asianscripts_bool  \ASIANSCRIPTStrue}  
     {false} {\bool_set_false:N \g_phd_asianscripts_bool \ASIANSCRIPTSfalse}
     
   }  
   
 \phd_keys_choices:nn {debug}
   {
     {on} {\bool_set_true:N \g_phd_debug_bool  \@debugtrue}  
     {off} {\bool_set_false:N \g_phd_debug_bool \@debugfalse}
     {true} {\bool_set_true:N \g_phd_debug_bool  \@debugtrue}  
     {false} {\bool_set_false:N \g_phd_debug_bool \@debugfalse}
     
   }       
\keys_define:nn { phd }
{
     asianscripts .default:n = on,
     debug        .default:n = on, 
}
   
\ProcessKeysOptions {phd}


%    \end{macrocode}
% 
%
%    \begin{macrocode}
\def\cx@optionlist{}
\def\cxuselibrary#1{\cxset{library/.cd,#1}}
%
% The library is added by inputting the file and setting the path accordingly.
\def\cx@add@library#1#2{%
  \cxset{library/#1/.code={\@ifundefined{cxlibrary@#1@loaded}{\input #2}{}}}%
  \DeclareOption{#1}{\edef\cx@optionlist{\cx@optionlist,#1}}%
}
%    \end{macrocode}
%
% Here is our attempt to play nice with the three
% main TeX engines.
%
%    \begin{macrocode}
\RequirePackage{phdsort}%% to check
\RequirePackage{ifluatex}
\RequirePackage{ifxetex}
\def\ifengine#1#2#3{
  \ifxetex
    #1%
  \else
    \ifluatex
      #2%
    \else
      #3%
    \fi
\fi
}
%    \end{macrocode}
%
% We use \pkgname{luacode} and luatextra only if we are using LuaTeX. Many of the
% packages we load ourselves later in any case. We need to check this.
%    \begin{macrocode}
\ifluatex
  \RequirePackage{luacode}
  %\RequirePackage{luatextra}
\fi
%    \end{macrocode}
%
% \section{Front matter and backmatter}
%
% These are both provided by the classes but we intent to parameterize them
% so we redefine them.
%
% \subsection{Mainmatter and frontmatter options}

%    \begin{macrocode}
\ExplSyntaxOn
\newif\if@mainmatter \@mainmattertrue
\cxset{
  mainmatter~numbering/.is~choice,
  mainmatter~numbering/arabic/.code  = \cs_set:Npn \setpagenumbering
                                         {
                                           \pagenumbering{arabic}
                                         },
  mainmatter~numbering/roman/.code   = \cs_set:Npn \setpagenumbering
                                   	     { 
                                           \pagenumbering{roman}
                                         },
  mainmatter~numbering/Roman/.code   = \cs_set:Npn \setpagenumbering 
                                   	     {
                                   	       \pagenumbering{Roman}
                                   	     },
  }
\ExplSyntaxOff	
%
\cxset{mainmatter numbering = arabic}     
%  
%    \end{macrocode}
%
% \begin{docCommand}{frontmatter} { \meta{void}}
%  Handles all the preliminary settings for the frontmatter of a book. It
%  sets \refCom{@mainmatter} to false and handles page openings.   
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn \frontmatter 
  {
    %\cleardoublepage
    \@mainmatterfalse
    %\setpagenumbering%
  }
%    \end{macrocode}
% \begin{docCommand}{mainmatter} { \meta{void}}
% Handles all the preliminaries for the main matter of a document.    
% \end{docCommand}
%    \begin{macrocode}
\cs_gset:Npn \mainmatter
  {
     \cleardoublepage
      \@mainmattertrue
     \setpagenumbering
  }
       
\def\backmatter{\if@openright\cleardoublepage\else\clearpage\fi
      \@mainmatterfalse}
\ExplSyntaxOff      
%    \end{macrocode}      
% 
%
% \section{Font Manager}
%
% \subsection{Sizing}
% 
% \begin{docCommand}{lineskip} { \marg{dim}}
%   These are currently hybrids. 
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
  \dim_gset:Nn \tex_lineskip:D {1pt}
  \dim_gset:Nn \normallineskip {1pt}
  \cs_gset:Npn \baselinestretch {}
\ExplSyntaxOff
%    \end{macrocode}
%
%    \begin{macrocode}
\ExplSyntaxOn
%\newskip \phd@baseskip
%\skip_new:N \phd@theskip
%\skip_gset:Nn \phd@theskip {2pt}
\newskip\phd@baseskip
\newskip\phd@theskip
\def\phd@setskips#1{\phd@theskip #1\relax%
  \abovedisplayskip      0.50\phd@theskip \@plus 0.25\phd@theskip \@minus 1\p@%
  \belowdisplayskip      \abovedisplayskip
  \abovedisplayshortskip 0.25\phd@theskip \@plus 0.25\phd@theskip
  \belowdisplayshortskip 0.50\phd@theskip \@plus 0.25\phd@theskip \@minus 1\p@%
}
\def\phd@setlists#1{\phd@theskip #1\relax%
 \def\@listi{\leftmargin\leftmargini
  \topsep  0.5\phd@theskip \@plus 2\p@ \@minus 1\p@%
  \parsep  \z@
  \itemsep \z@}}


%
\ExplSyntaxOff  
%
%
% common Sizes  
\newcommand{\@viiiptv}{8.5}%                  8.5pt

\DeclareMathSizes{\@viiiptv}{\@viiiptv}{\@vipt}{\@vpt}

\newcommand{\@ixptv}{9.5}%                    9.5pt

\DeclareMathSizes{\@ixptv}{\@ixptv}{\@viipt}{\@vpt}

\newcommand{\@xptv}{10.5}%                    10.5pt (normalsize)

\DeclareMathSizes{\@xptv}{\@xptv}{\@viipt}{\@vpt}

\newcommand{\@xvipt}{16}%                     16pt size

\DeclareMathSizes{\@xvipt}{\@xvipt}{\@xiipt}{\@xpt}

\newcommand{\@xviiipt}{18}%                   18pt size

\DeclareMathSizes{\@xviiipt}{\@xviiipt}{\@xiipt}{\@xpt}

\renewcommand\tiny{\@setfontsize\tiny\@vpt{6}\phd@setskips\phd@setlists}
%   
% Similar to cambridge class
% font sizes for cambridge7A, 228x152mm
% \tiny                        5/6\\
% \footnotesize                8/9\\
% \large (B headings)         11/14\\
% \Aheadsize                  12/14\\
% \Large                      12/17\\
% \LARGE                      16/19 (chaptertitle size)\\
% \let\Huge\huge              18/24 (chapternumber size)\\
% \scriptsize                  7/8\\
% \let\tablesize\small         9/10\\
% \let\enotesize\small         9/10\\
% \smallish                    9/11\\
% \normalsmall                10/12\\
% \let\listsize\normalsize    10/13\\
%     \end{macrocode}
% \begin{docCommand}{footnotesize} {\meta{void}}
%  Sets the font to the footnotesize
% \end{docCommand}
%    \begin{macrocode}
%\ExplSyntaxOn
%\renewcommand \footnotesize
%  {
%    \phd@baseskip 10.5pt%
%    \@setfontsize\footnotesize{8pt}{10.5}
%    \phd@setskips\phd@setlists
%  }
%%    \end{macrocode}
%%    \begin{macrocode}
%\renewcommand\large{\@setfontsize\large{11}{14}\phd@setskips\phd@setlists}
%
%\newcommand\Aheadsize{\@setfontsize\Aheadsize{11}{13}\phd@setskips\phd@setlists}
%
%\renewcommand\Large{\@setfontsize\Large{12}{17}\phd@setskips\phd@setlists}
%
%\renewcommand\LARGE{\@setfontsize\LARGE{16}{19}\phd@setskips\phd@setlists}
%
%\renewcommand\huge{\@setfontsize\huge{18}{24}\phd@setskips\phd@setlists}
%\ExplSyntaxOff
%
%\def\huge{\@setfontsize\Huge{24}{26}}
\def\HUGE{\@setfontsize\Huge{38}{47}}
\def\HHUGE{\@setfontsize\HHUGE{58}{67}}
\def\HHHUGE{\@setfontsize\HHHUGE{94}{105}}
%
%\newcommand\smallverbatimsize{\phd@baseskip 11.5pt%
%    \@setfontsize\smallverbatimsize{10.5}{11.5}\phd@setskips\phd@setlists}
%    
%    
%  \renewcommand\scriptsize{%
%    \@setfontsize\scriptsize\@viipt{8}\phd@setskips\phd@setlists}
%  \newcommand\figcaptionsize{\phd@baseskip 10.5pt%
%    \@setfontsize\figcaptionsize{8}{10.5}\phd@setskips\phd@setlists}
%  
%  \let\smallertablesize\figcaptionsize
%  
%  
%  
%  \renewcommand\small{\phd@baseskip 10pt%
%    \@setfontsize\small\@ixpt{10}\phd@setskips\phd@setlists}
%  
%  \let\indexsize\small
%  
%  \newcommand\enotesize{\phd@baseskip 11.5pt%
%    \@setfontsize\enotesize\@ixpt{11.5}\phd@setskips\phd@setlists}
%  
  \newcommand\smallish{\phd@baseskip 11pt%
    \@setfontsize\smallish\@ixpt{11}\phd@setskips\phd@setlists}
%  
  \let\bibliosize\smallish
%  
%  \newcommand\tablesize{\phd@baseskip 11pt%
%    \@setfontsize\tablesize\@ixptv{11}\phd@setskips\phd@setlists}
%  
%  \newcommand\exercisesize{\phd@baseskip 12pt%
%    \@setfontsize\exercisesize\@ixptv{12}\phd@setskips\phd@setlists}
%  
%  \newcommand\normalsmall{\phd@baseskip 12pt%
%    \@setfontsize\normalsmall\@xpt{12}\phd@setskips\phd@setlists}
%  
  \newcommand\verbatimsize{\phd@baseskip 13pt%
    \@setfontsize\verbatimsize\@xpt{13}\phd@setskips\phd@setlists}
%  
%  \newcommand\xheadsize{\phd@baseskip 12pt%
%    \@setfontsize\xheadsize\@xptv{12}\phd@setskips\phd@setlists}
% 
%   \newcommand\largerstill{\phd@baseskip 14pt%
%    \@setfontsize\largerstill\@xiipt{14}\phd@setskips\phd@setlists}
%    
%  \renewcommand\normalsize{\phd@baseskip 13.5pt%
%    \@setfontsize\normalsize{10.5}{13.5}\phd@setskips{\phd@baseskip}
%    \let\@listi\@listI}
%  \let\listsize\normalsize
%%
%    \end{macrocode}
% \normalsize\selectfont

% \subsection{Loading fontspec} We load the \pkgname{fontspec} package \citep{fontspec} both
% for XeTeX or LuaTeX.
% The font manager needs to first distinguish  between the various
% engines used, and secondly needs to use the right packages. This is a bit of
% a kludge at the moment.
%
%    \begin{macrocode}
\cxset{document font/.code 2 args=\setmainfont[#2]{#1}}
%
\def\defaultfontsxetexluatex{% 
  \RequirePackage{expl3}
  \RequirePackage{xcoffins}
  \RequirePackage{xtemplate}
  \RequirePackage{l3sort}
%  
  \RequirePackage[no-math]{fontspec}
%   \setmainfont[
%      BoldFont={timesbd.ttf},
%      ItalicFont={timesi.ttf},
%      BoldItalicFont={timesbi.ttf},
%      SmallCapsFont={times.ttf},
%                      ]{times.ttf} % on windows
   \setmainfont[
      BoldFont={timesbd.ttf},
      ItalicFont={timesi.ttf},
      BoldItalicFont={timesbi.ttf},
      SmallCapsFont={times.ttf},
                      ]{times.ttf}                     
 \setsansfont{Tex Gyre Heros}% work okay with palatino
 \setmonofont[Scale=.95]{consola.ttf}
% 
 \newfontfamily\verbatimfamily[Scale=0.95]{consola.ttf}
 \DeclareTextFontCommand{\texttt}{\verbatimfamily} %CHANGED
 \newfontfamily\arial{Arial}
 \let\pan\arial
 \let\unicodenumberfam\arial
 
 \newfontfamily\smallcps[Scale=0.8]{Arial}
 
 \parskip3.5pt\parindent1em
 
 \def\phd@font@times{times.ttf}
 
% \usepackage{unicode-math}
%\setmathfont{texgyrepagella-math.otf}
%\setmathfont{texgyrepagella-math.otf}
%\setmathfont{Asana-Math.otf}
 % \cxset{document font={\phd@font@times}{Scale=1.0}} GIVES ERRORS for bolfd etc
  
 \newfontfamily\arabicfont[Script=Arabic]{Amiri}
 \newfontfamily\arabicfonttt[Script=Arabic,Scale=.75]{DejaVu   Sans Mono}
}  
%    \end{macrocode}
%
%  The management of default fonts for scripts and languages is attempted here first. 
%  This is a difficult topic, as the user might not have the fonts installed in their system.
%  If polyglossia is used it checks that language<languagename>  is defined, hence we
%  need to define |\arabicfont|  for the arabic language etc. 
%  
%    \begin{macrocode}  
%
\ifengine{\defaultfontsxetexluatex}{\defaultfontsxetexluatex}{}
%    \end{macrocode}
%
%  We need to cater for LTR without changing basic commands of XeTeX or eTeX.
%
%    \begin{macrocode}
\ifluatex
   \RequirePackage{luaotfload}
   \let\TeXXeTstate\@gobble
   \def\setRTL{\luatextextdir TRT}%\pardir TRT\textdir TRT}
   \def\endLTR{\luatextextdir TLT}%{\pardir TLT\textdir TLT}
   \let\beginR\setRTL
   \let\endR\endLTR
\fi
%    \end{macrocode}
%
%  \subsection{Creating a Small Verbatim Environment}
%  This is a modified version from Cambridge classes
%    \begin{macrocode}
\begingroup \catcode `|=0 \catcode `[= 1
\catcode`]=2 \catcode `\{=12 \catcode `\}=12
\catcode`\\=12 |gdef|@xsmallverbatim#1\end{smallverbatim}[#1|end[smallverbatim]]
|gdef|@sxsmallverbatim#1\end{smallverbatim*}[#1|end[smallverbatim*]]
|endgroup
\def\@smallverbatim{\trivlist \item\relax
  \if@minipage\else\vskip\parskip\fi
  \leftskip\@totalleftmargin\rightskip\z@skip
  \parindent\z@\parfillskip\@flushglue\parskip\z@skip
  \@@par
  \@tempswafalse
  \def\par{%
    \if@tempswa
      \leavevmode \null \@@par\penalty\interlinepenalty
    \else
      \@tempswatrue
      \ifhmode\@@par\penalty\interlinepenalty\fi
    \fi}%
  \let\do\@makeother \dospecials
  \obeylines \small \@noligs%\smallverbatim@font to FIX
  \hyphenchar\font\m@ne
  \everypar \expandafter{\the\everypar \unpenalty}%
}
\def\smallverbatim{\@smallverbatim \frenchspacing\@vobeyspaces \@xsmallverbatim}
\def\endsmallverbatim{\if@newlist \leavevmode\fi\endtrivlist}
\def\smallverbatim@font{\normalfont\smallverbatimsize\ttfamily}
%    \end{macrocode}
%
% \section{Language Manager} 
%
% We use the package \pkgname{polyglossia} for language management for the
% newer engines and \pkgname{babel} for pdfLaTeX.
% This is full of holes which need to be closed for cases where the
% bidi package is loaded.
%
%    \begin{macrocode} 
\ifengine{\RequirePackage{polyglossia}
  \setdefaultlanguage{english}}{%
  \RequirePackage{polyglossia}
  \setdefaultlanguage{english}}{\RequirePackage[dutch, german, main=english]{babel}}
  \RequirePackage[dutch,german,english]{xlayouts}
%    \end{macrocode}
%
% \chapter{Package Management} 
%  
% \parindent1em 
%
% The Package Manager specification requires to meet the following requirements:
% \begin{description}
%   \item [{\bfseries Loading of packages}] Provide an extended package mechanism to load
%            conditionally a number of packages.
%   \item [{\bfseries Manage conflicts}] Manage conflicting packages by loading them in 
%           the right sequence to enable critical redefinitions.
%   \item [{\bfseries Keep track}] Track all files loaded, by this package and those loaded
%           by others.
%  \item [{\bfseries Utilities}] Provide utilities to save and restore commands and symbols
%          that create conflicts.
%  \item [{\bfseries User}] Allow the user to load more packages via the extended package
%           loading mechanism.
% \end{description} 
%
% \section{Utilities}
%
% In order to keep track of all the packages and keys we require a
% number of macros will be defined first.
% 
% Each of the packages used by this document is loaded conditionally.
% However, it might be nice to know if we have a complete set.  So we
% define |\ifcomplete| which starts true, but gets set to false if any
% package is missing. Some code is necessary in order to manage 
% the complexity.
% I am indebted to the source of |symbols.tex| for some of the macros.
% There are a number of symbols (e.g., \cmd{\Square}) that are defined by      
% multiple packages.  In order to typeset all the variants in this       
% document, we have to give glyph a unique name.  
% To do that, we define :
%
% 
% \cs{savesymbol{XXX}}, which renames a symbol from \cs{XXX} to \cmd{\origXXX}, and    
% |\restore_symbol:{yyy}{XXX}}|, which renames \cmd{\origXXX} back to \cmd{XXX} and     
% defines a new command, |\yyyXXX|, which corresponds to the most recently 
% loaded version of |\XXX|.                                                
%                                                                        
% This implementation of \refCom{save_symbol:} and \refCom{restore_symbol:} was copied from  
% the |savesym| package, which started with symbol.tex's old definitions   
% of those macros and improved upon them.  However, \renamerobustsymbol  
% and |\ifnotsavedsym| are from  the list of |symbols| documentation.                                
%                                                                        
% \begin{docCommand} {g_phd_packages_loaded_clist} {\marg{clist}}
%    Holds a list of all packages loaded by the \pkgname{phd} package.
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\clist_new:N \g_phd_packages_loaded_clist
\ExplSyntaxOff
%    \end{macrocode}
%
% \begin{docCommand} {g_phd_packages_loaded_clist} {\marg{clist}}
%    Holds a list of all packages loaded by the \pkgname{phd} package.
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\clist_new:N \g_phd_packages_not_found
\ExplSyntaxOff
%    \end{macrocode}
%
% \begin{docCommand} {g_phd_packages_loaded_by_others} { \marg{clist} }
%    Holds a list of all packages loaded by the \pkgname{phd} package.
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\clist_new:N \g_phd_packages_loaded_by_others
\ExplSyntaxOff
%    \end{macrocode}
% 
% These are really long names, but I want to follow the \latex3 Teams' suggestions
%  and recommendations.
%
% \begin{docCommand} {save_symbol:} { \meta{symbol name} }
%  An explorified version of |savesymbol|. In the old style the original
%  command was set to relax, this caused errors and I set it to undefine. The
%  joys of \tex programming! \FIRE
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \save_symbol: #1
  {
    \cs_gset_eq:cc {orig#1} {#1} 
    \cs_undefine:c {#1}
  }
\ExplSyntaxOff
%    \end{macrocode}
% 
%    
%
% \begin{docCommand} {restore_symbol:} { \meta{symbol prefix} \meta{symbol name} }
% 	Restore a previously saved symbol, and rename the current one.
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \restore_symbol: #1 #2
  {
    \cs_gset_eq:cc {#1#2} {#2}
    \cs_gset_eq:cc {#2} {orig#2}
 }
\ExplSyntaxOff
%    \end{macrocode}  
% 
 
% Rename a robust command.
%    \begin{macrocode}
\newcommand*{\renamerobustsymbol}[2]{%
  \expandafter\let\expandafter\origrealcommand
    \csname #2\space\endcsname
    \expandafter\global\expandafter\let\csname#1#2\endcsname=\origrealcommand
}
%    \end{macrocode}
% Test if a symbol is not saved.
%    \begin{macrocode}
\def\ifnotsavedsym@helper#1#2!{\expandafter\ifx\csname orig#2\endcsname\relax}
\newcommand*{\ifnotsavedsym}[1]{%
  \expandafter\ifnotsavedsym@helper\string#1!%
}
%    \end{macrocode}
% {ifcomplete}
%    \begin{macrocode}
\let\oldcontentsline\contentsline
\newif\ifcomplete
%    \end{macrocode}
%    
%
%    \begin{macrocode}
\ExplSyntaxOn
\global\let\origRequirePackage\RequirePackage
\DeclareDocumentCommand\RequirePackage {o m o}
  {
     \IfValueTF{#3}
       {\IfValueTF {#1}
           { \origRequirePackage [{#1}] {#2} [{#3}] }
           { \origRequirePackage {#2} [{#3}]      }
       }
       {   
        \IfValueTF{#1}
           {
             \origRequirePackage  [{#1}] {#2} 
           }
           { 
             \origRequirePackage {#2}      
           }
      } 
  }       

    
\ExplSyntaxOff  
%    \end{macrocode} 
%    
% For debugging purposes we define a switch that enables us to toggle
% on and off the loading of packages.
% 
%    \begin{macrocode}
\newif\ifloadpackages
\loadpackagestrue
%    \end{macrocode}
%    
% |\IfStyFileExists*| is just like |\IfFileExists|, except that it appends
% ".sty" to its first argument.  |\IfStyFileExists| is the same as
% |\IfStyFileExists*|, but it additionally adds its first argument to a list
% (|\missingpkgs|) and marks the document as incomplete (with
% |\completefalse|) if the |.sty| file doesn't exist.
% 
% {missingpkgs}
% {foundpkgs}
%   \begin{macrocode}
\newcommand{\missingpkgs}{}
\newcommand{\foundpkgs}{}
\newcommand{\if@sty@file@exists@star}[3]{%
  \ifloadpackages
    \IfFileExists{#1.sty}{#2}{#3}%
  \else
    #3%
  \fi
}
\newcommand{\if@sty@file@exists}[3]{%
  \ifloadpackages
    \IfFileExists{#1.sty}%
                 {#2\@cons\foundpkgs{{#1}}}%
                 {#3\completefalse\@cons\missingpkgs{{#1}}}%
  \else
    #3\completefalse\@cons\missingpkgs{{#1}}%
  \fi
}
\newcommand{\IfStyFileExists}{%
  \@ifstar{\if@sty@file@exists@star}{\if@sty@file@exists}%
}
%    \end{macrocode}
% 
% 
%
% \section{Utility macros for displaying symbols and fonts}
%
% In the sections that follow, we use a number of utilities for
% displaying fonts and utilities in tables and figures, we collect
% them here and make them available to the user for document
% use. Many are modifications from other packages.
%
% {symbols}
% {endsymbols}
%    \begin{macrocode}
% From stmarysrd symbols package
% A very convenient command to typeset symbols.
% Much preferable than tables. Slight modifications to
% make it a bit more clear
% CHECK END SYMBOLS
\newcommand\symbols{\flushleft}
\def\endsymbols{\endflushleft}

\def\dosymbol#1{%
   \leavevmode\hbox to .33\textwidth{%
    \hbox to 1.2em%
    {\hss$#1$\hfil}%
   \footnotesize\texttt{\string#1}\hss}%
   \penalty10}
%    \end{macrocode}
% 
% 
%
% \symbols
% \dosymbol{\Square} \dosymbol{\square} \dosymbol{\Diamond} \dosymbol{\diamond} \(\dosymbol{\symbol{60}}\)
% \endsymbols
%   
%  \section{calligra}
%  Calligra is a calligraphic font, we also declare it as a math alphabet, 
%  I think we now have enough.
%    \begin{macrocode}
\ExplSyntaxOn
\IfStyFileExists{calligra}
  {\save_symbol:{filename}
   \RequirePackage{calligra}
   \restore_symbol:{CAL}{filename}
   \DeclareMathAlphabet{\mathcalligra}{T1}{calligra}{m}{n}
   \DeclareFontShape{T1}{calligra}{m}{n}{<->s*[2.2]callig15}{}
  }
  {}
\ExplSyntaxOff  
%    \end{macrocode}
%  \bgroup
%  This is a short test for |mathcalligra| $\mathcalligra{abcdefgh}$ and \textcalligra{\alphabet}
%  \egroup
%
% Fonts supÂ­ported are Peter VanÂ­roose's calÂ­ligra font (packÂ­age funÂ­dus-\pkgname{calÂ­ligra)}; the 
% emÂ­uÂ­laÂ­tion of Peter VanÂ­rooseâ€™s handÂ­writÂ­ing (packÂ­age \pkgname{funÂ­dus-script}; the WashÂ­ingÂ­ton 
% UniverÂ­sity cyrilÂ­lic fonts (packÂ­age \pkgname{funÂ­dus-cyr}); 
% the \pkgname{la} and \pkgname{lla} chilÂ­dren's handÂ­writÂ­ing
% fonts (packÂ­age funÂ­dus-la); the ComÂ­puter Modern outÂ­line fonts (packÂ­age funÂ­dus-outÂ­
% line); a group of â€˜Startrekâ€™ fonts (packÂ­age funÂ­dus-startrek, which conÂ­tains the fonts
% it supÂ­ports; the SÃ¼tÂ­terÂ­lin font (packÂ­age funÂ­dus-sueterÂ­lin; the twcal calÂ­liÂ­graphic
% fonts (packÂ­age funÂ­dus-twcal); and the va handÂ­writÂ­ing font (packÂ­age funÂ­dus-va).

% \section{Chancery}
%    \begin{macrocode}
\IfStyFileExists{chancery}
  {\newcommand{\mathpzc}[1]{\mbox{\usefont{OT1}{pzc}{m}{it}##1}}}
  {}
%    \end{macrocode}
% \section{Best practices macros} 
% 
%  
% We load a few packages for fixes and errors and |nag| if outdated packages are used.
% Modify to suit your requirements.  
% Package management is a bit complex to avoid errors
% with options.
%
%To find out if a package has already been loaded, use
%|\@ifpackageloaded|\meta{package}\meta{true}\meta{false}.
%|\@ifpackagelater| To find out if a package has already been loaded with a version more recent
%|\@ifclasslater| than version, use |\@ifpackagelater|\meta{hpackagei}\meta{version}\meta{true}\meta{false}.
%|\@ifpackagewith| To find out if a package has already been loaded with at least the options
%options, use |\@ifpackagewith|\meta{package}\meta{options}\meta{true}\meta{false}.
% 
%There exists one package that can't be tested with the above commands: the
%fontenc package pretends that it was never loaded to allow for repeated reloading
%with different options (see ltoutenc.dtx for details).
% 
% 
% We include the following two packages to provide the standard 
% fixes for \LaTeX2e\ and the |nag| package to provide some guidance
% as to good
% practices. We set the |nag| keys to |orthodox| and |l2tabu.|
% \url{http://tex.stackexchange.com/questions/19264/techniques-and-packages-to-keep-up-with-good-practices?rq=1}
% and \href{http://stackoverflow.com/questions/193298/best-practices-in-latex}{best practices in LaTeX.}
%
%
% \begin{environment}{etex}
%    \begin{macrocode}
\ifxetex
   \else
     \ifluatex
        \RequirePackage{etex}
     \else
        \RequirePackage{etex}
  \fi
\fi
%    \end{macrocode}
% \end{environment}
%

%    \begin{macrocode}
\cxset{nag keys/.store in =\nagkeys@cx,
       onlyamsmath keys/.store in=\onlyamsmathkeys@cx,
       xcolor keys/.store in=\xcolorkeys@cx}
%        
%
%\input{settings} % experimental
%    \end{macrocode}
%\cxset{nag keys = {l2tabu,%
%                   orthodox,%
%                   %
%                  }}
%
% {xcolor}
% 	For |xcolor| we try and load as many pre-defined colornames as
% 	possible.
%    \begin{macrocode}
\cxset{xcolor keys={fixpdftex,usenames,dvipsnames,
                  svgnames,x11names,table}}                     
% Set amsmath keys
%
%    \end{macrocode}
% 
%
%    \begin{macrocode}
% \PassOptionsToPackage{\nagkeys@cx}{nag}
% \RequirePackage{nag}   
%    \end{macrocode}
%
%
%
% {onlyasmath}
% The package |onlyasmath| also provides errors for deprecated math
% commands like using |$$|\ldots|$$| which can result in unwanted spaces
% being introduced in the typsetting of the document. The recommended 
% way is to use |\[|\ldots|\]|. The package was developed by Harold Harders
% and although targetted for class writers one might as well use it directly.
%
%% |\PassOptionsToPackage{\onlyamsmathkeys@cx}{onlyamsmath}|
% |\RequirePackage{onlyamsmath} |
% 
%
% \section{Typography}
%
% The package \pkgname{microtype} is loaded with no options
% as it provides facilities for loading individual features
% at run time. (This enables the use of phd keys).
%  The package had some issues with LuaLaTeX and  XeTeX
%  but now it works as advertized. As it is a great package we include it here.
%
% \subsection{Microtypography}
% With LuaTeX microtype must come after fontspec.
%    \begin{macrocode}
% 
\ifMICROTYPE
\ifengine%
	  {\RequirePackage[tracking=true]{microtype}}%
	  {\RequirePackage[tracking=true]{microtype}}%
	  {\RequirePackage[tracking=true]{microtype}}%
\fi	  
%
%    \end{macrocode}
% 
%
% \subsection{ragged2e}
%
% We load \pkgname{ragged2e} package for typography
%
% 
%
% This package by Martin Schr\"oeder provides new commands and environments for
% setting ragged text which are easy to configure to allow hyphenation. The
% way Martin explains it, the main purpose of the package is to restore the
% plain TEX definitions which have been changed by LaTex2e. On the way it
% defines a number of useful environments. The package also loads the
% |footmisc| package if loaded with the option |footnotes|. Hm.. It also
% loads the package |everysel|. More fun. Passing of options, should be in 
% a settings file? \index{justification>ragged}
% \index{justification>ragged2e (package)}
% 
%
%
%    \begin{macrocode}
\newif\ifRAGGEDTWOE
\newif\ifEVERYSEL
\newif\ifFOOTMISC
\PassOptionsToPackage{ragged2e}{footnotes,raggedrightboxes}
\RequirePackage{ragged2e}
%    \end{macrocode}
% 
%
% \subsection{soul}
% We load the \pkgname{soul} for spacing out and for
% highlighting words. We do not pass any options. These
% are left to the user.
%
% \begin{docCommand}{sethlcolor} {\marg{color name} }sets
% the color for soul's \hl{highlight} command \cmd{\hl}.
% \end{docCommand}
%    \begin{macrocode}
\newif\ifSOUL
\IfStyFileExists{soul}
{\SOULtrue\RequirePackage{soul}
    \sethlcolor{thehighlight}}
{}
%    \end{macrocode}
% 

% \subsection{lettrine} 
%  
% We use the |lettrine| package of Daniel Flipo for drop caps. We do not pass any
% defaults and leave it to the configuration file. The lettrine configuration
% file is |lettrine.cfg|. We define a command \cs{dropcap} for some settings
% that we think are generally acceptable. 
%
%    \begin{macrocode}
\RequirePackage{lettrine}
\ifx\dropcap\undefined
  \def\dropcap#1#2{%
    \lettrine[lines=3, lraise=0.1, nindent=0em, slope=.1em]{#1}{#2}
  }%
\fi
%    \end{macrocode}
%
% \subsection{Units and formatting of numbers}
% 
% We load the defacto standard \pkgname{siunitx} for formatting units in SI units. Note
% it loads LaTeX3 packages.
%
% \subsubsection{siunitx}
% {numprint} The package \pkg{numprint} has some
% useful macros for formatting large numbers. We use it for some
% of the examples.
%    \begin{macrocode}
\IfStyFileExists{siunitx}{
   \RequirePackage{siunitx}
   \sisetup{fixed-exponent =0,
            scientific-notation = false}}
{}           
%\RequirePackage{numprint} 
%    \end{macrocode}
% 
% 
%
%
% \subsection{Acronyms}
%
% For acronyms and abbreviations we load the \pkgname{acronym} package
% by Tobias Oetiker \citeyearpar{acronym}. This package makes sure, that all acronyms used 
% in the text are spelled out in full at least once. In one of its
% options it loads the |relsize| package. My recommendation is to
% load the package with the options |smaller, printonly| and 
% |withpage|. Please note that the |withpage| option only works, if the
% |printonlyused| option is present. \FIRE loads relsize,suffix,xstring 
% 
%    \begin{macrocode}
\cxset{acronym keys/.store in = \acronymkeys@cx}
\cxset{acronym keys={smaller,printonlyused,withpage}}
\PassOptionsToPackage{\acronymkeys@cx}{acronym}
\RequirePackage{acronym}
%    \end{macrocode}
%
% \subsection{mdframed}
% This package is included here, as a more lightweight package to |tcolorbox|
%    \begin{macrocode}
\RequirePackage{mdframed}
\RequirePackage{adjustbox}
\RequirePackage{fancybox}
%    \end{macrocode}
% 
% 
% \section{Graphics}
% 
%  The package \pkg{graphicx} developed by David Carlisle and Sebastian Rahtz is 
%  part of t  e 
%  Standard LaTeX `Graphics Bundle'.  It provides extensions to the original
% \pkg{graphics}, which it loads. The \pkg{graphics} in its turn loads
% the package \pkg{trig} which helps with trigonometrical
% calculations.
%
% We load the package |graphicx| with no options. We let |graphicx|, to 
% handle any draft options via the class itself. 
% \href{http://tex.stackexchange.com/questions/3131/graphicspath-for-miktex}{graphicspath for MikTeX} check
% adds figures etc to paths. 
% 
% \begin{docCommand} {DeclareGraphicExtensions} { \meta{extensions} } 
%   We define some common paths and extensions. 
%   to enable the user to just call he image without specifying the extension or
%   folders.
% \end{docCommand}
%
% \begin{docCommand} {graphicspath} { \meta{paths} } 
%   Declares various paths. 
% \end{docCommand}
%
% 
%    \begin{macrocode}
\RequirePackage{graphicx}[1999/02/16]
\DeclareGraphicsExtensions{.jpg, .JPG, .jpeg, .png, .eps}
\graphicspath{{graphics/}{graphics//}{../images/}{images//}{./images/}{./graphics/}%
   {../graphics/}{./pic/}{../pic}}
%    \end{macrocode}
% 
% 
%
% Various `keys' or named arguments are supported.
% \begin{description}
% \item[bb] Set the bounding box. The argument should be four
% dimensions, separated by spaces. 
% \item[bbllx,bblly,bburx,bbury] Set the bounding box. Mainly for
% compatibility with older packages. |bbllx=a,bblly=b,bburx=c,bbury=d|
% is equivalent to |bb = a b c d|.
% \item[natwidth,natheight] Again an alternative to |bb|. 
% |natheight=h,natwidth=w| is equivalent to |bb = 0 0 h w|.
% \item[viewport] Modify the bounding box specified in the file.
% The four values specify a bounding box \emph{relative} to the
% |llx|,|lly| coordinate of the original box.
% \item[trim] Modify the bounding box specified in the file.
% The four values specify the amounts to remove from
% the left, bottom, right and top of the original box.
% \item[hiresbb] Boolean valued key. Defaults to |true|. 
% Causes \TeX\ to look for |%%HiResBoundingBox| comments rather than
% the standard |%%BoundingBox|. May be set to |false| to override
% a default setting of true specified by the |hiresbb| package option.
% \item[angle] Rotation angle.
% \item[origin] Rotation origin (see |\rotatebox|, below).
% \item[width] Required width, a dimension (default units |bp|). The
% graphic will be scaled to make the width the specified dimension.
% \item[height] Required height. a dimension (default units |bp|).
% \item[totalheight] Required totalheight (ie height $+$ depth). a
% dimension (default units |bp|). Most useful after a rotation (when the
% height might be zero).
% \item[keepaspectratio] Boolean valued key (like |clip|). If it is set
%  to true, modify the meaning of the |width| and |height| (and
% |totalheight|) keys such that if both are specified then rather than
% distort the figure the figure is scaled such that neither dimension
% \emph{exceeds} the stated dimensions.
% \item[scale] Scale factor.
% \item[clip] Either `true' or `false' (or no value, which is equivalent
% to `true'). Clip the graphic to the bounding box (or viewport if one
% is specified).
% \item[draft] a boolean valued key, like `clip'. locally switches to
% draft mode, ie.\ do not include the graphic, but leave the
% correct space, and print the filename.
% \item[type] Specify the file type. (Normally determined from the file
% extension.) 
% \item[ext] Specify the file extension.
%        \emph{Only} for use with |type|.
% \item[read] Specify the `read file' which is used for determining the
% size of the graphic. \emph{Only} for use with |type|.
% \item[command] Specify the file command.
%         \emph{Only} for use with |type|.
% \end{description}
%
% The arguments are interpreted left to right. |clip|, |draft|, |bb|,,
% and |bbllx| etc.\ have the same effect wherever they appear. but the
% scaling and rotation keys interact.
%
% \section{wrapfig} The package \pkg{wrapfig} is loaded next. 
% 
%    \begin{macrocode}
\RequirePackage{wrapfig}
%    \end{macrocode} 
% 
%
% \section{rotating}
% The package \pkgname{rotating} performs
% most sorts of rotation one might like, including rotation of complete floating
% figures and tables. The package was developed by Robin Fairbairns
% Sebastian Rahtz and Leonor Barroca. We use the option |quiet| as the 
% package is rather verbose.
%
%    \begin{macrocode}
\RequirePackage[quiet]{rotating}
%    \end{macrocode} 
% 
% 
% \section{Color Management}
%
% Most classes load the |xcolor| package. Including
% it here, should either be able to check if it was 
% loaded by the class or to pass the options before
% the class itself. This package is a common source
% of errors, as classes load it with mostly different options.
% Because of this is also a good example to test our code
% in a number of minimal working examples.
%
%    \begin{macrocode}
\@ifpackageloaded{xcolor}{}%
 {\PassOptionsToPackage{\xcolorkeys@cx}{xcolor}
  \RequirePackage{xcolor}}
%    \end{macrocode}
%
%	We adopt the convention that colour names used in code should be
%	prefixed by a |the|. For simplicity we also adopt the convention
%    that all colours defined in colour schemes should be in lowercase
%	(less keystrokes and matches the styles of |pgf| keys). 
%
% \subsection{Color management}
%    \begin{macrocode}
\providecommand\href[2]{\texttt{#1}}
\definecolor{lstbgcolor}{rgb}{0.9,0.9,0.9}
\colorlet{examplefill}{yellow!80!black}
% codepalettes
%\definecolor{codebackground}{rgb}{0.972,0.929,0.753}
%\definecolor{codebackground}{rgb}{0.972,0.929,0.753}
%\definecolor{codebackground}{HTML}{B7C1C1}
%\definecolor{thekeywordstyle}{HTML}{435969}
%\definecolor{thecommentstyle}{HTML}{F87F01}
%1890
\definecolor{codebackground}{HTML}{F2F2EA}
\definecolor{thekeywordstyle}{HTML}{392726}
\definecolor{thecommentstyle}{HTML}{DF8743}

\definecolor{graphicbackground}{rgb}{0.972,0.929,0.753}
\colorlet{graphicbackground}{codebackground}


\definecolor{glyphbox}{rgb}{0.86,0.86,0.8}
%\definecolor{codebackground}{rgb}{0.8,0.8,1}
\definecolor{theblue} {rgb}{0.02,0.04,0.48}
\definecolor{thered}  {rgb}{0.65,0.04,0.07}
\definecolor{thedoccommandcolor}{rgb}{0.65,0.04,0.07}% doc command colors
\colorlet{Headings}{black} %font examples
\colorlet{Subheadings}{black} %font examples
\colorlet{thefontname}{black}%font examples
\colorlet{thehighlight}{yellow}%soul  highlight
\colorlet{thecancel}{thered}%for cancel commands
\definecolor{thegreen}{rgb}{0.06,0.44,0.08}
\definecolor{thelightgreen}{rgb}{0.06,0.44,0.06}
\definecolor{thegrey} {gray}{0.5}
\definecolor{thegray} {gray}{0.5}
\definecolor{thedarkgray} {gray}{0.95}
\definecolor{lightgray}{gray}{0.6}
\definecolor{shadedcolor}{gray}{0.6}
\definecolor{thelightgray}{gray}{0.6}
\definecolor{theshade}{gray}{0.94}
\definecolor{theframe}{gray}{0.75}
\definecolor{thecream}{rgb}{1,0.95,0.4}
\definecolor{spot}{rgb}{0,0.2,0.6}%some shades of blue
\definecolor{sweet}{rgb}{0,.68,.93}%shades of blue
%\colorlet{codebackground}{spot!5!white}
\definecolor{boxframe}{gray}{0.8}
\definecolor{boxfill}{rgb}{0.95,0.95,0.99}
\definecolor{theoption}{gray}{0.6}
\definecolor{themacro}{rgb}{0.784,0.06,0.176}
\definecolor{ExampleFrame}{rgb}{0.628,0.705,0.942}
\definecolor{ExampleBack}{rgb}{0.963,0.971,0.994}
\definecolor{Hyperlink}{rgb}{0.281,0.275,0.485}
\colorlet{thehyperlink}{theblue}
\colorlet{preciscolor}{sweet}
\colorlet{toccolor}{sweet}
%\newcommand*{\defaultcolor}{\color{black}}
%\newcommand*{\spotcolor}{\color{spot}}
%    \end{macrocode}
% 
%    \begin{macrocode}
\newcommand{\done}{\cellcolor{teal}done}  
\newcommand{\partialdone}{\cellcolor{yellow}done}
\newcommand{\hcyan}[1]{{\color{teal} #1}}
%    \end{macrocode}
%
% \section{Rules}
% We need to define a number of rules to use in typesetting styles.
% {thinrule}
% {mediumrule}
% {thickrule}
%	We will use later on different styles of rules to decorate chapter headings.
%	We define a few here to simplify code later on.
%
%    \begin{macrocode}
\DeclareRobustCommand\thickrule{%
    \leavevmode \leaders \hrule height 2pt \hfill \kern \z@}
\DeclareRobustCommand\thinrule{\vrule width\textwidth height0.4pt depth0pt\relax}%
%
\DeclareRobustCommand\mediumrule{\rule{\textwidth}{0.8pt}}
%    Adjusted to get toc parameters in
\DeclareRobustCommand\Rule{{\color{\tocchapternumberfill@cx}\rule[-4.1pt]{13cm}{0.4pt}}}
\DeclareRobustCommand\bottomline{\medskip
   \noindent\rule{\linewidth}{0.4pt}\medskip}
\DeclareRobustCommand\topline{\par\medskip
   \noindent\rule{\linewidth}{0.4pt}\medskip} 
%    \end{macrocode}
% 
% 
% 
%
%  Some chapter and sectioning heads include rules, we define them here for convenience.
%
%    \begin{macrocode}
\cxset{chapter rule color/.store in={\chapter@rule@color}}%
\cxset{chapter rule color=spot!50}
\DeclareRobustCommand\tikzrule{%
  \tikz [color=\chapter@rule@color, very thick, inner sep=0pt, outer sep=0pt]%
        \draw(0,0)--(\the\linewidth,0);
}%
%  The trim left is required to align the rule exactly
%    \begin{macrocode}           
%#1  options #2 width  #3 height           
\newcommand\drawrule[3][]{%
    \offinterlineskip
          \tikz [ name=s,trim left,
                   anchor=base,
                   draw=black, 
                 % double distance=.2pt,
                  line width=#3,
                  %very thick,
                  inner sep=0pt, 
                  outer sep=0pt,#1]   \draw(0,0)--(#2,0);
}
 \def\drawdoublerule#1#2{%
    \drawrule{#1}{#2}%
    \vskip2.5pt
    \drawrule{#1}{#2}%
 }
%    \end{macrocode}
%
% \chapter{Filler Text}
%
% 	In publishing and graphic design, lorem ipsum is placeholder text (filler text) 
% 	commonly used to demonstrate the graphics elements of a document or visual 
% 	presentation, such as font, typography, and layout, by removing the distraction 
% 	of meaningful content. The lorem ipsum text is typically a section of a Latin text 
% 	by Cicero with words altered, added and removed that make it nonsensical in meaning 
% 	and not proper Latin. Other packages exist such as |kantlipsum| and |blindtext|, 
% 	however, both result in somewhat legible texts, which defeats the purpose of 
% 	providing texts that the reader is not going to read. the extensions |lipsumx| 
% 	aim at providing a gap between the three packages. It provides extensions
% 	for full document testing.
%
% \section{lipsum}
%
%    \begin{macrocode}
\newif\ifLIPSUM
\RequirePackage{lipsum}
%    \end{macrocode}
%
% \section{kantlipsum}
%    \begin{macrocode}
\RequirePackage{kantlipsum}
%    \end{macrocode}
% \section{blindtext}
%    \begin{macrocode}
\RequirePackage{blindtext}
%    \end{macrocode}
% 
% \section{phd additonal macros}
%
% \begin{docCommand}{lorem}{\meta{*} }
%	 We declare a short macro \cs{lorem} to be used for testing, as well as 
%	 testing captions and the like. The star version does not provide a par
% \end{docCommand}
%    \begin{macrocode}
\DeclareDocumentCommand\lorem{ s }{Fusce adipiscing justo nec ante. Nullam in enim.
 Pellentesque felis orci, sagittis ac, malesuada et, facilisis in,
 ligula. Nunc non magna sit amet mi aliquam dictum. In mi. Curabitur
 sollicitudin justo sed quam et quadd. 
 \IfBooleanTF{#1}%
 {}%
 {\par}}
%    \end{macrocode}
% 
%
% \begin{docCommand}{fox} {void} 
%  A classic one liner containing all the letters
%	 of the alphabet, used as a testing code.
% \end{docCommand}
%    \begin{macrocode}
\newcommand{\fox}{``The quick brown fox jumps over the lazy dog''} 
%    \end{macrocode}
% 
%
% \begin{docCommand} {frogking} { \meta {void}}
% \end{docCommand}
%    \begin{macrocode}
\newcommand\frogking{%
\leavevmode
\hskip1em In olden times when wishing
still helped one, there lived a
king whose daughters were all
beautiful, but the youngest was so
beautiful that the sun itself,
which has seen so much, was
astonished whenever it shone in
her face. Close by the king's
castle lay a great dark forest,
and under an old lime-tree in the
forest was a well, and when
the day was very warm, the
king's child went out into the 
forest and sat down by the side
of the cool fountain, and when she was bored she
took a golden ball, and threw it up on a high and caught it, and this
ball was her favorite plaything. \par}%
%    \end{macrocode}
%
%
%    \begin{macrocode}
\newcommand\onepar{In olden times when wishing
still helped one, there lived a
king whose daughters were all
beautiful, but the youngest was so
beautiful that the sun itself,
which has seen so much, was
astonished whenever it shone in
her face. Close by the king's
castle lay a great dark forest,
and under an old lime-tree in the
forest was a well, and when
the day was very warm, the
king's child went out into the 
forest and sat down by the side
of the cool fountain, and when she was bored she
took a golden ball, and threw it up on a high and caught it, and this
ball was her favorite plaything.}%

\newcommand\alicei{%	
  The King and Queen of Hearts were seated on their throne
  when they arrived, with a great crowd assembled about them
  ---all sorts of little birds and beasts, as well as the
  whole pack of cards: the Knave was standing before them,
  in chains, with a soldier on each side to guard him; and
  near the King was the White Rabbit, with a trumpet in one
  hand, and a scroll of parchment in the other.  In the very
  middle of the court was a table, with a large dish of
  tarts upon it: they looked so good, that it made Alice
  quite hungry to look at them---``I wish they'd get the
  trial done,'' she thought, ``and hand round the
  refreshments!''.  But there seemed to be no chance of this,
  so she began looking at everything about her to pass away
  the time.}%

\newcommand\aliceii{%
  Alice had never been in a court of justice before, but she
  had read about them in books, and she was quite pleased to
  find that she knew the name of nearly everything there.
  ``That's the judge,'' she said to herself, ``because of his
  great wig.''.
  
  The judge, by the way, was the King, and as he wore his
  crown over the wig, (look at the frontispiece if you want
  to see how he did it,) he did not look at all comfortable,
  and it was certainly not becoming.
}

 \newcommand\aliceiii{``And that's the jury-box,'' thought Alice, ``and those
  twelve creatures,'' (she was obliged to say ``creatures,''
  you see, because some of them were animals, and some were
  birds) ``I suppose they are the jurors.''.  She said this
  last word two or three times over to herself being rather
  proud of it: for she thought, and rightly too, that very
  few little girls of her age knew the meaning of it at all.
  However, ``jurymen'' would have done just as well.}

 \newcommand\aliceiv{The twelve jurors were all writing very busily on slates.
  ``What are they doing?'' Alice whispered to the Gryphon.
  ``They can't have anything to put down yet, before the
  trial's begun.''.}
  
\newcommand\alicev{``They're putting down their names,'' the Gryphon
  whispered in reply, ``for fear they should forget them
  before the end of the trial.''.}
  
\newcommand\alicevi{``Stupid things!'' Alice began in a loud indignant voice,
  but she stopped herself hastily, for the White Rabbit
  cried out, ``Silence in the court!''; and the King put on
  his spectacles and looked anxiously round, to make out who
  was talking.\par}
%    \end{macrocode}
%
% \section{Functions for testing fonts}
%
% This is a short assembly of commands that can be used to test fonts.
%
%    \begin{macrocode}
\def\ALPHABET {A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}
\def\alphabet {a b c d e f g h i j k l m n o p q r s t u v w x y z}
\newcommand{\punctuation}{! ? . / , : }
%    \end{macrocode}
% The package fonttable provides a number of interesting testing tests
% for fonts
%
% \section{fonttable}
%  This can be used to create a font table for normal \tex fonts. Use the unicode
%  routines we provide later for unicode font tables.
%    \begin{macrocode}					
\RequirePackage{fonttable}	
%    \end{macrocode}
%

%
% \chapter{Tables}
%
% 	It is unlikely that a publication, would not have a table
% 	somewhere, to make life easier we load Simon Fear's |booktabs| \citep{booktabs}. The manual is a must
% read if you want to typeset typographically attractive tables.\footnote{Notice I haven't said
% typographically correct, there is no such thing.} We don't need to set any keys for the
% package.
%	The counter |inc| is used to increment serial numbers in tables and
%	\cs{resetinc} resets this counter to zero. 
% \section{booktabs and helper macros}
% {inc}
% {resetinc}
%

%
%    \begin{macrocode}
\RequirePackage{booktabs}
\newcounter{step}
\newcommand\resetinc{\setcounter{step}{0}}
\newcommand\inc{\stepcounter{step}\thestep}
%    \end{macrocode}
% 
% 
% 
%
%
% \subsection{tabularx}
% This package by David Carlisle's enables the typesetting of fixed width 
% tables and can stretch
% specific columns. The package loads the |array| package, but we save it from some
% trouble by pre-loading it first, so we can capture its loading. The package has two keys
% |infoshow| and |debugshow| which we don't bother at this stage to load.
% 
%    \begin{macrocode}
\RequirePackage{tabularx}
%    \end{macrocode}
% 
%
% \subsection{array}
% {delarray}
% The addition to array.sty added in delarray.sty is a system of implicit |\left|
%|\right| pairs. If you want an array surrounded by parentheses, you can enter:
%|\begin{array}({cc}) . .|
% 
%    \begin{macrocode}
% \RequirePackage{delarray} gives problems
\RequirePackage{array}
%    \end{macrocode}
% 
% 
%
% \subsection{dcolumn}
%  The |dcolumn| package also by David Carlisle is loaded next. This package 
%  defines a system for defining columns of entries in an |array|
%  or tabular which are to be aligned on a `decimal point'. It also loads the |array|
%  package, which we have already loaded.
% 
%    \begin{macrocode}
\RequirePackage{dcolumn}
\RequirePackage{rccol}
%    \end{macrocode}
% 
%
% \section{longtable}
% \makeatletter
%  The |longtable| package, needs no introduction. It has some
%  peculiar settings and sometimes a couple of runs before it settles
%  down. The package has four keys |errorshow|, |pausing|, |set| and |final| looks 
%   as if they deprecated, at this stage we make onlty a mental note of it.
%  The package cannot be used within |multicolumn| environments and will
%  emit an error. 
% 
% 
%    \begin{macrocode}
\RequirePackage{longtable}
%    \end{macrocode}
% The following environment was copied verbatim from the Comprehensive
% Symbols. I have been trying to understand it ever since.
%
%    \begin{macrocode}
\let\origLT@array=\LT@array
\let\origLT@start=\LT@start
%
\newenvironment{longsymtable}[2][true]{%
  \expandafter\global\expandafter\let
  \expandafter\ifshowsymtable\csname if#1\endcsname
  \ifshowsymtable
    \mbox{}%
    \Needspace*{1\baselineskip}%
    \mbox{}%
    \begin{center}%
    \phantomsection
    \refstepcounter{table}%
    \let\refstepcounter=\@gobble
    \let\LT@array=\origLT@array
    \let\LT@start=\origLT@start

    \addcontentsline{toc}{subsection}{%
     \protect\numberline{\tablename~\thetable:}{#2}}%
    \@makecaption{\fnum@table}{#2}%
    \gdef\lt@indexed{}%
    \let\next=\relax
  \else
    % The following was taken verbatim from verbatim.sty.
    \let\do\@makeother\dospecials\catcode`\^^M\active
    \let\verbatim@startline\relax
    \let\verbatim@addtoline\@gobble
    \let\verbatim@processline\relax
    \let\verbatim@finish\relax
    \let\next=\verbatim@
  \fi
  \next
}{%
  \ifshowsymtable
    \end{center}
    \let\@elt=\index\lt@indexed  % Close our index ranges.
    \gdef\lt@indexed{}%
    \vskip 8ex minus 2ex
  \fi
}


% Define \index-like commands for use with longsymtable that
% automatically apply to the entire table, not just the start of it.

\newcommand{\ltindex}[1]{%
  \index{#1|(}%
  \@cons{\lt@indexed}{{#1|)}}%
}
\newcommand{\ltidxboth}[2]{\mbox{}\ltindex{#1 #2}\ltindex{#2>#1}}

\let\LT@array=\origLT@array
\let\LT@start=\origLT@start
%    \end{macrocode}
%   
%
% \section{multirow}
% 
% 
% The \pkg{multirow} by Piet van Oostrum and its two companion packages
% \pkgname{bigdelim} and \pkgname{bigstrut} can be used to define multirow cells. They are difficult
% to get right and in most instances one can redesign the tables better without
% resorting to multi-rows. It has a strange interaction with the \pkgname{colortbl}
% and a hack around its usage which we will load next.
% 
%    \begin{macrocode}
% If we have type1cm.sty, use it.
 
\IfStyFileExists*{type1cm}
  {\usepackage{type1cm}}
  {}
% If we have multirow.sty, use it.
\newif\ifhavemultirow
\IfStyFileExists{multirow}
  {\havemultirowtrue
  \RequirePackage{multirow}
  }
  {}  
%    \end{macrocode}
%
% \section{colortbl}
%
%    \begin{macrocode}
\newif\ifhavecolortbl
\IfStyFileExists{colortbl}  
  {\havecolortbltrue\RequirePackage{colortbl}}
  {}
%    \end{macrocode}
% 
% 
% \section{The threeparttable and threeparttablex packages}
% The package \pkgname{threeparttable} by Donald Arsenau facilitates tables with titles (captions) and notes. The
% package comes with a number of options |para|, |flushleft|, online and normal. We also load Lars Madsen's 
% \pkgname{threeparttablex} that extends the package to work with \pkgname{longtable}.
%
%   \label{threeparttable}
%    \begin{macrocode}
\RequirePackage{threeparttable}
\RequirePackage{threeparttablex}
%    \end{macrocode} 
% \section{arydshln}
%
%This package by \person{Hiroshi}{Nakashima}  gives \latexâ€™s \pkg{array} and \pkg{tabular} environments the capability to draw horizontal/vertical dash-lines.
%
% I do not have a normal use for it, personally but I have included it here for correct ordering in case there is a need for it. According to the package documentation, it has to be loaded after \pkg{array}, \pkg{longtable}, \pkg{colortab}, \pkg{colortbl}. Also according to the hyperref documentation it has to be loaded after hyperref as well. 
%
%
%^^A \begin{center}
%^^A\begin{tabular}{|l::c:r|}\hline
%^^A A&B&C\\\hdashline
%^^A %AAA&BBB&CCC\\\cdashline{1-2}
%^^A %\multicolumn{2}{|l:}{AB}&C\\\hdashline\hdashline
%^^A %\end{tabular}
%^^A % \end{center}
%  
% \section{Managing Landscape Pages}
%
% A common request from authors is to rotate text, tables and or
% figures and to typeset the content using a landscape page.
%
% \section{pdflscape and lscape}
% 
% The package \pkgname{pdflscape} by Heiko Oberdiek  adds PDF support 
% to the environment |landscape| 
% of  package |lscape| by setting the PDF page attribute /Rotate. 
% It has to be loaded after \pkgname{lscape} so we let it load it itself.
%  
%    \begin{macrocode}

\IfStyFileExists {pdflscape}
  {\RequirePackage{pdflscape}}
  {}
%    \end{macrocode}
% 
% 
%  
% \chapter{Maths Packages and Commands}
%
% 	Although we cognizant that there are documents that do not use math
% 	and perhaps others that our selection of packages is inadequate, we
% 	offer a bundle of what we think will cover most of the cases. One
% 	issue with maths is that we are limited with TeX's built-in math
% 	alphabet limitations. We aim to satisfy the most common requirements.
% 
% \section{Math Alphabets hack}
%  We provide egreg's hack to extend the math alphabets for XeTeX
%  These hacks only work for XeTeX and LuaTeX. and fail for pdflatex.
%  Don't use pdflatex
%    \begin{macrocode}

\ifUNICODE
\else
\ifxetex
  \def\new@mathgroup{\alloc@8\mathgroup\mathchardef\@cclvi}
  \patchcmd{\document@select@group}{\sixt@@n}{\@cclvi}{}{}
  \patchcmd{\select@group}{\sixt@@n}{\@cclvi}{}{}
\fi
\ifluatex
  \def\new@mathgroup{\alloc@8\mathgroup\mathchardef\@cclvi}
  \patchcmd{\document@select@group}{\sixt@@n}{\@cclvi}{}{}
  \patchcmd{\select@group}{\sixt@@n}{\@cclvi}{}{}
\fi
\fi
%    \end{macrocode}
% 
% \section{mathtools} 
%	We start with \pkgname{mathtools}, as it loads the
% 	|amsmath| package and can also pass options to it. The package was developed 
% 	by Lars Madsen and is maintained by Will Robertson and Joseph Wright. It
% 	appears to be very popular with a lot of scholars in the sciences and
% 	mathematical fields and hence I decided to  include it here.\FIRE
% 

%
%
%    \begin{macrocode}
\newif\ifAMS
%\newcommand\AMS{\AmS\index{AMS=\AmS}}
\AMStrue
%    
%\IfStyFileExists{amssymb}
%  {\AMStrue
%   \save_symbol:{angle} \save_symbol:{rightleftharpoons}
%   \save_symbol:{leftharpoondown} \save_symbol:{rightharpoonup}
%   \save_symbol:{iint} \save_symbol:{iiint}
%   \save_symbol:{iiiint} \save_symbol:{idotsint}
%   \let\orig@ifstar=\@ifstar
%   \let\overleftrightarrow \undefined%CHECK
%   \let\underleftarrow\undefined
%    \let\underrightarrow\undefined 
%    \let\underleftrightarrow\undefined 
%   \RequirePackage{amsmath}
%   \RequirePackage{amssymb}
%   \let\@ifstar=\orig@ifstar
%   \restore_symbol:{AMS}{angle} \restore_symbol:{AMS}{rightleftharpoons}
%   \restore_symbol:{AMS}{lefthapoondown} \restore_symbol:{AMS}{rightharpoonup}
%   \restore_symbol:{AMS}{iint} \restore_symbol:{AMS}{iiint}
%   \restore_symbol:{AMS}{iiiint} \restore_symbol:{AMS}{idotsint}
%  }
%  {
%    % The following was modified from amsmath.sty.
%    \newcommand{\AmSfont}{%
%      \usefont{OMS}{cmsy}{m}{n}}
%    \providecommand{\AmS}{{\protect\AmSfont
%      A\kern-.1667em\lower.5ex\hbox{M}\kern-.125emS}}
%  }
%    
%
% This provides a useful way to hook into the package options
% using our setting interface.
%
%    \end{macrocode}
%    \begin{macrocode}
%
\ExplSyntaxOn
\newif\ifMTOOLS
\newcommand\MTOOLS{\pkgname{mathtools}}
 \RequirePackage{mathtools}
 \RequirePackage{suffix}
\IfStyFileExists{mathtools}
  {\MTOOLStrue
   \save_symbol:{xleftrightarrow} \save_symbol:{xLeftarrow}
   \save_symbol:{xRightarrow} \save_symbol:{xLeftrightarrow}
   \save_symbol:{xrightharpoondown} \save_symbol:{xrightharpoonup}
   \save_symbol:{xleftharpoondown} \save_symbol:{xleftharpoonup}
   \save_symbol:{xleftrightharpoons} \save_symbol:{xrightleftharpoons}
   \save_symbol:{xhookleftarrow} \save_symbol:{xhookrightarrow}
   \save_symbol:{xmapsto} \save_symbol:{underbracket}
   \save_symbol:{overbracket} \save_symbol:{lparen} \save_symbol:{rparen}
   \save_symbol:{dblcolon} \save_symbol:{coloneqq} \save_symbol:{Coloneqq}
   \save_symbol:{coloneq} \save_symbol:{Coloneq} \save_symbol:{eqqcolon}
   \save_symbol:{Eqqcolon} \save_symbol:{eqcolon} \save_symbol:{Eqcolon}
   \save_symbol:{colonapprox} \save_symbol:{Colonapprox}
   \save_symbol:{colonsim} \save_symbol:{Colonsim} \save_symbol:{overbrace}
   \save_symbol:{underbrace}%NEW
   \save_symbol:{underbrace}
   \save_symbol:{overleftrightarrow}%NEW
   \save_symbol:{mathscr}
   \save_symbol:{ulcorner}
   \save_symbol:{urcorner}
   \save_symbol:{llcorner}
   \save_symbol:{lrcorner}
   \save_symbol:{backepsilon}
   \save_symbol:{digamma}  
   \save_symbol:{underrightarrow}
   \save_symbol:{underleftarrow} 
   \save_symbol:{underleftrightarrow}
   \save_symbol:{eth}
   \save_symbol:{underbracket}
   % The mathtools package delays the definitions of some of its symbols
   % to the \begin{document}.  We redefine \AtBeginDocument to force
   % mathtools to define everything immediately.
   \let\origAtBeginDocument=\AtBeginDocument
   \def\AtBeginDocument##1{##1}
  % \let\RequirePackage\origRequirePackage
  \PassOptionsToPackage{donotfixmathbugs}{mathtools}
   \RequirePackage{mathtools}
   
   \let\AtBeginDocument=\origAtBeginDocument

   \restore_symbol:{MTOOLS}{xleftrightarrow}
   \restore_symbol:{MTOOLS}{xLeftarrow}
   \restore_symbol:{MTOOLS}{xRightarrow}
   \restore_symbol:{MTOOLS}{xLeftrightarrow}
   \restore_symbol:{MTOOLS}{xrightharpoondown}
   \restore_symbol:{MTOOLS}{xrightharpoonup}
   \restore_symbol:{MTOOLS}{xleftharpoondown}
   \restore_symbol:{MTOOLS}{xleftharpoonup}
   \restore_symbol:{MTOOLS}{xleftrightharpoons}
   \restore_symbol:{MTOOLS}{xrightleftharpoons}
   \restore_symbol:{MTOOLS}{xhookleftarrow}
   \restore_symbol:{MTOOLS}{xhookrightarrow}
   \restore_symbol:{MTOOLS}{xmapsto}
   \restore_symbol:{MTOOLS}{underbracket}
   \restore_symbol:{MTOOLS}{overbracket} \restore_symbol:{MTOOLS}{lparen}
   \restore_symbol:{MTOOLS}{rparen} \restore_symbol:{MTOOLS}{dblcolon}
   \restore_symbol:{MTOOLS}{coloneqq} \restore_symbol:{MTOOLS}{Coloneqq}
   \restore_symbol:{MTOOLS}{coloneq} \restore_symbol:{MTOOLS}{Coloneq}
   \restore_symbol:{MTOOLS}{eqqcolon} \restore_symbol:{MTOOLS}{Eqqcolon}
   \restore_symbol:{MTOOLS}{eqcolon} \restore_symbol:{MTOOLS}{Eqcolon}
   \restore_symbol:{MTOOLS}{colonapprox}
   \restore_symbol:{MTOOLS}{Colonapprox}
   \restore_symbol:{MTOOLS}{colonsim} \restore_symbol:{MTOOLS}{Colonsim}
   \restore_symbol:{MTOOLS}{overbrace} \restore_symbol:{MTOOLS}{underbrace}
   \restore_symbol:{MTOOLS}{underbracket}

   % Some of the above are defined in terms of \dblcolon.  At the time
   % of this writing it doesn't seem like any other package uses the
   % name \dblcolon so it should be safe to retain its mathtools
   % definition.
   \let\dblcolon=\MTOOLSdblcolon
  }
  {}
\ExplSyntaxOff  
%    \end{macrocode}
%    \begin{macrocode}
%\cxset{tag left bracket/.store in = \leftbracket@cx,
%       tag right bracket/.store in = \rightbracket@cx,
%       tag font-weight/.store in = \tagfontweight@cx,
%       mathtool center colon/.store in=\centeredcolon@cx}
%%
%
%
%\newtagform{brackets}[\tagfontweight@cx]{\leftbracket@cx}%
%           {\rightbracket@cx}
%\mathtoolsset{centercolon=true,mathic}%italic correction in math
%\numberwithin{equation}{section}
%\cxset{tag left bracket =[,
%         tag right bracket =],
%         tag font-weight=\textbf,
%         mathtool center colon=false} 
%    \end{macrocode}
% 
% Macros to try and find available fonts for XeTeX sample docs. This is
% copied verbatim from XeTeX documentation bundle.
%
% Usage:
%
% |\testFontIsAvailable{font-name}|
%   sets |\ifFontIsAvailable| according to whether or not it could be found
%
% |\FindAnInstalledFont{font-name/alternative/another/yet-another}{\cs}|
%   searches for an available font from among the names given,
%   and |\def|'s the control sequence |\cs| to the first one found
%   or to <No suitable font found> if none (which will subsequently
%   cause an error when used in a |\font| command). A word of warning this
%   can cause the system to compile the document very slowly.
%
%    \begin{macrocode}
%
\newif\ifFontIsAvailable
\def\testFontAvailability#1{%
  \count255=\interactionmode
  \batchmode
  \let\preload=\nullfont
  \font\preload="#1" at 10pt
  \ifx\preload\nullfont \FontIsAvailablefalse
  \else \FontIsAvailabletrue \fi
  \interactionmode=\count255
}

\def\FindAnInstalledFont#1#2{
  \expandafter\getFirstFontName#1/\end
  \let\next\gobbleTwo
  \ifx\trialFontName\empty
    \def#2{<No suitable font found>}%
  \else
    \testFontAvailability{\trialFontName}
    \ifFontIsAvailable
      \edef#2{\trialFontName}%
    \else
      \let\next\FindAnInstalledFont
    \fi
  \fi
  \expandafter\next\expandafter{\remainingNames}{#2}
}
\def\getFirstFontName#1/#2\end{\def\trialFontName{#1}\def\remainingNames{#2}}
\def\gobbleTwo#1#2{}
%
%    \end{macrocode}
% {ligatures}
%    \begin{macrocode}
\newcommand\ligatures[2][Old Standard-Regular]{%
  \bgroup
  \fontspec[Ligatures = Common]{#1}%
  \textit{#2}%
  \egroup
}
\renewcommand\U[1]{{\texttt{U+#1}}(\char"#1)\xspace}
%    \end{macrocode}
% 

% 
%
%
% 
% \section{The ymath package}
%
% We load Yiannis Haralambous \pkgname{ymath}\ctan{ymath} package for its extensible wide accents. 
% not loaded? 
%    \begin{macrocode}
\newif\ifYH
\newcommand\YH{yhmaths}
\IfStyFileExists{yhmaths}
  {\YHtrue
   \let\origRequirePackage=\RequirePackage    % We don't want amsmath loaded.
   \def\RequirePackage##1{}
   \RequirePackage{yhmath}
   \let\RequirePackage=\origRequirePackage
  }
  { \RequirePackage{yhmath}}
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{multienum}
%    \end{macrocode}
%
% \section{The accents package}
%
% If we have the \pkgname{accents}package \citep{accents}, use it (for an example in the section
% on constructing new symbols). Please do note that you need to use the
% right command name if we have restored it. Do note that the package redeclares
%\index{accents (package commands)>\ttfamily\string\underaccent}%
%\index{accents (package commands)>\ttfamily\string\ring}%
%\index{accents (package commands)>\ttfamily\string\undertilde}%
%\index{accents (package commands)>\ttfamily\string\dddot}%
%\index{accents (package commands)>\ttfamily\string\ddddot}%
% See commentary in \pkgname{stix} to see why we include it here.
%    \begin{macrocode}
\ExplSyntaxOn
\newif\ifACCENTS
\IfStyFileExists{accents}
  {\ACCENTStrue
   \save_symbol:{undertilde}
   \save_symbol:{dddot}
   \save_symbol:{ddddot}
   \RequirePackage{accents}
   \restore_symbol:{ACCENTS}{undertilde}
   \restore_symbol:{ACCENTS}{dddot}
   \restore_symbol:{ACCENTS}{ddddot}
  }
  {}   
\ExplSyntaxOff  
 %\RequirePackage {nath} DANGEROUS
%    \end{macrocode}
%
% \section{mathrsfs}
%
%  The package \pkgname{mathrsfs} provides calligraphic style fonts.
%  ^^A\mathscr{A B C D E F G} \FIRE to be overwriiten by unicode-math
%  options later. Need to study it.
% {mathscr}\FIRE needs fixing
%    \begin{macrocode}
%\else
\IfStyFileExists{mathrsfs}
  {\newcommand{\mathscr}[1]{\mbox{\usefont{U}{rsfs}{m}{n}##1}}}
  {}
%    \end{macrocode}
% 
%
% \section{txfonts}
% 
% pxfonts relies on txfonts (I think), so either package can be loaded.
% Note that txfonts/pxfonts redefine every LaTeX and AMS character,
% which is not what we want.  As a result, we have to rely on some
% serious trickery to prevent our old characters from getting redefined.
% If we are running with XeTeX this has to be before AMS and other packages
% and on top of fontspec. 
%    \begin{macrocode}
\def\TX{txfonts}
%    \end{macrocode}
% 
%
% \section{mathabx}
%
% Here's a real problem child: mathabx, which also redefines virtually
% every symbol provided by LaTeX2e and AMS.  We have to resort to our
% most devious trickery to get mathabx to load properly.
%
%    \begin{macrocode}
%
%\ExplSyntaxOn
%\newif\ifABX
%\def\ABX{\pkgname{mathabx}}
%\let\origDeclareMathSymbol=\DeclareMathSymbol
%\let\origDeclareMathDelimiter=\DeclareMathDelimiter
%\let\origDeclareMathRadical=\DeclareMathRadical
%\let\origDeclareMathAccent=\DeclareMathAccent

  % Redefine \DeclareMathSymbol to stick "ABX" in front of each symbol name.
%  \renewcommand{\DeclareMathSymbol}[4]{%
%    \let\mathabx@undefine=\@gobble  % Undefining symbols causes all sorts of problems for us.
%    \edef\newname{\expandafter\@gobble\string#1}
%    \ifx\newname\@empty
%    \else
%      \edef\newname{ABX\newname}
%      \expandafter\origDeclareMathSymbol\expandafter{%
%        \csname\newname\endcsname}{#2}{#3}{#4}%
%    \fi
%  }
  % Do the same for \DeclareMathDelimiter.
%  \def\DeclareMathDelimiter#1{%
%    \edef\newname{\expandafter\@gobble\string#1}
%    \def\eatfour##1##2##3##4{}%
%    \def\eatfive##1##2##3##4##5{}%
%    \ifx\newname\@empty
%      \if\relax\noexpand#1%
%        \def\next{\eatfive}
%      \else
%        \def\next{\eatfour}
%      \fi
%    \else
%      \edef\newname{ABX\newname}
%      \def\next{%
%        \expandafter\origDeclareMathDelimiter\expandafter{%
%          \csname\newname\endcsname}}
%    \fi
%    \next
%  }
%  % Do the same for \DeclareMathAccent.
%  \renewcommand{\DeclareMathAccent}[4]{%
%    \edef\newname{\expandafter\@gobble\string#1}
%    \ifx\newname\@empty
%    \else
%      \edef\newname{ABX\newname}
%      \expandafter\origDeclareMathAccent\expandafter{%
%        \csname\newname\endcsname}{#2}{#3}{#4}%
%    \fi
%  }
%  % Redefine \DeclareMathRadical to do nothing.
% \renewcommand{\DeclareMathRadical}[5]{}
%
%\let\proofmode=1
%\RequirePackage{mathabx}
%\IfStyFileExists{mathabx}
%  {\ABXtrue
%   \save_symbol:{not} \save_symbol:{widering}\save_symbol:{Moon}
%   \save_symbol:{notowner} \save_symbol:{iint} \save_symbol:{iiint}
%   \save_symbol:{oint} \save_symbol:{oiint} \save_symbol:{bigboxperp}
%   \save_symbol:{bigoperp} \save_symbol:{boxedcirc} \save_symbol:{boxeddash}
%   \save_symbol:{boxeedast} \save_symbol:{boxperp} \save_symbol:{boy}
%   \save_symbol:{Cap} \save_symbol:{centerdot} \save_symbol:{circledast}
%   \save_symbol:{circledcirc} \save_symbol:{circleddash} \save_symbol:{Cup}
%   \save_symbol:{curvearrowtopleft} \save_symbol:{curvearrowtopleftright}
%   \save_symbol:{curvearrowtopright} \save_symbol:{doteqdot}
%   \save_symbol:{geqslant} \save_symbol:{gets} \save_symbol:{girl}
%   \save_symbol:{Join} \save_symbol:{land} \save_symbol:{leqslant}
%   \save_symbol:{looparrowupleft} \save_symbol:{looparrowupright}
%   \save_symbol:{lor} \save_symbol:{lsemantic}
%   \save_symbol:{mayaleftdelimiter} \save_symbol:{mayarightdelimiter}
%   \save_symbol:{ndivides} \save_symbol:{nequiv} \save_symbol:{ngeqslant}
%   \save_symbol:{ni} \save_symbol:{nleqslant} \save_symbol:{notni}
%   \save_symbol:{notowns} \save_symbol:{notsign} \save_symbol:{operp}
%   \save_symbol:{rsemantic} \save_symbol:{sqCap} \save_symbol:{sqCup}
%   \save_symbol:{to} \save_symbol:{ulsh} \save_symbol:{ursh}
%   \save_symbol:{overbrace} \save_symbol:{underbrace}
%   \save_symbol:{overgroup} \save_symbol:{undergroup}
%   \save_symbol:{dddot} \save_symbol:{ddddot}
%
%   \RequirePackage{mathabx}
%
%   \restore_symbol:{ABX}{not} \restore_symbol:{ABX}{widering}
%   \restore_symbol:{ABX}{Moon} \restore_symbol:{ABX}{notowner}
%   \restore_symbol:{ABX}{iint} \restore_symbol:{ABX}{iiint}
%   \restore_symbol:{ABX}{oint} \restore_symbol:{ABX}{oiint}
%   \restore_symbol:{ABX}{bigboxperp} \restore_symbol:{ABX}{bigoperp}
%   \restore_symbol:{ABX}{boxedcirc} \restore_symbol:{ABX}{boxeddash}
%   \restore_symbol:{ABX}{boxeedast} \restore_symbol:{ABX}{boxperp}
%   \restore_symbol:{ABX}{boy} \restore_symbol:{ABX}{Cap}
%   \restore_symbol:{ABX}{centerdot} \restore_symbol:{ABX}{circledast}
%   \restore_symbol:{ABX}{circledcirc} \restore_symbol:{ABX}{circleddash}
%   \restore_symbol:{ABX}{Cup} \restore_symbol:{ABX}{curvearrowtopleft}
%   \restore_symbol:{ABX}{curvearrowtopleftright}
%   \restore_symbol:{ABX}{curvearrowtopright}
%   \restore_symbol:{ABX}{doteqdot} \restore_symbol:{ABX}{geqslant}
%   \restore_symbol:{ABX}{gets} \restore_symbol:{ABX}{girl}
%   \restore_symbol:{ABX}{Join} \restore_symbol:{ABX}{land}
%   \restore_symbol:{ABX}{leqslant} \restore_symbol:{ABX}{looparrowupleft}
%   \restore_symbol:{ABX}{looparrowupright} \restore_symbol:{ABX}{lor}
%   \restore_symbol:{ABX}{lsemantic}
%   \restore_symbol:{ABX}{mayaleftdelimiter}
%   \restore_symbol:{ABX}{mayarightdelimiter}
%   \restore_symbol:{ABX}{ndivides} \restore_symbol:{ABX}{nequiv}
%   \restore_symbol:{ABX}{ngeqslant} \restore_symbol:{ABX}{ni}
%   \restore_symbol:{ABX}{nleqslant} \restore_symbol:{ABX}{notni}
%   \restore_symbol:{ABX}{notowns} \restore_symbol:{ABX}{notsign}
%   \restore_symbol:{ABX}{operp} \restore_symbol:{ABX}{rsemantic}
%   \restore_symbol:{ABX}{sqCap} \restore_symbol:{ABX}{sqCup}
%   \restore_symbol:{ABX}{to} \restore_symbol:{ABX}{ulsh}
%   \restore_symbol:{ABX}{ursh} \restore_symbol:{ABX}{overbrace}
%   \restore_symbol:{ABX}{underbrace} \restore_symbol:{ABX}{overgroup}
%   \restore_symbol:{ABX}{undergroup}
%   \restore_symbol:{ABX}{dddot} \restore_symbol:{ABX}{ddddot}
%  }
%  {}
%\let\DeclareMathAccent=\origDeclareMathAccent
%\let\DeclareMathRadical=\origDeclareMathRadical
%\let\DeclareMathDelimiter=\origDeclareMathDelimiter
%\let\DeclareMathSymbol=\origDeclareMathSymbol
%\ifABX
  % Define only those accents that are not defined elsewhere.
%  \DeclareMathAccent{\widecheck}     {0}{mathx}{"71}
%  \DeclareMathAccent{\widebar}       {0}{mathx}{"73}
%  \DeclareMathAccent{\widearrow}     {0}{mathx}{"74}
%  % Redefine all let-bound symbols.
%  \let\ABXcenterdot=\ABXsqbullet
%  \let\ABXcircledast=\ABXoasterisk
%  \let\ABXcircledcirc=\ABXocirc
%  % Ensure that \ABXwidering invokes \ABXwideparen, not \wideparen.
%  \def\ABXwidering#1{\ring{\ABXwideparen{#1}}}
%  % Redefine commands that are used by other commands.
%  \DeclareMathSymbol{\ABXnotsign}    {3}{matha}{"7F}
%  \DeclareMathSymbol{\ABXvarnotsign} {3}{mathb}{"7F}
%  \DeclareMathSymbol{\ABXnotowner}   {3}{matha}{"53}
%  
%  \def\ABXoverbrace{\overbrace@{\bracefill\ABXbraceld\ABXbracemd\ABXbracerd\ABXbracexd}}
%    \def\ABXunderbrace{\underbrace@{\bracefill\ABXbracelu\ABXbracemu\ABXbraceru\ABXbracexu}}
%    \def\ABXovergroup{\overbrace@{\bracefill\ABXbraceld{}\ABXbracerd\ABXbracexd}}
%    \def\ABXundergroup{\underbrace@{\bracefill\ABXbracelu{}\ABXbraceru\ABXbracexu}} 
%
%  
%  % Define a command to select the mathb font.
%  \newcommand{\mathbfont}{\usefont{U}{mathb}{m}{n}}
%\fi    % ABX test
%%
%\ExplSyntaxOff
%    \end{macrocode}
%
% 
% \section{empheq}
%
%  This is not on ctan and I removed it
%    \begin{macrocode}
%^^A\RequirePackage[allowspaces]{empheq} %defines harpoon macros
%    \end{macrocode}
%
% \section{Fractions}
% We load two packages for fractions, but our preference is to use the
% \pkgname{xfrac}. We load \pkgname{nicefrac} in case anyone disagrees.
% 
% \subsection{The nicefrac and xfrac package}
% The package \pkgname{xfrac} produces better fractions. 
% The \pkgname{nicefrac} is an older package. I am told some people still use it.
%    \begin{macrocode}
\RequirePackage{nicefrac}
\RequirePackage{xfrac}
%    \end{macrocode}
% 
% 
% \section{AMS Packages}
% 
% We load \pkgname{amssymb},
% \pkgname{amsthm}, \pkgname{amsopn} and \pkgname{amscd} to complete the \AmS\ suite.
%    \begin{macrocode}
\RequirePackage{amssymb}[2002/01/22]
\RequirePackage{amsthm}[2002/01/22]
\RequirePackage{amsopn}
\RequirePackage{amscd}
%    \end{macrocode}
%
% \subsection{bmatrix columns}
% We increase the number of bmatrix columns, as this is a common requirement.
%    \begin{macrocode}
\setcounter{MaxMatrixCols}{20}
%    \end{macrocode}
%
% \section{dsfont}
%
% The \pkgname{dsfont} which is available in MikTeX as \pkgname{dstroke} can be useful
% for typesetting the mathematical symbols for the natural numbers
% \person{Olaf}{Kummer} \citep{dsfont}. 
% It breaks XeTeX and LuaTeX so we only load it for
% LaTeX.
% 
%    \begin{macrocode} 
\ifengine{}{}{% 
  \IfStyFileExists{dsfont}%
    { \newcommand{\mathds}[1]{\mbox{\usefont{U}{dsrom}{m}{n}##1}}
      \newcommand{\mathdsss}[1]{\mbox{\usefont{U}{dsss}{m}{n}##1}}}
    {}
}
%    \end{macrocode}
%
% The package |stmaryrd| can be used for additional symbols. 
% 
% The \pkgname{amscd} is probably not useful at all as people are
% moving to graphical programs such as TikZ for their commutative
% diagrams.
%  
%
%This package\footnote{The package is part of the \texttt{mh}-bundle 
%of Morten H\o gholm (\href{http://www.ctan.org/tex-archive/macros/latex/contrib/mh/}{CTAN://macros/latex/contrib/mh/}).} 
%supports different frames for math environments of the 
% AmSmath
%package. It doesn't support  all the environments from %standard \LaTeX{} which 
% are not modified by \AmS{}math.
%
%With the optional argument of the empheq
%the preferred box type
%can be specified. A simple one is |fbox|.
%
%  ^^A\begin{empheq}[box=\fbox]{align}
%	^^Af(x)=\int_1^{\infty}\frac{1}{x^2}\,\mathrm{d}x=1
%  ^^A\end{empheq}

% \subsection{xpfeil}
%
%  The package \pkgname{extpfeil} loads \pkgname{stmaryd} with limited options
%  we temporarily make |\RequirePckage| a no-op to prevent
%   LaTeX from complaining.
% 
% Manually define every symbol in \pkgname{cmll} so we don't have to use any more
% math alphabets.
% 
% \section{Feynman diagrams}
% The package feyn provides yet another math font for which we have no room.
% Fortunately, it's relatively easy to define all of its symbols in
% terms of a text font.
% 
%
%    \begin{macrocode} 
\ExplSyntaxOn 
\newif\ifFEYN
\newcommand\FEYN{\pkgname{feyn}}
\IfStyFileExists{feyn}
  {\FEYNtrue
   \let\origProvidesPackage=\ProvidesPackage
   \def\ProvidesPackage##1[##2]{\origProvidesPackage{##1}[##2]\endinput}
   \save_symbol:{filename}
   \usepackage{feyn}
   \restore_symbol:{FEYN}{filename}
   \let\ProvidesPackage=\origProvidesPackage
   \DeclareFontFamily{OMS}{textfeyn}{\skewchar\font'000}
   \DeclareFontShape{OMS}{textfeyn}{m}{n}{%
     <-10.5>feyntext10%
     <10.5-11.5>feyntext11%
     <11.5->feyntext12%
   }{}
   \DeclareRobustCommand{\feyn}[1]{{\usefont{OMS}{textfeyn}{m}{n}##1}}
   \DeclareRobustCommand{\wfermion}{\feyn{\char"64}}
   \DeclareRobustCommand{\hfermion}{\feyn{\char"6B}}
   \DeclareRobustCommand{\shfermion}{\feyn{\char"6C}}
   \DeclareRobustCommand{\whfermion}{\feyn{\char"6D}}
   \DeclareRobustCommand{\gvcropped}{\feyn{\char"07}}
   \DeclareRobustCommand{\bigbosonloop}{\feyn{\char"7B}}
   \DeclareRobustCommand{\smallbosonloop}{\feyn{\char"7C}}
   \DeclareRobustCommand{\bigbosonloopA}{\feyn{\char"5B}}
   \DeclareRobustCommand{\smallbosonloopA}{\feyn{\char"5C}}
   \DeclareRobustCommand{\bigbosonloopV}{\feyn{\char"1B}}
   \DeclareRobustCommand{\smallbosonloopV}{\feyn{\char"1C}}
  }
  {}
 \DeclareRobustCommand\FIRE{{\large\color{red}\Fire}}
\ExplSyntaxOff 
%    \end{macrocode} 
% \begin{macrocode} 
% \section {A Go game package}
% This is such a good go game package. Unfortunately the looping 
% is done through an old package saved as repeat.tex, which is
% problematic. Also LuaTeX might have a problem with some of
% the metric files and I have still to find out where |\white|
% and |\black| are defined. This is
% for another day?
% {\FIRE }
% \medskip
% \bgroup
%
% \centering
%  \smallgoban
%  \cleargoban
%  \white[1]{c16,e16,e17,f17,d17,f16}
%  \copytogoban{2}
%  \white[7]{c14,k17}
%  \showgoban
%  \par
% 
% \egroup
% \medskip
%
% This package demonstrates the hazards of redefining common commands. It redefined
% all the sizing commands, as well as normalsize. The looping constructs also
% were conflicting with other packages. So I saved it and added some prefixes to
% patch it so it can be include here. This cries for a full re-write and
% to use \tikzname for the board.
%
%    
%%
%\ExplSyntaxOn
%\newif\ifIGO
%\newcommand\IGO{\pkgname{igo}}
%
%\IfStyFileExists{xigo}
%  {
%  \save_symbol:{black}
%%   \save_symbol:{white}
%%   \save_symbol:{repeat}
%%   % Don't let igo redefine all of the font-size commands.
%%   \save_symbol:{scriptsize}\newcommand{\scriptsize}{}
%%   \save_symbol:{tiny}\newcommand{\tiny}{}
%%   \save_symbol:{large}\newcommand{\large}{}
%%   \save_symbol:{Large}\newcommand{\Large}{}
%%   \save_symbol:{LARGE}\newcommand{\LARGE}{}
%%   \save_symbol:{huge}\newcommand{\huge}{}
%%   \save_symbol:{Huge}\newcommand{\Huge}{}
%  
%   \IGOtrue
%   \RequirePackage{xigo}
%%   \restore_symbol:{IGO}{black}
%%   \restore_symbol:{IGO}{white}
%%   %\restore_symbol:{IGO}{repeat}
%%   \restore_symbol:{IGO}{tiny}
%%   \restore_symbol:{IGO}{large}
%%   \restore_symbol:{IGO}{Large}
%%   \restore_symbol:{IGO}{LARGE}
%%   \restore_symbol:{IGO}{huge}
%%   \restore_symbol:{IGO}{Huge}
%   
%   % Define a version of \whitestone and \blackstone that avoid
%   % bracketed arguments.
%   \DeclareRobustCommand{\igowhitestone}[1]{\whitestone[##1]}
%   \DeclareRobustCommand{\igoblackstone}[1]{\blackstone[##1]}
%  }
%  {}
%\ExplSyntaxOff
%  
%    \end{macrocode}
%
% \section{The package ulsy}
% The \pkgname{ulsy} developed by Ulrich Goldschmitt provides two symbols
% one for the odplus and a second for contradiction. The latter comes in five sizes.
%  \odplus \blitza \blitzb \blitzc \blitzd \blitze. I am not too sure if anyone has a use
% for it. They are defined with |newcomand| so they do not conflict with anything.
%    \begin{macrocode}
\newif\ifULSY
\newcommand\ULSY{\pkgname{ulsy}}
\IfStyFileExists{ulsy}
  {\ULSYtrue\usepackage{ulsy}}
  {}
%    \end{macrocode}  
% \section{The package colonequals}  
%    \begin{macrocode}
\ExplSyntaxOn
\newif\ifCEQ
\newcommand\CEQ{\pkgname{colonequals}}
\IfStyFileExists{colonequals}
  {\save_symbol:{colonapprox}
   \save_symbol:{colonsim}
   \CEQtrue
   \usepackage{colonequals}
   \restore_symbol:{CEQ}{colonapprox}
   \restore_symbol:{CEQ}{colonsim}
  }
  {}
\ExplSyntaxOff  
%    \end{macrocode}
%
% \section{Linear Logic Symbols cmll}
% 
% The \pkgname{cmll} font defines a handful of symbols useful in linear logic that were not defined in other fonts and packages. The package needs to be loaded
% after txtfonts. We rename some of 
%
%   \CMLLbigparr 
%   \CMLLbigwith
%
%    \begin{macrocode}
\newif\ifCMLL
\newcommand\CMLL{\pkgname{cmll}}
\IfStyFileExists{cmll}
  {\CMLLtrue
   \newcommand*{\textCMLL}[1]{{\usefont{U}{cmllr}{m}{n}##1}}
   \DeclareRobustCommand{\CMLLparr}{\textCMLL{\char0}}
   \DeclareRobustCommand{\CMLLshpos}{\textCMLL{\char1}}
   \DeclareRobustCommand{\CMLLshneg}{\textCMLL{\char2}}
   \DeclareRobustCommand{\CMLLshift}{\textCMLL{\char3}}
   \DeclareRobustCommand{\CMLLcoh}{\textCMLL{\char4}}
   \DeclareRobustCommand{\CMLLscoh}{\textCMLL{\char5}}
   \DeclareRobustCommand{\CMLLincoh}{\textCMLL{\char6}}
   \DeclareRobustCommand{\CMLLsincoh}{\textCMLL{\char7}}
   \DeclareRobustCommand{\CMLLbigwith}{\raisebox{2ex}{\textCMLL{\char8}}}
   \DeclareRobustCommand{\CMLLbigparr}{\raisebox{2ex}{\textCMLL{\char10}}}
  }
  {}
%    \end{macrocode}
%
% \section{stmaryd}
% The \pkgname{stmaryd} is a symbol font who according to the developer
% \citep{stmaryrd} designed to live with the American Mathematical Societyâ€™s fonts, contained in amssymb.sty \FIRE
%    \begin{macrocode}
\ExplSyntaxOn
 \newif\ifST
 \newcommand\ST{\pkgname{stmaryrd}}
 \IfStyFileExists{stmaryrd}
  {\STtrue
   \save_symbol:{lightning}
   \save_symbol:{bigtriangleup} \save_symbol:{bigtriangledown}
   \RequirePackage{stmaryrd}
   \restore_symbol:{ST}{lightning}
   \restore_symbol:{ST}{bigtriangleup} \restore_symbol:{ST}{bigtriangledown}
  }
  {} 
\ExplSyntaxOff  
%    \end{macrocode}
% The package has a lot of options. 
% $\merge$. I need to think more as to how to handle it.
% 
% \section{extpfeil}
%    \begin{macrocode} 
\ExplSyntaxOn 
\newif\ifXPFEIL
\newcommand\XPFEIL{\pkgname{extpfeil}}
\IfStyFileExists{extpfeils}
  {\XPFEILtrue
   % extpfeil tries to do a \RequirePackage of stmaryrd with
   % conflicting options from what we used to load stmaryd.  We
   % therefore temporarily make \RequirePackage a no-op to prevent LaTeX
   % from complaining.
   \let\origRequirePackage=\RequirePackage
   \renewcommand*{\RequirePackage}[2][]{}
   \save_symbol:{xlongequal}
   \save_symbol:{xmapsto}
   \RequirePackage{extpfeil}
   \restore_symbol:{XPFEIL}{xlongequal}
   \restore_symbol:{XPFEIL}{xmapsto}
   \let\RequirePackage=\origRequirePackage
  }
  {}
\ExplSyntaxOff  
%    \end{macrocode}
%   
% \section{euscript} 
%  
%  For calligraphic math fonts we load the package \pkgname{euscript}. 
%
%  The expected normal use of the Euler Script alphabet is as a substitute
%  for the Computer Modern calligraphic alphabet found in |cmsy|. Therefore we
%  change the meaning of \cmd{\mathcal}. The package uses the Euler script alphabet found in |cmy|
%  and changes the meaning of \cmd{\mathcal} \seedocs{euscript}
%
% |\[ \mathcal{A} = \EuScript{A} \neq \CMcal{A} \] |
% 
%    \begin{macrocode}
\iffalse
\newif\ifEU
\IfStyFileExists{euscript}
  {\EUtrue\RequirePackage[mathcal]{euscript}
   \renewcommand{\mathcal}[1]{\mbox{\usefont{U}{eus}{m}{n}##1}}
  }
  {\let\CMcal\mathcal}
\fi
%    \end{macrocode}
%
% \section{Blackboard fonts}
% \subsection{The bm and bbm fonts}
% 
% These two packages provide bold math fonts. If we have the bm package, use it (to show how to typeset bold math).
% ^^A\mathbbmtt{\ALPHABET} 
% ^^AThe characters can be also be used for subscripts and superscripts.
% ^^A$M_{\mathbbm{i}}$. The package is the work of \person{Torsten}{Hilbrich}
%
%    \begin{macrocode}
%\ifUNICODE
%\else
  \newif\ifBM
  \IfStyFileExists{bm}
    {\BMtrue
      \RequirePackage{bm}
    }
   {}  
%\fi   
%    \end{macrocode}
%
% \section{bbm}
%
%    \begin{macrocode}  
\ifUNICODE
 \else
\IfStyFileExists{bbm}
  {\newcommand{\mathbbm}[1]{\mbox{\usefont{U}{bbm}{m}{n}##1}}
   \newcommand{\mathbbmss}[1]{\mbox{\usefont{U}{bbmss}{m}{n}##1}}
   \newcommand{\mathbbmtt}[1]{\mbox{\usefont{U}{bbmtt}{m}{n}##1}}}
  {}
\fi  
%    \end{macrocode}
%
% \subsection{bbold}
% The package \pkgname{bbold} developed by Alan Jeffrey provides an
% open or `blackboard bold' geometric sans serif. The package bbold-type1,
% offers type-1 fonts for the same. We use the latter, but conflicts with
% the staves?? \FIRE font or metric data bad.
%    \begin{macrocode}
\ifUNICODE
\else
\IfStyFileExists{bbold}
  {
  %</fontdef
  \newcommand{\BBmathbb}[1]{\mbox{\usefont{U}{bbold}{m}{n}##1}}
   % We have to manually define all of the symbols we care about.
   \newcommand{\BBsym}[1]{\ensuremath{\BBmathbb{\char##1}}}
   \newcommand{\Langle}{\BBsym{`<}}
   \newcommand{\Lbrack}{\BBsym{`[}}
   \newcommand{\Lparen}{\BBsym{`(}}
   \newcommand{\bbalpha}{\BBsym{"0B}}
   \newcommand{\bbbeta}{\BBsym{"0C}}
   \newcommand{\bbgamma}{\BBsym{"0D}}
   \newcommand{\Rparen}{\BBsym{`)}}
   \newcommand{\Rbrack}{\BBsym{`]}}
   \newcommand{\Rangle}{\BBsym{"3E}}
  }
  {}
\fi  
%    \end{macrocode}  
%  
%  |$\scriptsize\bbalpha \bbbeta \bbgamma $| Fails
%
% 
%
% \section{mbboard}
%
%  
%    \begin{macrocode}
\IfStyFileExists{mbboard}
  {\newcommand{\MBBmathbb}[1]{\mbox{\usefont{OT1}{mbb}{m}{n}##1}}}
  {}
\ifx\MBBmathbb\undefined
\else
  % Define only the symbols we actually use.
  \newcommand{\bbnabla}{\MBBmathbb{\char"9A}}
  \newcommand{\bbdollar}{\MBBmathbb{\char"24}}
  \newcommand{\bbeuro}{\MBBmathbb{\char"FB}}
  \newcommand{\bbpe}{\MBBmathbb{\char"D4}}
  \newcommand{\bbqof}{\MBBmathbb{\char"D7}}
  \newcommand{\bbyod}{\MBBmathbb{\char"C9}}
  \newcommand{\bbfinalnun}{\MBBmathbb{\char"CF}}

  % The following was copied from mbboard.sty.
  \DeclareFontFamily{OT1}{mbb}{\hyphenchar\font45}
  \DeclareFontShape{OT1}{mbb}{m}{n}{
        <5> <6> <7> <8> <9> <10> gen * mbb
        <10.95> mbb10 <12> <14.4> mbb12 <17.28> <20.74> <24.88> mbb17
        }{}
\fi

% \mathfrak is defined by a number of packages, to check for it by name.
\ifx\mathfrak\undefined
\else
  \renewcommand{\mathfrak}[1]{\mbox{\fontencoding{U}\fontfamily{euf}\selectfont#1}}
\fi
%    \end{macrocode}
%
%
% \section{The upgreek package} 
%
% The package \pkgname{upgreek} by Walter Schmidt provides fonts
% and commands for an upright Greek alphabet. It makes the upright
% Greek characters from the `Euler'  or `Adobe Symbol' typefaces available as 
% math symbols. It defaults to the Euler option. The package offers three
% options |Euler|, |Symbol| and |Symbolsmallscale|. This is in a bundle
% called |was|, so there are problems downloading it automatically via MikTeX.
% CHECK
% 
%    \begin{macrocode}
\newif\ifUPGR
    \RequirePackage[Symbol]{upgreek}
%    \end{macrocode}
% 
%
% \[
%  \begin{array}{lll}
%   \upalpha  &\upbeta    &\upgamma\\ 
%   \updelta  &\upepsilon &\upzeta\\
%   \upeta    &\uptheta   &\upiota \\
%   \upkappa  &\uplambda   &\upmu\\
%   \upnu     &\upxi      &\uppi\\
%   \uprho    &\upsigma  &\uptau\\
%   \upupsilon &\upphi   &\upchi\\
%   \uppsi     &\upomega  &\upvarepsilon\\
%   \upvartheta &\upvarpi  &\\
%  \end{array}
% \]
%
% 
% \section{mathdots}
% The \pkgname{mathdots} by Dan Luecking. 
%    \begin{macrocode}
\ExplSyntaxOn
\newif\ifMDOTS
\newcommand\MDOTS{\pkgname{mathdots}}
\ifUNICODE
\else
\IfStyFileExists{mathdots}
  {\MDOTStrue
   \save_symbol:{ddots}
   \save_symbol:{vdots}
   \save_symbol:{iddots}
   \save_symbol:{dddot}
   \save_symbol:{ddddot}
   \RequirePackage{mathdots}
   \restore_symbol:{MDOTS}{ddots}
   \restore_symbol:{MDOTS}{vdots}
   \restore_symbol:{MDOTS}{iddots}
   \restore_symbol:{MDOTS}{dddot}
   \restore_symbol:{MDOTS}{ddddot}
  }
  {}
\fi  
\ExplSyntaxOff  
%    \end{macrocode}  
% 
%  \chapter{Symbols}
%
%  The next section of the package, deals exclusively for packages that
%  handle symbols. The best guide to such symbols is 
%  \textit{The Comprehensive LaTeX Symbols Guide}. One needs to distinguish
%  a number of different types of symbols required for a manual and it is
%  a difficult exercise to make a selection. Another issue with symbols
%  is that there is a bit of overlap between the various fonts and commands
%  as to be expected.
%
%  \section{ASCII}
%
%  The \pkgname{ascii} will typeset a document in typewriter
%  font. We only need some of its commands to print
%  the ASCI table from 1-32. Can you imagine conflicting with 
%  siunix!!!
%    \begin{macrocode}
\ExplSyntaxOn
\let\oldSI\SI
\let\SI\undefined
\newif\ifASCII
\newcommand\ASCII{\pkgname{ascii}}
\IfStyFileExists{ascii}
	  {\ASCIItrue
	   \save_symbol:{HT}
	   \RequirePackage{ascii}
	   \restore_symbol:{ascii}{HT}
	   \let\SI\undefined
	  }
	  {}
\let\SI\oldSI
\ExplSyntaxOff	  
%    \end{macrocode}
%
%  \section{The china2e package}
%
%  The \pkgname{china2e} is a fairly old package, but can provide some
%  useful commands. It also provides helpful Chinese lunar symbols, although
%  now with specialized Chinese packages, these is fairly redundant for any
%  major use.
%
%  Of interest is some useful maths commands. \cmd{\Natural} \cmd{\NATURAL}
%  {\huge\color{thered}\Fire} \seedocs{china}.
% 
%    \begin{macrocode}
\ExplSyntaxOn
\newif\ifCHINA
\newcommand\CHINA{%
  \Chinasym
  \index{china2e=\textsf{china2e} (package)}%
  \index{packages>china2e=\textsf{china2e}}}
%  
\IfStyFileExists{china2e}
  {\CHINAtrue
   \save_symbol:{Info}
   \save_symbol:{Earth}
   \save_symbol:{Telephone}
   \save_symbol:{Fire}
   \save_symbol:{vdots}
   \let\origDeclareSymbolFont=\DeclareSymbolFont
   \let\origDeclareMathSymbol=\DeclareMathSymbol
   \renewcommand{\DeclareSymbolFont}[5]{}
   \renewcommand{\DeclareMathSymbol}[4]{%
     \DeclareRobustCommand{##1}{{\uchr##4}}}
   \usepackage{china2e}
   \let\DeclareSymbolFont=\origDeclareSymbolFont
   \let\DeclareMathSymbol=\origDeclareMathSymbol
   \restore_symbol:{china}{Info}
   \restore_symbol:{china}{Earth}
   \restore_symbol:{china}{Telephone}
   \restore_symbol:{china}{Fire}
   \restore_symbol:{CHINA}{vdots}
  }
  {}
\ExplSyntaxOff  
%    \end{macrocode}
%
%  \section{The harpoon package}
%  This package is quite old developed in 1994 by Tobias Kuipers.
%  \overleftharp{This is some text}, 
%  \overrightharp {Other text}. I do not know if any ever uses it, but is lightweight,
%  so I included it here.
%
%    \begin{macrocode}
\newif\ifHARP
\newcommand\HARP{\pkgname{harpoon}}
\IfStyFileExists{harpoon}
  {\HARPtrue\usepackage{harpoon}}
  {}

%    \end{macrocode}
%
% \section{texcomp and mathcomp}
%
% We use the \pkg{texcomp} package for special symbols, such as |\checkmark|
%  \( \mho \Diamond \leadsto \rhd \diamond \Diamond \). The sort of the standard package
% latexsym is not loaded as it duplicates functionality of the if one makes use of the packages |amsfonts| or |amssymb|.
%
% {textcomp} 
% {mathcomp} The package |textcomp| is part of the \LaTeXe
% distribution. The description of the package
% on ctan can give the erroneous idea that it is obsolete; on the contrary 
% is part of the original distribution.textcomp is not obsolete, it's just not distributed as extra package any more since it's distributed with the basic LaTeX distribution. The \pkg{mathcomp} package defines macros for using some of these text... symbols with math and the abbreviation tc...
%
%  The symbols are used by calling them by their name. E.g. \ifxetex\else\textleaf\fi:
%  \verb|\textleaf|.
%  
%  In mathematics the package \verb|mathcomp| works. Then the prefix
%  \verb|text| is replaced by \verb|tc|, for \emph{t}ext\emph{c}omp:
%  |tcohm|  
% 
% The |mathcomp| package takes one option to describe the
% font to be used. We use |rmdfault| as the option to default to
% the \cs{rmdefault} font.
% 
%    \begin{macrocode}
%  Redefine the LaTeX commands that are replaced by textcomp.
%  This was swiped right out of ltoutenc.dtx, but with "\text..."
%  changed to "\ltext...". This also conflicts with fontspec
%  better to handle the errors 
\DeclareTextCommandDefault{\ltextcopyright}{\textcircled{c}}
\DeclareTextCommandDefault{\ltextregistered}{\textcircled{\scshape r}}
\DeclareTextCommandDefault{\ltexttrademark}{\textsuperscript{TM}}
\DeclareTextCommandDefault{\ltextordfeminine}{\textsuperscript{a}}
\DeclareTextCommandDefault{\ltextordmasculine}{\textsuperscript{o}}
%
\DeclareTextSymbol{\textcentoldstyle}{TS1}{'213}
\DeclareTextSymbolDefault{\textcentoldstyle}{TS1}
\DeclareTextSymbol{\textdollaroldstyle}{TS1}{'212}
\DeclareTextSymbolDefault{\textdollaroldstyle}{TS1}
\DeclareTextSymbol{\textguarani}{TS1}{'220}
\DeclareTextSymbolDefault{\textguarani}{TS1}
% Not many fonts support these code-points yet.
% So leave these undefined at present.  from fontspec

\def\UTFDeclarations{%
  \DeclareUTFcharacter[\UTFencname]{x3008}{\textlangle}
  \DeclareUTFcharacter[\UTFencname]{x3009}{\textrangle}
  \DeclareUTFcharacter[\UTFencname]{x301A}{\textlbrackdbl}
  \DeclareUTFcharacter[\UTFencname]{x301B}{\textrbrackdbl}

% old-style numbers

  \DeclareUTFcharacter[\UTFencname]{xFF10}{\textzerooldstyle}
  \DeclareUTFcharacter[\UTFencname]{xFF11}{\textoneoldstyle}
  \DeclareUTFcharacter[\UTFencname]{xFF12}{\texttwooldstyle}
  \DeclareUTFcharacter[\UTFencname]{xFF13}{\textthreeoldstyle}
  \DeclareUTFcharacter[\UTFencname]{xFF14}{\textfouroldstyle}
  \DeclareUTFcharacter[\UTFencname]{xFF15}{\textfiveoldstyle}
  \DeclareUTFcharacter[\UTFencname]{xFF16}{\textsixoldstyle}
  \DeclareUTFcharacter[\UTFencname]{xFF17}{\textsevenoldstyle}
  \DeclareUTFcharacter[\UTFencname]{xFF18}{\texteightoldstyle}
  \DeclareUTFcharacter[\UTFencname]{xFF19}{\textnineoldstyle}

% For circled letters and small numbers
%

  \DeclareEncodedCompositeCharacter{\UTFencname}{\textcircled}{20DD}{25EF}
  \DeclareUTFcomposite[\UTFencname]{x2460}{\textcircled}{1}
  \DeclareUTFcomposite[\UTFencname]{x2461}{\textcircled}{2}
  \DeclareUTFcomposite[\UTFencname]{x2462}{\textcircled}{3}
  \DeclareUTFcomposite[\UTFencname]{x2463}{\textcircled}{4}
  \DeclareUTFcomposite[\UTFencname]{x2464}{\textcircled}{5}
  \DeclareUTFcomposite[\UTFencname]{x2465}{\textcircled}{6}
  \DeclareUTFcomposite[\UTFencname]{x2466}{\textcircled}{7}
  \DeclareUTFcomposite[\UTFencname]{x2467}{\textcircled}{8}
  \DeclareUTFcomposite[\UTFencname]{x2468}{\textcircled}{9}
  \DeclareUTFcomposite[\UTFencname]{x2469}{\textcircled}{10}
  \DeclareUTFcomposite[\UTFencname]{x246A}{\textcircled}{11}
  \DeclareUTFcomposite[\UTFencname]{x246B}{\textcircled}{12}
  \DeclareUTFcomposite[\UTFencname]{x246C}{\textcircled}{13}
  \DeclareUTFcomposite[\UTFencname]{x246D}{\textcircled}{14}
  \DeclareUTFcomposite[\UTFencname]{x246E}{\textcircled}{15}
  \DeclareUTFcomposite[\UTFencname]{x246F}{\textcircled}{16}
  \DeclareUTFcomposite[\UTFencname]{x2470}{\textcircled}{17}
  \DeclareUTFcomposite[\UTFencname]{x2471}{\textcircled}{18}
  \DeclareUTFcomposite[\UTFencname]{x2472}{\textcircled}{19}
  \DeclareUTFcomposite[\UTFencname]{x2473}{\textcircled}{20}
  \DeclareUTFcomposite[\UTFencname]{x24B6}{\textcircled}{A}
  \DeclareUTFcomposite[\UTFencname]{x24B7}{\textcircled}{B}
  \DeclareUTFcomposite[\UTFencname]{x24B8}{\textcircled}{C}
  \DeclareUTFcomposite[\UTFencname]{x24B9}{\textcircled}{D}
  \DeclareUTFcomposite[\UTFencname]{x24BA}{\textcircled}{E}
  \DeclareUTFcomposite[\UTFencname]{x24BB}{\textcircled}{F}
  \DeclareUTFcomposite[\UTFencname]{x24BC}{\textcircled}{G}
  \DeclareUTFcomposite[\UTFencname]{x24BD}{\textcircled}{H}
  \DeclareUTFcomposite[\UTFencname]{x24BE}{\textcircled}{I}
  \DeclareUTFcomposite[\UTFencname]{x24BF}{\textcircled}{J}
  \DeclareUTFcomposite[\UTFencname]{x24C0}{\textcircled}{K}
  \DeclareUTFcomposite[\UTFencname]{x24C1}{\textcircled}{L}
  \DeclareUTFcomposite[\UTFencname]{x24C2}{\textcircled}{M}
  \DeclareUTFcomposite[\UTFencname]{x24C3}{\textcircled}{N}
  \DeclareUTFcomposite[\UTFencname]{x24C4}{\textcircled}{O}
  \DeclareUTFcomposite[\UTFencname]{x24C5}{\textcircled}{P}
  \DeclareUTFcomposite[\UTFencname]{x24C6}{\textcircled}{Q}
  \DeclareUTFcomposite[\UTFencname]{x24C7}{\textcircled}{R}
  \DeclareUTFcomposite[\UTFencname]{x24C8}{\textcircled}{S}
  \DeclareUTFcomposite[\UTFencname]{x24C9}{\textcircled}{T}
  \DeclareUTFcomposite[\UTFencname]{x24CA}{\textcircled}{U}
  \DeclareUTFcomposite[\UTFencname]{x24CB}{\textcircled}{V}
  \DeclareUTFcomposite[\UTFencname]{x24CC}{\textcircled}{W}
  \DeclareUTFcomposite[\UTFencname]{x24CD}{\textcircled}{X}
  \DeclareUTFcomposite[\UTFencname]{x24CE}{\textcircled}{Y}
  \DeclareUTFcomposite[\UTFencname]{x24CF}{\textcircled}{Z}
  \DeclareUTFcomposite[\UTFencname]{x24D0}{\textcircled}{a}
  \DeclareUTFcomposite[\UTFencname]{x24D1}{\textcircled}{b}
  \DeclareUTFcomposite[\UTFencname]{x24D2}{\textcircled}{c}
  \DeclareUTFcomposite[\UTFencname]{x24D3}{\textcircled}{d}
  \DeclareUTFcomposite[\UTFencname]{x24D4}{\textcircled}{e}
  \DeclareUTFcomposite[\UTFencname]{x24D5}{\textcircled}{f}
  \DeclareUTFcomposite[\UTFencname]{x24D6}{\textcircled}{g}
  \DeclareUTFcomposite[\UTFencname]{x24D7}{\textcircled}{h}
  \DeclareUTFcomposite[\UTFencname]{x24D8}{\textcircled}{i}
  \DeclareUTFcomposite[\UTFencname]{x24D9}{\textcircled}{j}
  \DeclareUTFcomposite[\UTFencname]{x24DA}{\textcircled}{k}
  \DeclareUTFcomposite[\UTFencname]{x24DB}{\textcircled}{l}
  \DeclareUTFcomposite[\UTFencname]{x24DC}{\textcircled}{m}
  \DeclareUTFcomposite[\UTFencname]{x24DD}{\textcircled}{n}
  \DeclareUTFcomposite[\UTFencname]{x24DE}{\textcircled}{o}
  \DeclareUTFcomposite[\UTFencname]{x24DF}{\textcircled}{p}
  \DeclareUTFcomposite[\UTFencname]{x24E0}{\textcircled}{q}
  \DeclareUTFcomposite[\UTFencname]{x24E1}{\textcircled}{r}
  \DeclareUTFcomposite[\UTFencname]{x24E2}{\textcircled}{s}
  \DeclareUTFcomposite[\UTFencname]{x24E3}{\textcircled}{t}
  \DeclareUTFcomposite[\UTFencname]{x24E4}{\textcircled}{u}
  \DeclareUTFcomposite[\UTFencname]{x24E5}{\textcircled}{v}
  \DeclareUTFcomposite[\UTFencname]{x24E6}{\textcircled}{w}
  \DeclareUTFcomposite[\UTFencname]{x24E7}{\textcircled}{x}
  \DeclareUTFcomposite[\UTFencname]{x24E8}{\textcircled}{y}
  \DeclareUTFcomposite[\UTFencname]{x24E9}{\textcircled}{z}
  \DeclareUTFcomposite[\UTFencname]{x24EA}{\textcircled}{0}
  \DeclareUTFcharacter[\UTFencname]{x25EF}{\textbigcircle}
  \DeclareUTFcomposite[\UTFencname]{x3251}{\textcircled}{21}
  \DeclareUTFcomposite[\UTFencname]{x3252}{\textcircled}{22}
  \DeclareUTFcomposite[\UTFencname]{x3253}{\textcircled}{23}
  \DeclareUTFcomposite[\UTFencname]{x3254}{\textcircled}{24}
  \DeclareUTFcomposite[\UTFencname]{x3255}{\textcircled}{25}
  \DeclareUTFcomposite[\UTFencname]{x3256}{\textcircled}{26}
  \DeclareUTFcomposite[\UTFencname]{x3257}{\textcircled}{27}
  \DeclareUTFcomposite[\UTFencname]{x3258}{\textcircled}{28}
  \DeclareUTFcomposite[\UTFencname]{x3259}{\textcircled}{29}
  \DeclareUTFcomposite[\UTFencname]{x325A}{\textcircled}{30}
  \DeclareUTFcomposite[\UTFencname]{x325B}{\textcircled}{31}
  \DeclareUTFcomposite[\UTFencname]{x325C}{\textcircled}{32}
  \DeclareUTFcomposite[\UTFencname]{x325D}{\textcircled}{33}
  \DeclareUTFcomposite[\UTFencname]{x325E}{\textcircled}{34}
  \DeclareUTFcomposite[\UTFencname]{x325F}{\textcircled}{35}
  \DeclareUTFcomposite[\UTFencname]{x32B1}{\textcircled}{36}
  \DeclareUTFcomposite[\UTFencname]{x32B2}{\textcircled}{37}
  \DeclareUTFcomposite[\UTFencname]{x32B3}{\textcircled}{38}
  \DeclareUTFcomposite[\UTFencname]{x32B4}{\textcircled}{39}
  \DeclareUTFcomposite[\UTFencname]{x32B5}{\textcircled}{40}
  \DeclareUTFcomposite[\UTFencname]{x32B6}{\textcircled}{41}
  \DeclareUTFcomposite[\UTFencname]{x32B7}{\textcircled}{42}
  \DeclareUTFcomposite[\UTFencname]{x32B8}{\textcircled}{43}
  \DeclareUTFcomposite[\UTFencname]{x32B9}{\textcircled}{44}
  \DeclareUTFcomposite[\UTFencname]{x32BA}{\textcircled}{45}
  \DeclareUTFcomposite[\UTFencname]{x32BB}{\textcircled}{46}
  \DeclareUTFcomposite[\UTFencname]{x32BC}{\textcircled}{47}
  \DeclareUTFcomposite[\UTFencname]{x32BD}{\textcircled}{48}
  \DeclareUTFcomposite[\UTFencname]{x32BE}{\textcircled}{49}
  \DeclareUTFcomposite[\UTFencname]{x32BF}{\textcircled}{50}
}
\ifengine{\UTFDeclarations}{\UTFDeclarations}{}
%
%    \end{macrocode}
% \section{textcomp}
% The package \pkgname{mathcomp} loads the \pkgname{textcomp} in
% order to define the |TS1| encoding.\FIRE revisit, certainly we may not
% need them in a unicode enabled font.
%
%    \begin{macrocode}
\ifxetex\else\ifluatex\else
  \RequirePackage{textcomp}
  \PassOptionsToPackage{mathcomp}{rmdefault}
  \RequirePackage{mathcomp}
  \fi
\fi
%    \end{macrocode}
% 
% 
%
% \section{The exscale package}
%
% 
% \index{Packages>exscale}
%
%This package implements scaling of the math extension font |cmex|. If this package is used the site needs 
% scaled versions of the font |cmex10| in the sizes 10.95pt, 12pt, 14.4pt, 17.28pt, 20.74pt, and 24.88pt (corresponding 
% to standard magsteps using |\magstephalf|, and |\magstep1| through |\magstep5|). 
% Additionally |cmex| variants for the sizes |7pt| to |9pt| are necessary. These fonts are part of the AMS font packÂ­age.
%
%    \begin{macrocode}
\ifxetex
    \else
     \ifluatex
     \else
       %\RequirePackage{exscale}
       %\RequirePackage{relsize}
     \fi
\fi
%    \end{macrocode}
% 
%
% An example to scale math using the \pkg{exscale} package. Perhaps for
% using slides etc.
% ^^A\begin{minipage}[c]{1.0\textwidth}%
%^^A \centering\large\[
%^^A\int_{-1}^{+1}\frac{f(x)}{\sqrt{1-x^{2}}}\,\mathrm{d}x\approx\frac{\pi}{n}%
%^^A\sum_{i=1}^{n}f\left(\cos\left(\frac{2i-1}{2n}\right)\right)\]
%^^A\end{minipage}%
%
% \section{textcomp}
%
% {tabitem} The \pkgname{textcomp} 
%  provides a nice helper macro for typesetting symbols in normal, bold
%  and italics. I must think of a more semantic name than |tabitem|.
%
%    \begin{macrocode}
\newcommand{\tabitem}[2]{%
  \texttt{\symbol{`\\}#1} & \@nameuse{#1} 
   & \bfseries\@nameuse{#1}& \itshape\@nameuse{#1}
   \ifthenelse{\equal{#2}{}}
    {}
    {& \texttt{\symbol{`\\}#2} & \@nameuse{#2} 
     & \bfseries\@nameuse{#2}
     & \itshape\@nameuse{#2} \\}
}
%    \end{macrocode}
% 
%
%    \begin{macrocode}
%\setlength{\LTleft}{0pt}%
%\setlength{\LTright}{0pt}
%\noindent
%\begin{longtable}{%
%    @{}ll@{}l@{}l@{\extracolsep{\fill}}l!{\extracolsep{0pt}}l@{}l@{}l@{}}
%  \multicolumn{4}{c}{\textbf{Symbol}} & 
%  \multicolumn{4}{c}{\textbf{Symbol}} \\ 
%  \midrule
%\endhead
%
%%  \tabitem{textcapitalcompwordmark}{textascendercompwordmark}
%  \tabitem{textquotestraightbase}{textquotestraightdblbase}
%  \tabitem{texttwelveudash}{textthreequartersemdash}
%  \tabitem{textleftarrow}{textrightarrow}
%  \tabitem{textblank}{textdollar}
%  \tabitem{textquotesingle}{textasteriskcentered}
%  \tabitem{textdblhyphen}{textfractionsolidus}
%  \tabitem{textzerooldstyle}{textoneoldstyle}
%  \tabitem{texttwooldstyle}{textthreeoldstyle}
%  \tabitem{textfouroldstyle}{textfiveoldstyle}
%  \tabitem{textsixoldstyle}{textsevenoldstyle}
%  \tabitem{texteightoldstyle}{textnineoldstyle}
%  \tabitem{textlangle}{textminus}
%  \tabitem{textrangle}{textmho}
%  \tabitem{textbigcircle}{textohm}
%  \tabitem{textlbrackdbl}{textrbrackdbl}
%  \tabitem{textuparrow}{textdownarrow}
%  \tabitem{textasciigrave}{textborn}
%  \tabitem{textdivorced}{textdied}
%  \tabitem{textleaf}{textmarried}
%  \tabitem{textmusicalnote}{texttildelow}
%  \tabitem{textdblhyphenchar}{textasciibreve}
%  \tabitem{textasciicaron}{textgravedbl}
%  \tabitem{textacutedbl}{textdagger}
%  \tabitem{textdaggerdbl}{textbardbl}
%  \tabitem{textperthousand}{textbullet}
%  \tabitem{textcelsius}{textdollaroldstyle}
%  \tabitem{textcentoldstyle}{textflorin}
%  \tabitem{textcolonmonetary}{textwon}
%  \tabitem{textnaira}{textguarani}
%  \tabitem{textpeso}{textlira}
%  \tabitem{textrecipe}{textinterrobang}
%  \tabitem{textinterrobangdown}{textdong}
%  \tabitem{texttrademark}{textpertenthousand}
%  \tabitem{textpilcrow}{textbaht}
%  \tabitem{textnumero}{textdiscount}
%  \tabitem{textestimated}{textopenbullet}
%  \tabitem{textservicemark}{textlquill}
%  \tabitem{textrquill}{textcent}
%  \tabitem{textsterling}{textcurrency}
%^^A  \tabitem{textyen}{textbrokenbar}
%  \tabitem{textsection}{textasciidieresis}
%  \tabitem{textcopyright}{textordfeminine}
%  \tabitem{textcopyleft}{textlnot}
%  \tabitem{textcircledP}{textregistered}
%  \tabitem{textasciimacron}{textdegree}
%  \tabitem{textpm}{texttwosuperior}
%  \tabitem{textthreesuperior}{textasciiacute}
%  \tabitem{textmu}{textparagraph}
%  \tabitem{textperiodcentered}{textreferencemark}
%  \tabitem{textonesuperior}{textordmasculine}
%  \tabitem{textsurd}{textonequarter}
%  \tabitem{textonehalf}{textthreequarters}
%  \tabitem{texteuro}{texttimes}
%  \tabitem{textdiv}{}
%
%
%\end{longtable}
%    \end{macrocode}
%
% \section{wasysym} 
%\url{http://tex.stackexchange.com/questions/80053/wasysym-symbols-render-to-something-different}
%    \begin{macrocode}
\ExplSyntaxOn
\newif\ifWASY
\newcommand\WASY{\pkgname{wasysym}}
\IfStyFileExists{wasysym}
  {\WASYtrue
   \save_symbol:{lightning}
   \save_symbol:{Box}
   \save_symbol:{Diamond}
   \save_symbol:{clock}
   \RequirePackage{wasysym}
   \restore_symbol:{WASY}{lightning}
   \restore_symbol:{WASY}{Box}
   \restore_symbol:{WASY}{Diamond}
   \restore_symbol:{WASY}{clock}
  }
  {}
\ExplSyntaxOff  
%    \end{macrocode}
% 
%
% \section{pifont}
% Using symbol fonts is supported by means of the 
% \pkgname{pifont} package, providing commands for using the Zapf Dingbats font,
% as well as an interface to other families.\footnote{%
% This section was adopted, with minor changes, 
% from \cite{Mittelbach2004}}.
% 
%    \begin{macrocode}
\newif\ifPI
\newcommand\PI{\pkgname{pifont}}
\IfStyFileExists{pifont}
  {\PItrue\RequirePackage{pifont}}
  {}  
%    \end{macrocode}
% 
% 
% 
%\begin{table}[bt!]
% \bgroup
% \let\oldding\ding
% \def\ding#1{{\color{teal}\oldding{#1}}}
% 
%  \caption{The characters in the postscript font Zapf Dingbats} 
%  \label{tab:dingbats}
%  \centering
%  
%{\footnotesize
%\begin{tabular}{|rr|rr|rr|rr|rr|rr|rr|rr|}
%\hline
%32 &  \ding{32} & 33 &  \ding{33} & 34 &  \ding{34} & 35 &  \ding{35} & 36 &  \ding{36} & 37 &  \ding{37} & 38 &  \ding{38} & 39 &  \ding{39}  \\ \hline
%40 &  \ding{40} & 41 &  \ding{41} & 42 &  \ding{42} & 43 &  \ding{43} & 44 &  \ding{44} & 45 &  \ding{45} & 46 &  \ding{46} & 47 &  \ding{47}  \\ \hline
%48 &  \ding{48} & 49 &  \ding{49} & 50 &  \ding{50} & 51 &  \ding{51} & 52 &  \ding{52} & 53 &  \ding{53} & 54 &  \ding{54} & 55 &  \ding{55}  \\ \hline
%56 &  \ding{56} & 57 &  \ding{57} & 58 &  \ding{58} & 59 &  \ding{59} & 60 &  \ding{60} & 61 &  \ding{61} & 62 &  \ding{62} & 63 &  \ding{63}  \\ \hline
%64 &  \ding{64} & 65 &  \ding{65} & 66 &  \ding{66} & 67 &  \ding{67} & 68 &  \ding{68} & 69 &  \ding{69} & 70 &  \ding{70} & 71 &  \ding{71}  \\ \hline
%72 &  \ding{72} & 73 &  \ding{73} & 74 &  \ding{74} & 75 &  \ding{75} & 76 &  \ding{76} & 77 &  \ding{77} & 78 &  \ding{78} & 79 &  \ding{79}  \\ \hline
%80 &  \ding{80} & 81 &  \ding{81} & 82 &  \ding{82} & 83 &  \ding{83} & 84 &  \ding{84} & 85 &  \ding{85} & 86 &  \ding{86} & 87 &  \ding{87}  \\ \hline
%88 &  \ding{88} & 89 &  \ding{89} & 90 &  \ding{90} & 91 &  \ding{91} & 92 &  \ding{92} & 93 &  \ding{93} & 94 &  \ding{94} & 95 &  \ding{95}  \\ \hline
%96 &  \ding{96} & 97 &  \ding{97} & 98 &  \ding{98} & 99 &  \ding{99} & 100 &  \ding{100} & 101 &  \ding{101} & 102 &  \ding{102} & 103 &  \ding{103}  \\ \hline
%104 &  \ding{104} & 105 &  \ding{105} & 106 &  \ding{106} & 107 &  \ding{107} & 108 &  \ding{108} & 109 &  \ding{109} & 110 &  \ding{110} & 111 &  \ding{111}  \\ \hline
%112 &  \ding{112} & 113 &  \ding{113} & 114 &  \ding{114} & 115 &  \ding{115} & 116 &  \ding{116} & 117 &  \ding{117} & 118 &  \ding{118} & 119 &  \ding{119}  \\ \hline
%120 &  \ding{120} & 121 &  \ding{121} & 122 &  \ding{122} & 123 &  \ding{123} & 124 &  \ding{124} & 125 &  \ding{125} & 126 &  \ding{126} &     &              \\ \hline
%    &             & 161 &  \ding{161} & 162 &  \ding{162} & 163 &  \ding{163} & 164 &  \ding{164} & 165 &  \ding{165} & 166 &  \ding{166} & 167 &  \ding{167}  \\ \hline
%168 &  \ding{168} & 169 &  \ding{169} & 170 &  \ding{170} & 171 &  \ding{171} & 172 &  \ding{172} & 173 &  \ding{173} & 174 &  \ding{174} & 175 &  \ding{175}  \\ \hline
%176 &  \ding{176} & 177 &  \ding{177} & 178 &  \ding{178} & 179 &  \ding{179} & 180 &  \ding{180} & 181 &  \ding{181} & 182 &  \ding{182} & 183 &  \ding{183}  \\ \hline
%184 &  \ding{184} & 185 &  \ding{185} & 186 &  \ding{186} & 187 &  \ding{187} & 188 &  \ding{188} & 189 &  \ding{189} & 190 &  \ding{190} & 191 &  \ding{191}  \\ \hline
%192 &  \ding{192} & 193 &  \ding{193} & 194 &  \ding{194} & 195 &  \ding{195} & 196 &  \ding{196} & 197 &  \ding{197} & 198 &  \ding{198} & 199 &  \ding{199}  \\ \hline
%200 &  \ding{200} & 201 &  \ding{201} & 202 &  \ding{202} & 203 &  \ding{203} & 204 &  \ding{204} & 205 &  \ding{205} & 206 &  \ding{206} & 207 &  \ding{207}  \\ \hline
%208 &  \ding{208} & 209 &  \ding{209} & 210 &  \ding{210} & 211 &  \ding{211} & 212 &  \ding{212} & 213 &  \ding{213} & 214 &  \ding{214} & 215 &  \ding{215}  \\ \hline
%216 &  \ding{216} & 217 &  \ding{217} & 218 &  \ding{218} & 219 &  \ding{219} & 220 &  \ding{220} & 221 &  \ding{221} & 222 &  \ding{222} & 223 &  \ding{223}  \\ \hline
%224 &  \ding{224} & 225 &  \ding{225} & 226 &  \ding{226} & 227 &  \ding{227} & 228 &  \ding{228} & 229 &  \ding{229} & 230 &  \ding{230} & 231 &  \ding{231}  \\ \hline
%232 &  \ding{232} & 233 &  \ding{233} & 234 &  \ding{234} & 235 &  \ding{235} & 236 &  \ding{236} & 237 &  \ding{237} & 238 &  \ding{238} & 239 &  \ding{239}  \\ \hline
%    &             & 241 &  \ding{241} & 242 &  \ding{242} & 243 &  \ding{243} & 244 &  \ding{244} & 245 &  \ding{245} & 246 &  \ding{246} & 247 &  \ding{247}  \\ \hline
%248 &  \ding{248} & 249 &  \ding{249} & 250 &  \ding{250} & 251 &  \ding{251} & 252 &  \ding{252} & 253 &  \ding{253} & 254 &  \ding{254} &     &              \\ \hline
%\end{tabular}
% \let\ding\oldding
%\egroup
%\par}
% \label{tbl:dingbats}
% \end{table}
%
%
%    
% \section{marvosym}
%
% The package \ctan{marvosym} underwent a major rewrite for the 2000/05/01 version, adding
% a large number of new symbols.  If it looks like we have only the
% older version, pretend we don't have it at all. The tables illustrating the available symbols have been extracted from \citep{marvosym}.
% 2012-04-06 Version 2.2a: Added PDF with glyph tables (reproduction of Martinâ€™s PDF
% document in TEX by Heiko Oberdiek). Replaced |\EMail| by |\Email| and
% |\CheckedBox| by |\Checkedbox| due to name clashes with other \latex packages
% \FIRE
%
%    \begin{macrocode}  
\ExplSyntaxOn
\newif\ifMARV
\newcommand\MARV{\pkgname{marvosym}}
\IfStyFileExists*{marvosym}
  {\save_symbol:{CheckedBox}
   \RequirePackage{marvosym}[2000/05/01]% Major rewrite at this version.
   \global\MARVtrue
   \restore_symbol:{CheckedBox}{CheckedBox}
   \@ifundefined{Denarius} % \Denarius is a newer symbol.
     {\global\MARVfalse}
     {}
   \@ifundefined{MVRightarrow}% \Mvrightarrow is an even newer symbol.
     {\global\MARVfalse}
     {}
  }
  {}
\ExplSyntaxOff  
%    \end{macrocode}
% 
%


%
%
% \section{bbding} The package provides an easy-to-use interface to the \texttt{bbding} symbol
%   set developed by \emph{Karel Horak}.  The naming conventions is made
%   close to \emph{Zapf-Dingbat} as it can be found in \texttt{Wordperfect
%   6.0}, however, sometimes shortening the names.
%   \FIRE
%    \begin{macrocode} 
\ExplSyntaxOn 
\newif\ifDING
\newcommand\DING{\pkgname{bbding}}
\IfStyFileExists{bbding}
  {\DINGtrue
   \save_symbol:{Cross} 
   \save_symbol:{Square}
   \RequirePackage{bbding}
   \restore_symbol:{ding}{Cross} 
   \restore_symbol:{ding}{Square}
  }
  {}     

\newcount\c@lumnsleft
\newcount\t@talcolumns
\newdimen\c@lumnwidth
\newenvironment{commandsInColumns}[1]{%
  \t@talcolumns=#1\advance\t@talcolumns-1\c@lumnsleft=\t@talcolumns%
  \c@lumnwidth=-2em\multiply\c@lumnwidth by \t@talcolumns%
  \advance\c@lumnwidth by\hsize \divide\c@lumnwidth by #1%
  \vskip\z@     % Ensures vertical mode
  \catcode`\^^M=12%
  \hbox\bgroup%
  \st@rtenv%
}
{\ifnum\c@lumnsleft=\t@talcolumns \egroup
 \else \egroup \fi}
%
{\catcode`\^^M=12%
 \gdef\st@rtenv{\@ifnextchar^^M{\dr@pnext\doNextComm@nd}{\doNextComm@nd}}%
 \gdef\setComm@nd#1#2^^M{%
   \hbox to \c@lumnwidth%
     {\hbox to .5cm{#1\hss}\hbox{\expandafter\setn@me\string#1.}\hss}%
   \advance\c@lumnsleft-1%
   \ifnum\c@lumnsleft>0%
     \hskip2em%
   \else%
     \egroup%
     \hbox\bgroup%
     \c@lumnsleft\t@talcolumns%
   \fi%
   \doNextComm@nd%
  }}
\def\dr@pnext#1#2{#1}
\def\doNextComm@nd{\@ifnextchar\end{}{\setComm@nd}}%
\def\setn@me#1#2.{\CSname{#2}}
%
%
\newcommand{\CSname}[1]{\texttt{\protect\bslash#1}}
\ExplSyntaxOff
%    \end{macrocode}
% 
%\section{Eurosym}
% The new European currency symbol for the Euro implemented in Metafont, using the official European Commission dimensions, and providing several shapes (normal, slanted, bold, outline). The package also includes a LaTeX package which defines the macro, pre-compiled tfm files, and documentation. We keep it here, with the option max to enable comparisons with the
% Comprehensive.
%
%    \begin{macrocode}
\ExplSyntaxOn
\newif\ifEUSYM\EUSYMfalse
\newcommand\EUSYM{\pkgname{eurosym}}
\IfStyFileExists{eurosym}
  {\EUSYMtrue
   \save_symbol:{EUR}
   \usepackage{eurosym}
   \restore_symbol:{MARV}{EUR}
  }
  {}
%    \end{macrocode}
% 
% \section{esvect}
% The package \pkgname{esvect} allows typesetting vectors. Several arrows are
%  available.
%    \begin{macrocode}
\newif\ifESV\ESVfalse
\newcommand\ESV{\pkgname{esvect}}
\ExplSyntaxOff
\IfStyFileExists{esvect}
  {\ESVtrue
   \RequirePackage{esvect}
   \DeclareMathSymbol{\fldra}{\mathrel}{esvector}{'021}
   \DeclareMathSymbol{\fldrb}{\mathrel}{esvector}{'022}
   \DeclareMathSymbol{\fldrc}{\mathrel}{esvector}{'023}
   \DeclareMathSymbol{\fldrd}{\mathrel}{esvector}{'024}
   \DeclareMathSymbol{\fldre}{\mathrel}{esvector}{'025}
   \DeclareMathSymbol{\fldrf}{\mathrel}{esvector}{'026}
   \DeclareMathSymbol{\fldrg}{\mathrel}{esvector}{'027}
   \DeclareMathSymbol{\fldrh}{\mathrel}{esvector}{'030}
  }
  {}

%    \end{macrocode}
% 
% \section{Chemistry}
% Fire random errors 
%    \begin{macrocode}
  \RequirePackage{mhchem}
  \RequirePackage{chemfig}
%    \end{macrocode}

% \section{The \texttt{manfnt} package.}
% 
% The \TeX{} and metafont manuals use some special symbols not found in
% the normal CM-fonts. The \pkgname{manfnt} provides additional symbols.
% Most of these symbols will be of little use for
% the average author, but some, like the ``Dangerous Bend'' sign may be
% approriate for some textbooks. As the author states, these symbols tend
% to detract the user; I have included them for the sake of the dangerbend
% symbol. The package is currently maintained by Axel Kielhorn.
%
%    \begin{macrocode}
\newif\ifMAN
\newcommand\MAN{\pkgname{manfnt}}
\IfStyFileExists{manfnt}
  {\MANtrue\RequirePackage{manfnt}}
  {} 

%    \end{macrocode}
%
%  We also describe an environment with danger bends, just for fun.
% 
%    \begin{macrocode}    
\ExplSyntaxOn
  \newenvironment {ddanger}
 {
  \begin{trivlist}\item[]\noindent
  \begingroup\hangindent=3.5pc\hangafter=-2
  \cs_set_nopar:Npn \par{\endgraf\endgroup}
  \hbox to0pt{\hskip-\hangindent\dbend\kern2pt\dbend\hfill}\ignorespaces
 }{
  \par\end{trivlist}
 }
\ExplSyntaxOff
%    \end{macrocode}
%
% \begin{figure} \small 
%   \begin{commandsInColumns}{3}
%     \dbend
%     \lhdbend
%     \reversedvideodbend
%   \end{commandsInColumns}
% \caption{Double bend warning signs from the manfnt package.}
% \end{figure}
%
%
% I am not too sure if I should leave the package here for the long
% term or remove it, perhaps make a "bundle" for LaTeX authors. This package I normally use for the fire symbol for hot issues for my Team.
%
% \section{ifsym}
% 
%    \begin{macrocode}

\ExplSyntaxOn
\newif\ifIFS
\newcommand\IFS{\pkgname{ifsym}}
\IfStyFileExists{ifsym}
  {\IFStrue
   \save_symbol:{Letter} 
   \save_symbol:{Square} 
   \save_symbol:{Cross} 
   \save_symbol:{Sun}
   \save_symbol:{TriangleUp} \save_symbol:{TriangleDown} \save_symbol:{Circle}
   \save_symbol:{Lightning}
   \RequirePackage[alpine,clock,electronic,geometry,misc,weather]{ifsym}[2000/04/18]
   \restore_symbol:{ifs}{Letter} \restore_symbol:{ifs}{Square}
   \restore_symbol:{ifs}{Cross} \restore_symbol:{ifs}{Sun}
   \restore_symbol:{ifs}{TriangleUp} \restore_symbol:{ifs}{TriangleDown}
   \restore_symbol:{ifs}{Circle} \restore_symbol:{ifs}{Lightning}
   \DeclareRobustCommand{\allCubes}{%
     \Cube{1}~%
     \Cube{2}~%
     \Cube{3}~%
     \Cube{4}~%
     \Cube{5}~%
     \Cube{6}%
   }
  }
  {}  
\ExplSyntaxOff  
%    \end{macrocode}
% 
% The |ifsym| package can produce some fancy symbols such as \Cube{1},\Cube{6} etc. a cross \Cross
% a \TriangleUp      {\color{red}\TriangleDown}. The documentation is in postscript?  \PulseHigh \showclock{0}{45} \ifsLightning \lhdbend
%
% \subsection{Weather Symbols}
% \begin{figure}[h] \small 
% \begin{commandsInColumns}{3}
% \Sun
% \HalfSun
% \NoSun
% \Fog
% \ThinFog
% \Rain
% \WeakRain
% \Hail
% \Sleet
% \Snow
% \Lightning
% \Cloud
% \RainCloud
% \WeakRainCloud
% \SunCloud
% \SnowCloud
% \FilledCloud
% \FilledRainCloud
% \FilledWeakRainCloud
% \FilledSunCloud
% \FilledSnowCloud
%\end{commandsInColumns}
% \allCubes
% \caption{ifsym Weather symbols}
% \end{figure}
%
% \begin{figure}[h] \small 
% \begin{commandsInColumns}{3}
% \Telephone
% \SectioningDiamond
% \FilledSectioningDiamond
% \PaperPortrait
% \PaperLandscape
% \Irritant
% \Fire
% \Radiation
% \StrokeOne
% \StrokeTwo
% \StrokeThree
% \StrokeFour
% \StrokeFive
%\end{commandsInColumns}
% {\Huge\color{yellow!60}\Radiation}
% \caption{ifsym misc symbols}
% \end{figure}
%
% \begin{figure}[h] \small 
% \begin{commandsInColumns}{3}
%\Taschenuhr
%\VarTaschenuhr
%\StopWatchStart
%\StopWatchEnd
%\Interval
%\Wecker
%\VarClock
%\end{commandsInColumns}
% 
% \caption{ifsym clock option symbols symbols}
% \end{figure}
%
% \subsection{The \texttt{undertilde} package}      
%    \begin{macrocode}    
\newif\ifUTILD
\newcommand\UTILD{\pkgname{undertilde}}
\IfStyFileExists{undertilde}
  {\UTILDtrue\RequirePackage{undertilde}}
  {}
%    \end{macrocode}
%
% 
% \section{Saving files on the fly filecontents}
% We use the \pkg{phdfilecontents} package, to open and write files on disk on the fly.
% See the sample manual as to how to use. This is a hack of the \latexe |filecontents|
% in order to work harmoniously with the \pkgname{morewrites} package.
%
%    \begin{macrocode}latex
\RequirePackage{phdfilecontents}
%    \end{macrocode}   
%    
% \chapter{Utilities for programming}
% The below packages offer some good utilities that you may find useful, if you are
% going to program and develop additional macros.
%
% \section{The changepage package}
% |\strictpagecheck| can be used effectively for a number of situations, where you need to 
% know if you are on an odd or even page.
%    \begin{macrocode}
\RequirePackage{changepage}  
 
\RequirePackage{keyval}
\usepackage{xkvview}
\RequirePackage{ifmtarg}
\RequirePackage{fp}
%    \end{macrocode}
%
% \section{ifthenx}
%
%    \begin{macrocode}
\RequirePackage{ifthenx}
%    \end{macrocode}
% \section{xspace}
% A very useful package, but get to know its limitations.
%    \begin{macrocode}
\RequirePackage{xspace}
%    \end{macrocode}
%    \begin{macrocode}
\RequirePackage{xstring}
% \RequirePackage{cool, coolstr} conflicts to be resolved.
\RequirePackage{multido}
\RequirePackage{etoolbox}
\RequirePackage{parselines}
%    \end{macrocode}
%
% for testing in tutorials
%
% \section{Assertions}
% some assertions
%    \begin{macrocode}
\def\TRUE{ \meta{true code} }
\def\FALSE{ \meta{false code} }
\def\PASS{\par{\bfseries\textcolor{green!50!blue}{PASS}}\ ~}
\def\FAIL{\par{\bfseries\textcolor{red!70!black}{FAIL}}\ ~}
% upquote needs to be loaded before listings? Must test
% does not seem to matter actually...
%\RequirePackage{upquote}
%
% \section{Calculations}
% \RequirePackage{remreset}
  \RequirePackage{calc}
%    \end{macrocode}
%
% \chapter{Graphics packages}
%
% \LaTeXe provides the |picture| environment, which is by now mostly
% outdated. However it is still useful for placing text or other
% objects at absolute positions on a page. We load its successors,
% the package \pkg{pict2e} and the \pkg{picture} for maximum
% flexibility.
%
% \section{pict2e and picture}
% We also load a new kid on the block xpicture
%    \begin{macrocode}
% Used in chapter for picture environment. |pict2e| must be used before.
\RequirePackage{pict2e}
\RequirePackage{picture}
%\RequirePackage{xpicture}
%    \end{macrocode}
%     
% \section{The great and famous TikZ package}
% We have loaded |pgf| earlier in order to create the key value interface. We load
% almost all the libraries.
%    \begin{macrocode}
\RequirePackage{tikz}
\usetikzlibrary{%
  arrows,%
  calc,%
  fit,%
  patterns,%
  plotmarks,%
  shapes.geometric,%
  shapes.misc,%
  shapes.symbols,%
  shapes.arrows,%
  shapes.callouts,%
  shapes.multipart,%
  shapes.gates.logic.US,%
  shapes.gates.logic.IEC,%
  er,%
  automata,%
  backgrounds,%
  chains,%
  topaths,%
  trees,%
  petri,%
  mindmap,%
  matrix,%
  calendar,%
  folding,%
  fadings,%
  through,%
  positioning,%
  scopes,%
  decorations.fractals,%
  decorations.shapes,%
  decorations.text,%
  decorations.pathmorphing,%
  decorations.pathreplacing,%
  decorations.footprints,%
  decorations.markings,%
  shadows}
\usetikzlibrary{tikzmark}  
%    \end{macrocode}
%
% \section {pgfplots}
%    \begin{macrocode}
\RequirePackage{pgfplots}
\pgfplotsset{compat=1.11}
\RequirePackage{pgfplotstable}
%    \end{macrocode}
%
% \section{forest}
% A very useful package for all sorts of trees, especially for linguists.
%    \begin{macrocode}
\IfStyFileExists{forest}
  {\RequirePackage {forest}}
  {}
%    \end{macrocode}
%
% \section{drawstack}
%  The \pkgname{drawstack} can be used to draw stacks and other similar structures. Add it to
%  the list for computer science packags.
%
%    \begin{macrocode}
\RequirePackage{drawstack}
%    \end{macrocode}
%    
%
% \section{Float}
% 
% The float package creates additional floats on the fly.
%    \begin{macrocode}
% \RequirePackage{float}
% \RquirePackage{newfloat}
%    \end{macrocode} 
%    
% \section{Newfloat} 
%    
% This package by people{Axel Sommerfelt} offers the command \cs{DeclareFloatingEnvironment} for
% defining new floating environments which behave like figure and table. It tries
% to patch the |\chapter| or \refCom{tableofcontents} command, so we disable the option
% \option{chapterlistgaps}. It is a better option than the \pkgname{float}, described
% above. 
% 
% All other options are settable later, so this would not be an issue.\FIRE 
%    \begin{macrocode}
\ExplSyntaxOn
\tl_new:N \beforehyperhook 
\cs_gset:Npn \putbeforehyperhook #1 
  {
    \tl_gput_left:Nn \beforehyperhook {#1}
  }
\ExplSyntaxOff
%    \end{macrocode} 
%    \begin{macrocode}
% \RequirePackage[chapterlistsgaps=off]{newfloat}
%    \end{macrocode} 
% 
%  \section{Using Hyperref}
%
% 	The \pkgname{hyperref} by Sebastian Rahtz and Heiko Oberdiek \cite{hyperref} 
% 	is indespensible
% for producing electronic versions of documents. As it redefines many commands care
% needs to be taken with certain packages.
% 
% 
% \begin{docCommand}[doc updated=01-6-2015] { BeforeHyperrefHook} {\meta{seq list}}
%  Holds packages that are required to go before Hyperref. Most packages actually have to 
%  before hyperref, others are harmless.\FIRE
% \end{docCommand}
%   
% in document

%    \begin{macrocode}
\ExplSyntaxOn
\newcommand*{\BeforeHyperrefHook}
  {%
 % \putbeforehyperhook
  \RequirePackage{float}%
  \RequirePackage{newfloat}
  }
\ExplSyntaxOff
 
   % \RequirePackage{verse}} TO FIX

\newcommand*{\AfterHyperrefHook}{%
  \RequirePackage{algorithm2e}%
  \RequirePackage{fancyhdr}

  \RequirePackage{datetime} %%scrtime
  \RequirePackage{scrtime}
  \RequirePackage{datenumber}
  \RequirePackage{natbib}
%  \bibliographystyle{cambridgeauthordate}
   \bibliographystyle{abbrvnat}
  \usepackage{bibentry} % needs checking
  %\bibpunct{(}{)}{;}{a}{,}{,}
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% 4. to bring natbib.sty into line with cambridge style
%    and make 'References' the default
%
\@ifpackageloaded{natbib}{%
    \providecommand\refname{References} % internationalize?
    \providecommand\bibname{Bibliography}

\ifphd@multisty
  \def\NAT@sectionbib{on}% natbib will use \section* headings
\fi

\setlength\bibhang{1em}
\renewenvironment{thebibliography}[1]{%
% \bibsection\parindent \z@\bibpreamble\bibfont\list
  \bibsection\parindent \z@\bibpreamble\bibliosize\list
   {\@biblabel{\arabic{NAT@ctr}}}{\@bibsetup{##1}%changed
    \setcounter{NAT@ctr}{0}}%
    \ifNAT@openbib
      \renewcommand\newblock{\par}
    \else
      \renewcommand\newblock{\hskip .11em \@plus.33em \@minus.07em}%
    \fi
    \sloppy\clubpenalty4000\widowpenalty4000
    \sfcode`\.=1000\relax
    \let\citeN\cite \let\shortcite\cite
    \let\citeasnoun\cite
 }{\def\@noitemerr{%
  \PackageWarning{natbib}
     {Empty `thebibliography' environment}}%
  \endlist\vskip-\lastskip}


\ifphd@multisty
  \renewcommand\bibsection{\section{\refname %FIX ME FOR PARAMETERS
    %\ifx\@mkboth\@gobbletwo\else\markright{\refname}\fi
    }}%
\else
  \renewcommand\bibsection{\chapter{\refname %FIX ME STAR CHAPTER
    %\@mkboth{\refname}{\refname}
    }}%
\fi}{}
}
%
%    \end{macrocode}
%
%  \section{The hyperref package}
%
%  The \pkgname{hyperref} is an excellent piece of software, but the redefining of a lot
%  of kernel commands needs special treatment, so we will provide hooks for packages
%  to be loaded before and after the hyperref package.
%  
%  We call it with no options, as we will set them a bit later.
%
% \begin{docCommand}[doc updated=20-6-2015]{sethyperref} { \marg{hyperref key settings} }  
%   Command to set the hyperref package keys 
% \end{docCommand}
% 
%    \begin{macrocode}
\def\sethyperref{%
  \BeforeHyperrefHook
  \RequirePackage{hyperref}
%% hyperdoc has a problem with tcolorboc documentation
%% macros.
%%\usepackage{hypdoc}
\hypersetup{
  bookmarks,
  raiselinks,
  pageanchor,
  hyperindex=true,
  colorlinks,
  allcolors=theblue, 
  linktocpage,
  hyperfootnotes=true,
  breaklinks=true,
  anchorcolor= theblue,
  filecolor=blue,
  hypertexnames=true, %useguessable names for links
  urlcolor= theblue,
  linkcolor= theblue,
  pdftitle={My Title},
  pdfauthor={Yiannis Lazarides},
  pdfsubject={The phd LaTeX package},
  pdfkeywords={LaTeX package management, document design},
  plainpages=true%do page number anchors as plain Arabic
 }
\AfterHyperrefHook
}
%    \end{macrocode}
% 

% \section{Date and Time}
%
%    \begin{macrocode}
\ifluatex 
\newcommand\printtime[5][0]{%
   \luadirect{
      local m =require("i18n.datetime")
      m:printDayTime(#2, #3, #4, #5, #1)
    }%
 }%

\newcommand\datetimetodecimal[4]{%
   \luadirect{
      local m =require("i18n.datetime")
      m:dayTimeToDecimal(#1, #2, #3, #4)
    }%
 }%
   \newcommand\datetimetofractional[2][0]{%
   \luadirect{
      local m =require("i18n.datetime")
      m:dayTimeToFractional(#2,#1)
    }}
    
\fi
\ExplSyntaxOn
 \DeclareDocumentCommand\printtimeinterval{ m m g g }
 {
  #1\textsuperscript{d}%
  #2\textsuperscript{h}%
  \IfNoValueTF {#3} {} {#3\textsuperscript{m}}
  \IfNoValueTF {#4} {} {#4\textsuperscript{s}}
 }
 \let\PrintTimeInterval\printtimeinterval
 \ExplSyntaxOff
%\usepackage{dateiliste}
%    \end{macrocode}
%
% \section{tcolorbox}
% We load \pkgname{tcolorbox} with options theorems, skins, documentation etc
% for internal and external use.
%
% We also provide an interface, between the \pkgname{tcolorbox} documentation
% keys and our own.
% 
% The indexing keys are still to be sorted out with other sections of the
% documentation, but they seem to be working for the moment.\FIRE
% 
%    \begin{macrocode}
\let\oldcs\cs
\RequirePackage[theorems, skins, documentation,
                breakable,listings]{tcolorbox}
                \tcbset{index format=pgfchapter,
                        index actual={=},
                        index level = {>},
                        index quote = {!},
                        index german settings,
                   }
\let\cs\oldcs                
%    \end{macrocode}                
%
%\cxset {doc command color/.code = \tcbset{color command = #1}}
%\cxset {doc command color= thedoccommandcolor}

%    \begin{macrocode}
\lstdefinelanguage{extras}{morekeywords={%
      poemtitle, poemtoc, versewidth, 
      vin, poemlines,poemtitlefont, 
      ProvidesClass,IfFileExists,
      RequirePackage,ifthenelse,chapter,
      includegraphics, newarray,readarray,of
}}
\lstloadlanguages{[LaTeX]TeX, [primitive]TeX, extras}
%    \end{macrocode}
%
% Note the |gobble=1| option. We use this to make the colorboxes
% with code not to show the `\%` sign in this documentation.
% Ideally you should fork the code below and adapt it to 
% your own needs.
%
% Also note that this is the default that is to be used in
% \pkg{tcolorbox} commands.
% 
%    \begin{macrocode}

   
\newtcolorbox{scriptexample}[2][shavian]{colback=codebackground,
boxrule=0pt,toprule=0pt,colframe=white}

\newtcolorbox{commands}[2][shavian]{colback=codebackground,
boxrule=0pt,toprule=0pt,colframe=white}

\lstset{language={[LaTeX]TeX},
       escapeinside={{(*@}{@*)}}, 
       numbers=left, 
       gobble=0,
       stepnumber=1,numbersep=5pt, 
       numberstyle={\footnotesize\color{gray}},
       firstnumber=last,
       breaklines=false,
       framesep=5pt,
       basicstyle=\small\ttfamily,
       showstringspaces=false,
       stringstyle={\color{orange}\footnotesize},
       commentstyle=\color{black},
       rulecolor=\color{theshade},
       breakatwhitespace=true,
       showspaces=false, 
       xleftmargin=10pt,
       xrightmargin=10pt,
       aboveskip=3pt plus1pt minus1pt, 
       belowskip=7pt plus1pt minus1pt,  
       backgroundcolor=\color{theshade},
}
%    \end{macrocode}
%	
%	
% 	The environment |\begin{TeX}..\end{TeX}| provides a listings environment
% 	for typesetting, either TeX or LaTeX code.
% 	
%    \begin{macrocode}
\lstnewenvironment{teX}[1][]
  {\lstset{language=[LaTeX]TeX}\lstset{%
      breaklines=true,
      framesep=5pt,
      basicstyle=\verbatimfamily,
      showstringspaces=false,
      keywordstyle=\verbatimfamily,
      stringstyle={\color{gray!90}\footnotesize},
	    commentstyle={\color{gray!90}\footnotesize},
	    rulecolor=\color{theshade},
      breakatwhitespace=true,
	    xleftmargin=15pt,
	    xrightmargin=5pt,
	    aboveskip=\medskipamount,
	    belowskip=\medskipamount,
      backgroundcolor=\color{white}, #1
}}
{}


\lstnewenvironment{teXX}[1][]
  {\lstset{language=[LaTeX]TeX}\lstset{%
      breaklines=true,
      framesep=5pt,
      basicstyle=\small\ttfamily,
      showstringspaces=false,
      keywordstyle=\ttfamily\color{blue},
      stringstyle=\color{maroon},
	  commentstyle=\color{black},
	  rulecolor=\color{gray!10},
      breakatwhitespace=true,
	  xleftmargin=0pt,
	  xrightmargin=5pt,
	  aboveskip=\medskipamount,
	  belowskip=\medskipamount,
      backgroundcolor=\color{gray!10}, #1
}}
{}
%    \end{macrocode}

% {continuelinenumber} 
% {startnumberat} 
%  The macro \cs{continueLineNumber}, provides a command
%  to start the next block of code with the code numbers continuing.
%  This requires the |listings| which is already included.
%  
%    \begin{macrocode}
% Always I forget this so I created some aliases
\newcommand\continuelinenumber{\lstset{firstnumber=last}}
\newcommand\startlineat[1]{\lstset{firstnumber=#1}}
\let\numberlineat\startlineat
\let\startnumberat\numberlineat
%    \end{macrocode}
% 
% 
%
%    \begin{macrocode}
\newcommand\emphasis[2][black!80]{\lstset{emph={write, writeln,#2},escapeinside={(*@}{@*)},
   emphstyle={\verbatimfont\bfseries\textcolor{#1}}}}%changed to textbf
      
   
\lstnewenvironment{teXXX}[1][]
  {\lstset{language=[LaTeX]TeX}%
    \lstset{%
      emph={cs, use,new,seq,map,inline,eq,gincr,incr,IfNoValueF,if,If,exist,protect,nopar,gset,%
      set,undefine,define,add,gadd,remove,div,%
      round,truncate,max,min,mod,gzero,int,%
      zero,newcount,protected,msg,error,DeclareDocumentCommand},
      emphstyle=\verbatimfont\bfseries\color{black!80},
      firstnumber=last,
      stepnumber=1,
      escapeinside={{(*@}{@*)}},
      breaklines=false,
      framesep=5pt,
      basicstyle= \verbatimfont,
      showstringspaces=false,
      keywordstyle=\color{thegreen},
      stringstyle=\color{black!50},
      commentstyle=\color{black!50},
	  rulecolor=\color{gray!10},
      breakatwhitespace=true,
      showspaces=false,  % shows spacing symbol
	   %xleftmargin=0pt,
	   %xrightmargin=5pt,
	xleftmargin=15pt,
	xrightmargin=5pt,
	 %  aboveskip=0pt, % compact the code looks ugly in type
	  % belowskip=0pt,  % user responsible to insert any skips
	 aboveskip=\medskipamount,
	 belowskip=\medskipamount,
       backgroundcolor=,
       #1
}}
{}

\lstnewenvironment{phdverbatim}[1][]
  {\lstset{language=[LaTeX]TeX}%
    \lstset{%
      emph={cs, use,new,seq,map,inline,eq,gincr,incr,IfNoValueF,if,If,exist,protect,nopar,gset,%
      set,undefine,define,add,gadd,remove,div,%
      round,truncate,max,min,mod,gzero,int,%
      zero,newcount,protected,msg,error,DeclareDocumentCommand},
      emphstyle=\verbatimfont\bfseries\color{black!80},
      numbers=none,
     % stepnumber=1,
      escapeinside={{(*@}{@*)}},
      breaklines=false,
      framesep=5pt,
      basicstyle= \verbatimfont,
      showstringspaces=false,
      keywordstyle=\color{thegreen},
      stringstyle=\color{black!50},
      commentstyle=\color{black!50},
	  rulecolor=\color{gray!10},
      breakatwhitespace=true,
      showspaces=false,  % shows spacing symbol
	  xleftmargin=15pt,
	  xrightmargin=5pt,
	 %  aboveskip=0pt, % compact the code looks ugly in type
	  % belowskip=0pt,  % user responsible to insert any skips
	  aboveskip=\medskipamount,
	  belowskip=\medskipamount,
      backgroundcolor=,
       #1
}}
{}
%    \end{macrocode}
% 
%
%
%    \begin{macrocode}
\lstnewenvironment{lualisting}[1][]
{\lstset{language=[LaTeX]TeX,
  basicstyle           = \ttfamily,
  showstringspaces     = false,
  upquote              = true,
  keywordstyle         =\color{blue},
  commentstyle         =\color{black!50},
  stringstyle          =\color{black!80},
  backgroundcolor      =\color{white},
  xleftmargin          =15pt,
  xrightmargin         =5pt,
  aboveskip            =\medskipamount,
  belowskip	            =\medskipamount,
  #1}}
{}

%    \end{macrocode}
%    
%	

% 
% \subsection{algorithms}
% 
% This package must always be loaded after |hyperref|
%
%    \begin{macrocode} 
\newif\ifALGORITHM
\@ifpackageloaded{hyperref}{%
    %%\RequirePackage{algorithms}
 }
 {\typeout{Algorithm loaded}}
  \RequirePackage{algorithm2e} 
%    \end{macrocode}
%     
% \section{Common packages for structuring documents}
% The structuring commands, should ideally be loaded by the class. In case the class
% does not loaded them. We use the \pkg{multicol}, for multiple columns.
%    \begin{macrocode}
\RequirePackage{multicol}
%\RequirePackage[toc]{multitoc}
%    \end{macrocode} 
%    
% 
%

%
% \section{cancel}  
%  
% The \pkgname{ulem}  redefines emphasis so we rather
% use the cancel package.
% \cmd{\uline} \uline{important} underlined text like important
% \uuline{urgent} double-underlined text like urgent
% \uwave{boat} wavy underline like 
% boat
% \sout{wrong} line struck through word like wrong
% \xout{removed} marked over like removed
% \dashuline{dashing} dashed underline like dashing
% \dotuline{dotty} dotted underline like 
% dotty
% 
% Similar functionality is also offered by the \pkgname{soul}
%
%The following commands are defined for general use:\\[5pt]
%  \indent \begin{tabular}{l@{\quad}l}\hline\noalign{\vskip2pt}
%   |\uline{important}|  & underlined text like \uline{important}\\[1pt]
%   |\uuline{urgent}|    & double-underlined text like  \uuline{urgent}\\[1pt]
%   |\uwave{boat}|       & wavy underline like {\let\ULleaders\cleaders\uwave{boat}}\\[1pt]
%   |\sout{wrong}|       & line struck through word like \sout{wrong}\\[1pt]
%   |\xout{removed}|     & marked over like \xout{removed} \\[1pt]
%   |\dashuline{dashing}|& dashed underline like \dashuline{dashing}\\[1pt]
%   |\dotuline{dotty}|   & dotted underline like \dotuline{dotty}\\[3pt]\hline
%  \end{tabular}\\[6pt]
%   Other similar commands can be defined with relative ease by utilizing the
%   \cs{markoverwith} command provided by ulem.

%    \begin{macrocode}
\newif\ifULEM
\IfStyFileExists{ulem}
{\ULEMtrue\RequirePackage[normalem]{ulem}}
{}
%    \end{macrocode}
% 
%
%This is a nice package for canceling anything in mathmode with a slash, 
%backslash or a \verb+X+. To get
%a horizontal line we can define an additional macro called 
%with an optional argument
%for the line color (requires package \pkg{color}):
%
%^^A$ 
%^^A\slashed{D} \slashed{p} \slashed{k} \slashed{r} \slashed{A}
% ^^A\slashed{f} \FIRE
%^^A\slashed{U} \slashed{\partial}
% ^^A$
%    \begin{macrocode}
% If we have slashed.sty, use it.
\newif\ifhaveslashed
\IfStyFileExists*{slashed}
  {\haveslashedtrue\RequirePackage{slashed}}
  {}

\newif\ifhavecancel
\IfStyFileExists*{cancel}
  {\havecanceltrue\RequirePackage{cancel}}
  {}

%    \end{macrocode}
%
%
%It is no problem to redefine the cancel macros to get also colored lines. 
%    \begin{macrocode}
\newcommand\hcancel[2][red]{\setbox0=\hbox{#2}%
	\rlap{\raisebox{.45\ht0}{\textcolor{#1}{\rule{\wd0}{1pt}}}}#2}
%    \end{macrocode}
%A horizontal line for
%single characters is also decribed in section~\vref{sec:Accents}.
%
%\medskip
%\noindent
%^^A\verb+\cancel+: $f(x)=\dfrac{\left(x^2+1\right)\cancel{(x-1)}}{\cancel{(x-1)}(x+1)}$\\[0.5cm]
%^^AAA\verb+\bcancel+: $\bcancel{3}\qquad\bcancel{1234567}$\\[0.5cm]
%^^AAA\verb+\xcancel+: $\xcancel{3}\qquad\xcancel{1234567}$\\[0.5cm]
%^^AA\verb+\hcancel+: $\hcancel{3}\qquad\hcancel[red]{1234567}$
%
%\bigskip
% ^^A \begin{verbatim}
% ^^A $f(x)=\dfrac{\left(x^2+1\right)\cancel{(x-1)}}{\cancel{(x-1)}(x+1)}$\\[0.5cm]
% ^^A $\bcancel{3}\qquad\bcancel{1234567}$\\[0.5cm]
% ^^A $\xcancel{3}\qquad\xcancel{1234567}$\\[0.5cm]
% ^^A $\hcancel{3}\qquad\hcancel[red]{1234567}$
% ^^A \end{verbatim}
%
% \chapter{Archaic}
% \section{staves}
%
% This is a peculiar package providing some old Icelandic runes.
% \runictext{\alphabet}
% \staveXXXV \staveVI \runictext{abcdef}
%    \begin{macrocode}
\newif\ifSTAVE
\newcommand\STAVE{\pkgname{staves}}
\IfStyFileExists{staves}
  {\STAVEtrue\usepackage{staves}}
  {}
%    \end{macrocode}

% No point wasting a math alphabet on shuffle.
%    \begin{macrocode}
\newif\ifSHUF
\newcommand\SHUF{\pkgname{shuffle}}
\IfStyFileExists{shuffle}
  {\let\origDeclareSymbolFont=\DeclareSymbolFont
   \let\origDeclareMathSymbol=\DeclareMathSymbol
   \renewcommand{\DeclareSymbolFont}[5]{}
   \renewcommand{\DeclareMathSymbol}[4]{%
     \DeclareRobustCommand{##1}{{\usefont{U}{shuffle}{m}{n}\char##4\relax}}
   }
   \SHUFtrue
   \RequirePackage{shuffle}
   \let\DeclareSymbolFont=\origDeclareSymbolFont
   \let\DeclareMathSymbol=\origDeclareMathSymbol
  }
  {}
%    \end{macrocode}



%    \begin{macrocode}
\RequirePackage{framed}
\RequirePackage{varioref}
\RequirePackage{setspace}
%    \end{macrocode}
%    \begin{macrocode}

\providecommand*\switch[2]{{\fontfamily{#1}\selectfont #2}}
%    \end{macrocode}  

%
% \section{Producing Math Symbols}
% 
% The centernot package  provides \cs{centernot} 
% that prints the symbol \cs{not} on the
% following argument. Unlike \cs{not} the symbol is horizontally centered. The \pkgname{amssymb} and \pkgname{mathbax} provide built-in symbols. The package
%can be used for building other symbols. 
% (\seedocs{centernot}).
%    \begin{macrocode}
\newif\ifhavecenternot
\IfStyFileExists*{centernot}%
  {\havecenternottrue\RequirePackage{centernot}}
  {}
%    \end{macrocode}
%

% and spacing commands 
% which can be handy,
%
% \section{spacing}
% {hspace} This is a \textit{hairspace}, here defined 
% as 1pt.
% {hquad} This is a half squad space
%    \begin{macrocode}
\newcommand{\hairsp}{\hspace{1pt}}% hair space
\newcommand{\hquad}{\hskip0.5em\relax}% half quad space
% Sometimes, we need a little more horizontal spacing, too (used for symbols).
\newcommand{\qqquad}{\qquad\quad}
\newcommand{\TODO}{\textcolor{red}{\bf TODO!}\xspace}
\newcommand{\ie}{\textit{i.\hairsp{}e}\xspace} %removed\@
\newcommand{\eg}{\textit{e.\hairsp{}g.}\xspace}
\newcommand{\BC}[1]{\textsc{#1 BC}} %European Union Style Guide FIX
\newcommand{\AD}[1]{\textsc{AD #1}} %European Union Style Guide FIX
%    \end{macrocode}
% 
% 
%
% \subsection{Standard phantom widths}
%
%    \begin{macrocode}
\newcommand\Zi{\phantom{0}} %Z conflicts with symbols 
\newcommand\ZZ{\phantom{00}}
\newcommand\ZZZ{\phantom{000}}
\newcommand\ZZZZ{\phantom{0000}}
\providecommand\newthought[1]{%
   \addvspace{1.0\baselineskip plus 0.5ex minus 0.2ex}%
   \noindent\textsc{#1}%
}
%    \end{macrocode}
%
%  \let\equation\gather             %% See tabu and hyperref docs
%  \let\endequation\endgather
%
%
% \section{Logos and other common elements}
%
% Here we define some of the most commonly used logos. Different
% authors preferences vary. Some like to type \cmd{\TeX}, others
% myself included prefer all lowercase typing, e.g., \cmd{\tex}
% and others uppercasing the commands. We provide as many variants
% as possible. There are two or three packages providing logos. In
% the end we provide our own.
%
%    \begin{macrocode}
\newcommand{\seedocs}[1]{%
  See the #1 documentation for more information%
}
%    \end{macrocode}
% 
% \subsection{hologo}
% If you intend to have any fancy logos in bookmarks then the
% \pkgname{hologo} can be used.
% The package starts a collection of logos with 
% support for bookmarks strings. \seedocs{hologo}.
%    \begin{macrocode}
\RequirePackage{hologo}
%    \end{macrocode}
%
% \subsection{metalogo}
% 
% The package \pkgname{metalogo} exposes the spacing parameters for 
% the various TEX logos to the end
% user (and suitably redefines the logos in a generalised way). It is intended to help
% XeLaTeX users, who use various typefaces, to easily optimise the logos for each
% typeface. Still, the package remains useful if any typeface is used, not necessarily
% loaded through XeTEX. It is known that, in Plain TEXâ€™s definition of \TeX, the
% lower right serif on the â€˜Eâ€™ protrudes through the â€˜Xâ€™ in cmr and cmr; this
% package can be used to fix this sort of unacceptable grotesque.
%
%    \begin{macrocode}
\RequirePackage{metalogo}
\newcommand\TEX      {\TeX\xspace}
\let\tex\TEX
\newcommand\LUA      {Lua\xspace}
\let\lua\LUA
\newcommand\PDFTEX   {pdf\TeX\xspace}
\let\pdftex\PDFTEX
\newcommand\LUATEX   {Lua\TeX\xspace}
\let\luatex\LUATEX
\newcommand\XETEX    {\XeTeX\xspace}
\let\xetex\XETEX
\newcommand\LATEX    {\LaTeX\xspace}
\let\latex\LATEX
\newcommand\pdfLaTeX {pdf\latex}
\newcommand\LUALATEX {Lua\LaTeX\xspace}
\let\lualatex\LUALATEX
\newcommand\CONTEXT  {Con\TeX t\xspace}
\let\context\CONTEXT
\newcommand\OpenType {\texttt{Open\kern-.25ex Type}\xspace}
\let\opentype\OpenType
\def\latexe{\LaTeX\xspace}
\def\bibtex{\texttt{bibTeX\xspace}}
\newcommand{\fontdefdtx}{fontdef.dtx\xspace}
\newcommand{\postscript}{PostScript\index{PostScript}\xspace}
\newcommand{\TC}{\pkgname{textcomp}}
%\newcommand\TX{\pkgname{txfonts}}
\newcommand\PX{\pkgname{pxfonts}}
\newcommand{\TeXbook}{%
  The \TeX{}book\index{TeXbook, The=\TeX{}book, The}~\cite{Knuth:ct-a}\xspace}
\newcommand{\ctt}{%
  \texttt{comp.text.tex}%
  \index{comp.text.tex=\texttt{comp.text.tex} (newsgroup)}\xspace}
\newcommand{\fntenc}[1][]{%
  \def\firstarg{#1}%
  font encoding%
  \ifx\firstarg\empty%
    \index{font encodings}%
  \else
    \index{font encodings>\firstarg}%
  \fi
}
\DeclareRobustCommand{\xelatexInternal}{%
  \mbox{X\lower0.5ex\hbox{\kern-0.15em\reflectbox{E}}\kern-0.1em\LaTeX}}
  \newcommand{\xelatex}{\xelatexInternal\index{XeLaTeX=\xelatexInternal}\xspace}
  
\DeclareRobustCommand\otr{OTR\xspace}
\let\alltex\LaTeX
%    \end{macrocode}
% We want to remove this \FIRE
%   \begin{macrocode}
\let\doccmd\cmd
%
\def\texbook{\TeX book\xspace}
\def\alltex{(All\kern-.075em)\kern-.075em\TeX\xspace}
\def\ams{American Mathematical Society\xspace}
\def\AmS{$\mathcal{A}$\kern-.1667em\lower.5ex\hbox
    {$\mathcal{M}$}\kern-.125em$\mathcal{S}$\xspace}
\def\amsmath{\AmS{}math\xspace}
\def\amslatex{\AmS-\LaTeX\xspace}
\def\amstex{\AmS-\TeX\xspace}
%
\def\docpkg#1{\texttt{#1}}
%    \end{macrocode}
%
% The package \pkgname{scalefnt} should not be used, with XeLaTeX or LuaTeX.
% It might have some uses with older schemes.
%    \begin{macrocode}
\ifengine{}{}{\RequirePackage{scalefnt}	}
%    \end{macrocode}
%
%
% \section{Miscellaneous Packages}
%
%
% We include here everything that does not fit into the other categories.
% 
%    \begin{macrocode} 
\RequirePackage{genealogytree}
%    \end{macrocode}  
%    \begin{macrocode}
\RequirePackage{chngcntr}
\RequirePackage{fourier-orns}
%    \end{macrocode}
%
% \subsection{eso-pic}
% Since we loading pgf, many of the things that eso-pic does can be taken over by |pgf|. I am not too sure
% if we should leave this in the long-term.
%
%    \begin{macrocode}
\RequirePackage{eso-pic}
%\RequirePackage{layouts}
%    \end{macrocode}
%
% The package \pkgname{aplhalph} provides alphabetical numbering. 
%
%   \begin{macrocode}
\RequirePackage{alphalph}
\RequirePackage{fmtcount}
% 
\RequirePackage{varwidth}
%    \end{macrocode}
%
% \subsection{comment}
% The package \pkgname{comment} by \person{Victor}{Eijkhout}
% selectively in/exclude pieces of text: the user can define new comment versions,
% and each is controlled separately. Special comments can be defined where the
% user specifies the action that is to be taken with each comment line.
% This style can be used with plain TEX or LATEX, and probably most other
% packages too.
%    \begin{macrocode}
\RequirePackage{comment}
%    \end{macrocode}
%
% \subsection{textcase}
%    \begin{macrocode}
\RequirePackage{textcase}
%    \end{macrocode}
%
% \subsection{csquotes}
%    \begin{macrocode}
\RequirePackage[autostyle=false]{csquotes}
%    \end{macrocode}
%
% \subsection{csquote}
%
%    \begin{macrocode}
\RequirePackage{alltt}[1997/06/16]
%    \end{macrocode}
%
% \subsection{caption}
%
% We use the \pkgname{caption} for manipulating captions. It saves a lot of code
% and is a well maintained package.

%    \begin{macrocode}
\RequirePackage{caption} % check
%\RequirePackage{currfile} affects FileInput problematic

%\RequirePackage{filemod}
%\RequirePackage{afterpage}
%\RequirePackage{environ}
%\RequirePackage{mwe}
%    \end{macrocode}
%
% \section{pdfpages}
% If you need to insert an existing, possibly multi-page, |PDF| file into your 
% LaTeX document, whether or not the included |PDF| was compiled with LaTeX or 
% another tool, consider using the \pkg{pdfpages} package. We load it with
% the option final.
% 
%    \begin{macrocode}
\RequirePackage[final]{pdfpages}
%    \end{macrocode}
% 
%
% Include the pages you want using:
%
%    |\includepdf[pages=3-8]{sample.pdf}|
%
% \section{cclicenses}
%  The \pkgname{cclicenses} doesn't get along with textcomp's remapping of
% \textcircled to the TS1 font encoding.  Mapping it back doesn't
% seem to cause any problems. \FIRE
%
%    \begin{macrocode}
\newif\ifCCLIC
\newcommand\CCLIC{\pkgname{cclicenses}}
% 
\IfStyFileExists{cclicenses}
  {\CCLICtrue
   \RequirePackage{cclicenses}
   \DeclareTextAccentDefault{\textcircled}{OMS}
  }
  {}
%    \end{macrocode}
%  
% \section{Ornaments}      
% 
% The \pkgname{fourier} defines a lot of math symbols, but we care about only a few of
% them.  Hence, we load only the fourier-orns package and manually
% define everything else as text-mode symbols.
% 
%    \begin{macrocode} 
\ifxetex\else
\newif\ifFOUR
\newcommand\FOUR{\pkgname{fourier}}
\IfStyFileExists{fourier}
  {\FOURtrue
   \RequirePackage{fourier-orns}
   % Define single-glyph symbols.
   \DeclareFontEncoding{FMS}{}{}
   \DeclareFontSubstitution{FMS}{futm}{m}{n}
   \DeclareFontEncoding{FML}{}{}
   \DeclareFontSubstitution{FML}{futmi}{m}{it}
   \newcommand{\fourierdef}[6]{%
     \DeclareRobustCommand{##1}{{\usefont{##2}{##3}{##4}{##5}\char##6}}}
   \fourierdef{\parallelslant}{FMS}{futm}{m}{n}{134}
   \fourierdef{\nparallelslant}{FMS}{futm}{m}{n}{143}
   \fourierdef{\FOURrho}{FML}{futmi}{m}{it}{26}
   \fourierdef{\FOURvarrho}{FML}{futmi}{m}{it}{37}
   \fourierdef{\varvarrho}{FML}{futmi}{m}{it}{129}
   \fourierdef{\FOURpi}{FML}{futmi}{m}{it}{25}
   \fourierdef{\FOURvarpi}{FML}{futmi}{m}{it}{36}
   \fourierdef{\varvarpi}{FML}{futmi}{m}{it}{131}
   \fourierdef{\FOURpartial}{FML}{futmi}{m}{it}{64}
   \fourierdef{\varpartialdiff}{FML}{futmi}{m}{it}{130}
   \fourierdef{\FOURtexteuro}{TS1}{futx}{m}{n}{191}
   % Fake a math accent with text-mode commands.
   \DeclareRobustCommand{\FOURfakewidetopaccent}[5]{%
     \setbox0=\hbox{\ensuremath{##1}}%
     \setbox1=\hbox{\ensuremath{abc}}%
     \leavevmode
     \ifdim\wd0<\wd1
       \kern1pt
       \rlap{\raisebox{##2}{\makebox[\wd0]{\usefont{FMX}{futm}{m}{n}\char##3}}}%
       \kern-0.1em
       \box0
     \else
       \rlap{\raisebox{##4}{\makebox[\wd0]{\usefont{FMX}{futm}{m}{n}\char##5}}}%
       \box0
     \fi
   }

   % Manually define Fourier's extensible accents.  Note that we don't
   % bother trying to use Fourier's \mathring to construct the
   % \FOURwidering symbol.
   \DeclareFontEncoding{FMX}{}{}
   \DeclareFontSubstitution{FMX}{futm}{m}{n}
   \DeclareRobustCommand{\FOURwidearc}[1]{%
     \FOURfakewidetopaccent{##1}{0ex}{216}{0.5ex}{217}}
   \DeclareRobustCommand{\FOURwideOarc}[1]{%
     \FOURfakewidetopaccent{##1}{0ex}{228}{0.5ex}{229}}
   \DeclareRobustCommand{\FOURwideparen}[1]{%
     \FOURfakewidetopaccent{##1}{0ex}{148}{0.5ex}{150}}
   \DeclareRobustCommand{\FOURwidering}[1]{\overset{\smash{\vbox to .2ex{%
     \hbox{$\mathring{}$}}}}{\FOURwideparen{##1}}}

   % Manually define Fourier's variable-sized delimiters.
   \newcommand{\fouriercdef}[6]{%
     \DeclareRobustCommand{##1}{%
       \textvcenter{\usefont{##2}{##3}{##4}{##5}\char##6}}}
   \fouriercdef{\FOURtllbracket}{FMX}{futm}{m}{n}{133}
   \fouriercdef{\FOURdllbracket}{FMX}{futm}{m}{n}{139}
   \fouriercdef{\FOURtrrbracket}{FMX}{futm}{m}{n}{134}
   \fouriercdef{\FOURdrrbracket}{FMX}{futm}{m}{n}{140}
   \newcommand*{\FOURverticals}[1]{%
     \vbox{%
       \baselineskip=-\maxdimen
       \lineskiplimit=\maxdimen
       \lineskip=0pt%
       \usefont{FMX}{futm}{m}{n}%
       \ialign{####\cr##1}%
     }%
   }
   \DeclareRobustCommand{\FOURtVERT}{%
     \raisebox{0.5ex}{\textvcenter{\FOURverticals{\char147\cr\char147\cr}}}}
   \DeclareRobustCommand{\FOURdVERT}{%
     \raisebox{0.5ex}{\textvcenter{\FOURverticals{\char147\cr\char147\cr\char147\cr\char147\cr}}}}
  }
  {}
\fi
%    \end{macrocode} 
%
% \section{dirtree}
% 
% The \pkgname{dirtree} developed by \person{Jean-Come}{Charpentier} provides commands to draw directory-like charts. The \pkgname{forest}  is a much better
% alternative.
%    \begin{macrocode}
\IfStyFileExists{dirtree}
{
  \RequirePackage{dirtree}}
{}
%    \end{macrocode}
% 
% \subsection{The package needspace}
%
% The \pkgname{needspace} is currently mainatained by \person{Wills}{Robertson} and was originally developed by 
% \person{Peter}{Wilson} \citeyearpar{needspace}.
% It provides the commands \CMDI{\needspace}\marg{length} and \docAuxCommand{Needspace}\marg{length}, that
% will reserve an additional amount of space on the page as specified by the parameter \emph{length}. 
% 
%    \begin{macrocode}
\IfStyFileExists*{needspace}
  {\RequirePackage{needspace}}
  {\newcommand{\Needspace}[2]{\par \penalty-100\begingroup
     \setlength{\dimen@}{##2}%
     \dimen@ii\pagegoal \advance\dimen@ii-\pagetotal
     \ifdim \dimen@>\dimen@ii
       \break
     \fi\endgroup}
  }
%    \end{macrocode}
%    
% \section{Archaic Symbols}     
%
% These packages are included here, only because I have an interest in
% them in some documents I have. I understand that for the average user
% they might not be of interest. We conditionally load them based on
% a conditional and also to develop the concept of `bundles' which  I
% explain a bit later on.
%
% Uncial font
% 
% \subsection{Linear A}
%    \begin{macrocode}
\RequirePackage{uncial}
\newif\ifarchaic
  \archaictrue
\ifarchaic
%    \end{macrocode}


%    \begin{macrocode}  
\newif\ifLINA
\newcommand\LINA{\pkgname{lineara}}
\IfStyFileExists{lineara}
  {\LINAtrue\RequirePackage{lineara}}
  {}
%    \end{macrocode}
%
% \section{Linear B}
%
%    \begin{macrocode}
\newif\ifLINB
\newcommand\LINB{\pkgname{linearb}}
\IfStyFileExists{linearb}
  {\LINBtrue\RequirePackage{linearb}}
  {}
%    \end{macrocode}
%
% \section{Cypriot}
%    \begin{macrocode}
\newif\ifCYPR
\newcommand\CYPR{\pkgname{cypriot}}
\IfStyFileExists{cypriot}
  {\CYPRtrue\RequirePackage{cypriot}}
  {}
%    \end{macrocode}
%
% \section{South Arabian}
%
%    \begin{macrocode}
\newif\ifSARAB
\newcommand\SARAB{\pkgname{sarabian}}
\IfStyFileExists{sarabian}
  {\SARABtrue\RequirePackage{sarabian}}
  {}
%    \end{macrocode}
%
% \subsection{Cuneiform}
%
% Cuneiform .
%    \begin{macrocode}
\newif\ifPRSN
\newcommand\PRSN{\pkgname{oldprsn}}
\IfStyFileExists{oldprsn}
  {\PRSNtrue\RequirePackage{oldprsn}}
  {}
%    \end{macrocode}
%
% \section{Hieroglyphics}
%
%    \begin{macrocode}  
\RequirePackage{hieroglf}
%    \end{macrocode}
%
% \section{Ugaritic}
% The \pkgname{uragite}
%
%    \begin{macrocode}
\newif\ifUGAR
\newcommand\UGAR{\pkgname{ugarite}}
\RequirePackage{ugarite}
\IfStyFileExists{ugarite}
  {\UGARtrue\RequirePackage{ugarite}}
  {}
%end archaic   
%    \end{macrocode}
%
% \section{Epi-Olmec}
%
% We load the \pkgname{epiolmec} for typesetting the Epi-Olmec script. This is described
% in the scripts chapters.
%
%    \begin{macrocode}
\newif\ifOLMEC
\newif\ifscriptolmec \scriptolmectrue
\cxset{olmec/.is if=scriptolmec}
\cxset{olmec=true}
% 
\ifscriptolmec
\RequirePackage{epiolmec}
\IfStyFileExists{epiolmec}
  {\OLMECtrue\RequirePackage{epiolmec}}
  {}
\fi
%    \end{macrocode}
%
% \section{Ancient Greek}
%
% \subsection{Philokalia}
%
% We load the \pkgname{philokalia} for typesetting ancient greek using the \idxfont{philokalia} font.
% The package loads the \pkgname{xlextra}, which we do not want. It is loaded by fontspec
% as required.
% If we are using luatex this will issue a warning and abort. Better to fake it for both.
% Also modifies lettrine package !aha this took long!
%    \begin{macrocode}

\newif\ifPHILOKALIA
\def\loadphilokalia{%
  \@namedef{ver@xltxtra.sty}{}% a fake for a "xlextra" package
  \RequirePackage{philokalia}
  \IfStyFileExists{philokalia}
    {\PHILOKALIAtrue\RequirePackage{philokalia}}
    {}
}%
% provides \plk to set font
\ifengine{\loadphilokalia}{\loadphilokalia}{}
\ifPHILOKALIA
  \newfontfamily\plk{Philokalia-Regular}
  \newfontfamily\PHtitl[Script=Greek,RawFeature=+titl;grek]{Philokalia-Regular}
\fi
\def\diacritic#1{{#1\LARGE á¿¾â—Œâ—Œ\char"0375}}
\newfontfamily\greek[Script=Greek,Scale=1.0]{Arial Unicode MS}
\def\greektext#1{\greek{#1}}
%\diacritic{\greek}
 \newsavebox{\philobox}
 \savebox{\philobox}{\PHtitl Î }
%\def\philokalialettrine#1{}  
%    \end{macrocode}
%
%
%
% \section{Titles, authors, abstracts and the like}
%
% 	We want to have the option to make titles both as normally used in the |book| class
%	but also as used in articles i.e., not to emit a new page after it is invoked.
%	The definition is straight from the article class.
% {@maketitle}
%    This macro takes care of formatting the title information when we
%    have no separate title page.
%
%    We always start a new page, leave some white space and center the
%    information. The title is set in a |\LARGE| font, the author
%    names and the date in a |\large| font. CHECK THIS IF HERE
%    \begin{macrocode}
\def\@maketitle{%
  %\newpage
  \null
  \vskip 2em%
  \begin{center}%
  \let \footnote \thanks
    {\LARGE \@title \par}%
    \vskip 1.5em%
    {\large
      \lineskip .5em%
      \begin{tabular}[t]{c}%
        \@author
      \end{tabular}\par}%
    \vskip 1em%
    {\large \@date}%
  \end{center}%
  \par
  \vskip 1.5em}
\fi
%    \end{macrocode}
% 
%
% {maketitle}
%    The macro to generate titles is easily altered in order that it
%    can be used more than once (an article with many titles)\footnote{Definition is straight 	out of the |doc| package and I only added minor tweaks to only start a new page 
%	on demand.}.  In the
%    original, diverse macros were concealed after use with
%    |\relax|. We must cancel anything that may have been put
%    into |\@thanks|, etc., otherwise {\em all\/} titles will
%    carry forward any earlier such setting!
%                 \cs{@makefnmark} and \cs{@makefntext}.
%    \begin{macrocode}
\def\nonewpage{}
\def\maketitle{\par
      \begingroup \def \thefootnote {\fnsymbol {footnote}}%
      \setcounter {footnote}\z@
      \def\@makefnmark{\hbox to\z@{$\m@th^{\@thefnmark}$\hss}}%
      \long\def\@makefntext##1{\parindent 1em\noindent
            \hbox to1.8em{\hss$\m@th^{\@thefnmark}$}##1}%
      \if@twocolumn \twocolumn [\@maketitle ]%
      \else \nonewpage \global \@topnum \z@ \@maketitle \fi
%    \end{macrocode}
%    For special formatting requirements (such as in TUGboat), we use
%    pagestyle |titlepage| for this; this is later defined to be
%    |plain|, unless already defined, as, for example, by
%    |ltugboat.sty|.
%    \begin{macrocode}
       \thispagestyle{titlepage}\@thanks \endgroup
%    \end{macrocode}
%    If the driver file documents many files, we don't want parts of a
%    title of one to propagate to the next, so we have to cancel
%    these, however before we save in another macro for later
%    usage in headers, if required. :
%    \begin{macrocode}
      \setcounter {footnote}\z@
      \gdef\@date{\today}\gdef\@thanks{}%
      \let\doctitle@cx\@title
      \let\docauthor@cx\@author
%
      \gdef\@author{}\gdef\@title{}%
}
%    \end{macrocode}
% 
%
%	As you can see from below, it can now work anywhere. 
% \maketitle
% 
%  Test |\@author| and test |\doctitle@cx| |\docauthor@cx|,
% 
%
%
%% headers and footers
%    \begin{macrocode}
\cxset{
  header style/.store in=\headerstyle@cx,
% general draft rules
  rule /.is choice,
  rule on/.code={\gdef\rulewidth@cx{0.4pt}},
  rule off/.code={\gdef\rulewidth@cx{0pt}},
% headers and footers
  lhead/.code ={\lhead{#1}},
  rhead/.code={\rhead{#1}},
  chead/.code={\chead{#1}},
  lfoot/.code ={\lhead{#1}},
  cfoot/.code={\chead{#1}},
  rfoot/.code={\rhead{#1}},
  headrulewidth/.code={\renewcommand\headrulewidth{#1}},
  footrulewidth/.code={\renewcommand\footrulewidth{#1}},
}
%    \end{macrocode}
% {ps@titlepage}
%	 When a number of articles are concatenated into a
%    journal, for example, it is not usual for the title pages of such
%    documents to be formatted differently.  Therefore, a class
%    such as \textsf{ltugboat} can define this macro in advance.
%    However, if no such definition exists, we use pagestyle
%    \texttt{plain} for title pages.Again the definition is 
%	from the \pkg{doc} package.
%    \begin{macrocode}
\@ifundefined{ps@titlepage}
    {\let\ps@titlepage=\ps@plain}{}
%    \end{macrocode}
% 
%
% \section{Defining Abstracts, summaries, precis, keywords etc}
%
% \subsection{Abstract}
%
% \begin{environment}{abstract}
%
%	This is an interesting environment provided in the standard
%	classes only for articles. However too many publications 
%	require such abstracts in other sections as well so we redefine
%	it here to make it more extensive.
%	
% \begin{docEnvironment}{abstract}{}
%    When we are producing a separate titlepage we also put the
%    abstract on a page of its own. It will be centred vertically on
%    the page.
% \end{docEnvironment}
%
%    Note that this environment is not defined for books.
%         to avoid page break after abstract heading.
%
%    \begin{macrocode}
\def\abstractname{Abstract}
\@ifundefined{abstract}{%
  \newenvironment{abstract}{%
      \titlepage
      \null\vfil
      \@beginparpenalty\@lowpenalty
      \begin{center}%
        \bfseries \abstractname
        \@endparpenalty\@M
      \end{center}}%
     {\par\vfil\null}
%    \end{macrocode}
%
%    When we are not making a separate titlepage --the default for the
%    article document class-- we have to check if we are in twocolumn
%    mode. In that case the abstract is as a |\section*|, otherwise
%    the quotation environment is used to typeset the abstract.
%    \begin{macrocode}
}{}
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{chapterabstract} This is an identical environment to that
%	provided for abstract and can be used anywhere in the document. 
%    \begin{macrocode}
\def\chapterabstractname{Summary}

\newenvironment{chapterabstract}{%
   \center
     {\bfseries \chapterabstractname\vspace{-.5em}\vspace{\z@}}
   \endcenter\quotation
}{\endquotation}
%    \end{macrocode}
% \end{environment}
%
% \begin{chapterabstract}
%   \lorem
% \end{chapterabstract}
%
% \begin{docCommand} {chapterabstractname} { \meta {void}}  
%  We define a key for the summary or
% 	 or abstract at the top of a chapter. In most cases it is just called a summary.
%  One can use the \cs{chapterabstractname} to change it to another language.
% \end{docCommand}
%     
%    \begin{macrocode} 
\cxset{chapter abstractname/.store in =\chapterabstractname}
\cxset{chapter abstractname= SUMMARY}
%    \end{macrocode}
% 
% 
% \begin{docCommand}{precis} { \marg{text} } Precis is a command to be used for summaries. The same summary 
% can also be used for the toc. 
% \end{docCommand}
%    \begin{macrocode}
\newcommand\precis[1]{%
     \precis@cx{#1}%
     \precistoc@cx{#1}%
     \addvspace{20pt} % check this should be settable
}
%
\def\precis@cx#1{%
\bgroup
\small
\centering
\parbox{.8\textwidth}{#1}
\par\medskip\egroup}

\def\precistoc@cx#1{%
  \addtocontents{toc}{%
    \protect\bgroup
    \protect\parindent0pt
    \protect\color{preciscolor}#1\par
    \protect\medskip%
 \egroup}
}
%    \end{macrocode}
% 
% 
% \begin{docCommand} {addtocimage@cx} {\meta{} \meta{} \meta{}}
%  Adds an image to the ToC.
% \end{docCommand}
% 
%    \begin{macrocode}
\long\def\addtocimage@cx#1#2#3{%
\tikz[remember picture,overlay] {%
\node[anchor=east,xshift=#1,yshift=#2] at (0,0) {\includegraphics[width=.15\linewidth]{#3}};}%
}
%    \end{macrocode}
%    
%    Adds an image to the ToC.
%    Needs testing for twoside printing. \FIRE
%    \begin{macrocode}
\def\addtocimage#1#2#3{%
 \addtocontents{toc}{\protect\addtocimage@cx{#1}{#2}{#3}}%
}
%    \end{macrocode}
% 
%
% \begin{chapterabstract}
%   \lorem
% \end{chapterabstract}
%
%
% \section{Quotations}
% 
%    \begin{macrocode}
\cxset{
  quotation above/.store in=\quotationabove@cx,
  quotation left margin/.store in=\quotationleftmargin@cx,
  quotation right margin/.store in=\quotationrightmargin@cx,
  quotation parsep/.store in=\quotationparsep@cx,
  quotation font-size/.store in=\quotationfontsize@cx,
  quotation parindent/.store in=\quotationparindent@cx,
  quotation font-name/.store in=\quotationfontname@cx,
 }
%    \end{macrocode}
%
% \begin{docCommand}{setquotation} { \meta{keys} } Macro to create the quotation
%	environment. We need to think of a better way here. Saved
%   old environment.
% \end{docCommand}  
%    \begin{macrocode}
\let\latexquotation\quotation
\let\endlatexquotation\endquotation
\def\setquotation#1{%
\cxset{#1}
\renewenvironment{quotation}
               {\par\addvspace{\quotationabove@cx}
                \list{}{\listparindent\quotationparindent@cx%
                        \leftmargin=\quotationleftmargin@cx%
                        \itemindent    \listparindent
                        \rightmargin \quotationrightmargin@cx
                        \parsep=\quotationparsep@cx%
                        \quotationfontname@cx\quotationfontsize@cx}%
                \item\relax\hskip-\listparindent}
               {\endlist}
}
%    \end{macrocode}
% 
%CHANGE FOR SETFONT
%    \begin{macrocode}
\setquotation{%
  quotation above=20pt, 
  quotation left margin=50pt,
  quotation right margin=0pt,
  quotation parsep=0pt,
  quotation font-size=\normalsize,
  quotation parindent=12pt,
  quotation font-name=, 
}
%    \end{macrocode}
%
% \begin{quotation}
% \lipsum[1]
% \end{quotation}
%
% \begin{docCommand} {setquote} { \meta{keys} }
% \end{docCommand}
%    \begin{macrocode}
\cxset{
  quote above/.store in=\quoteabove@cx,
  quote left margin/.store in=\quoteleftmargin@cx,
  quote right margin/.store in=\quoterightmargin@cx,
  quote parsep/.store in=\quoteparsep@cx,
  quote font-size/.store in=\quotefontsize@cx,
  quote parindent/.store in=\quoteparindent@cx,
  quote font-name/.store in=\quotefontname@cx,
 }
\let\latexquote\quote
\let\endlatexquote\endquote
\def\setquote#1{%
  \cxset{#1}
  \renewenvironment{quote}
               {\par\addvspace{\quoteabove@cx}
                \list{}{\listparindent\quoteparindent@cx%
                        \leftmargin=\quoteleftmargin@cx%
                        \itemindent  \listparindent
                        \rightmargin\leftmargin
                        \parsep=\quoteparsep@cx%
                        \quotefontsize@cx\quotefontname@cx}%
                \item\relax\hskip-\listparindent}
               {\endlist}
  }

% Some default values
\setquotation{%
  quotation above=36pt,
  quotation left margin=50pt,
  quotation parsep=0pt,
  quotation font-size=\small,
  quotation parindent=12pt,
}
\setquote{%
  quote above=0pt,
  quote left margin=20pt,
  quote parsep=0pt,
  quote font-size=\small,
  quote parindent=12pt,
  quote font-name=,
}
%    \end{macrocode}
% 
%
% \section{Miscellaneous macros}  
%
% \subsection{Margin notes and margin emphasis}
% 
% \parindent1em 
% 
%   \marge{Margin boxes} Marginal notes are commonly found in
% 	many publications, Tufte goes to the extreme and requires
%	all footnotes and citations to be as `sidenotes'. We provide
%	a number of commands, if nothing else to illustrate 
%	techniques for defining them.\FIRE
%
%
% 
%    \begin{macrocode}
\newcommand{\marginbox@cx}[2][]{%
  \mbox{}\marginpar{\centering\scriptsize \color{teal}#2}%
  \ifthenelse{\not\equal{#1}{}}{\phantomsection\label{#1}}{}%
}
\newcommand{\marge}[2][]{%
  \bigskip\par\marginbox@cx[#1]{#2}%
}
%    \end{macrocode}
% 

% 
% \subsection{Paragraph setting commands}
%
%    \begin{macrocode}
%
\providecommand*{\linenottooshort}[1][4em]{%
  \@tempdima=\hsize
 \advance\@tempdima-#1
 \leftskip0pt
 \rightskip\leftskip
\parfillskip\@tempdima\@minus\@tempdima
}
\providecommand*{\lastlineparrule}{%
  \hrule height 0.5ex depth \@tempdimb\relax}

\providecommand*{\lastlinerulefill}{%
  \let\\\@centercr
  \@tempdimb=-0.5ex \advance\@tempdimb 0.4pt
  \unskip\nobreak\space
  \leaders\lastlineparrule\hskip\@flushglue
  \vadjust{}{\parfillskip\z@\@@par}}
%    \end{macrocode}
%
%    \begin{macrocode}
\newcommand{\hangleft}[1]{\makebox[0pt][r]{#1}}

\DeclareRobustCommand\ctan[1]{%
  \textcolor{green}{%
      \href{http://www.ctan.org/pkg/#1} {#1}%
  \footnote{\protect\url{http://www.ctan.org/pkg/#1}}}
  \index{Packages>#1}%
}
%
%
%    \end{macrocode}
%
% 
%	The macro \cs{keyval} typesets, key value lists and their options.
%	\medskip
%
%    \keyval{test}{\marg{option1|option2|option2|option4}}{ As per this example.}
%    \keyval{test}{\marg{option1|option2|option2|option4}}{ As per this example.}
%
%	We first measure the width of the option and not use it (want to make it a bit
%	flexible at a later stage. We also ensure that the catcode of \verb+|+ is set properly
%	in case anyone is using short verbatim commands, as we do in this document.
%
%    \begin{macrocode}
\newlength\temp@cx
\def\keyval{%
  \bgroup
  \catcode`|=11
  \@keyval}
%
\def\@keyval#1#2#3{%
  \settowidth\temp@cx{#1}%
  \parindent-30pt
  \hangindent30pt
  \par\leavevmode%
{\color{teal}\bfseries #1}\thinspace=\thinspace#2% 
\hspace*{.5em}#3%
\par\addvspace{1.5pt}%
\egroup
}
%
%    \end{macrocode}
% 
%
% \section{Documentation Macros}

% This section defines commands for printing documentation
% such as this one. It draws inspiration and plagiarizes pgf,
% doc,symbols and many other packages for which I am grateful.
% First some macros for indexing commands.
% 
%    \begin{macrocode}
% Define a table environment that's similar to symtable except that it
% floats and it doesn't write an entry into the Table of Contents.  This
% is used for tables that contain something other than symbol lists.
\def\oarg#1{%
  \colOpt{{\ttfamily[}\meta{#1}{\ttfamily]}}}%
%  
\def\DescribeMacro{\leavevmode\@bsphack
   \begingroup\MakePrivateLetters\Describe@Macro}
\def\Describe@Macro#1{\endgroup
              {\raggedleft\PrintDescribeMacro{#1}}%
              \SpecialUsageIndex{#1}\@esphack\ignorespaces}


\def\DescribeEnv{\leavevmode\@bsphack\begingroup\MakePrivateLetters
  \Describe@Env}
\def\Describe@Env#1{\endgroup
              {\raggedleft\PrintDescribeEnv{#1}}{}%
              \SpecialEnvIndex{#1}\@esphack\ignorespaces}
\setlength\marginparpush{0pt}  



\newlength{\atemp}
 \def\PrintDescribeMacro#1{%
  \settowidth\atemp{\string #1} 
  \strut\MacroFont\color{thered}\normalsize\string#1}

\def\Describe#1{%
   \settowidth\atemp{\string #1}% 
  \par\penalty-500\vskip3ex\noindent
  \DescribeMacro{#1}\args}
\def\DescribeOther{\vskip-4ex\Describe}

\def\args#1{%
  \def\bbl@tempa{#1}%
  \ifx\bbl@tempa\@empty\else#1\vskip1ex\fi\ignorespaces}


\newenvironment{nonsymtable}[1]{%
  \begin{table}[htbp]
  \centering
  \caption{#1}\medskip
}{%
  \end{table}
}
%    \end{macrocode}
%

% Index "X Y" and "Y, X".  The "begin" and "end" variants are for page ranges.
%    \begin{macrocode}
\newcommand{\cmdI}[2][]{%
  \def\first@arg{#1}%
  \ifx\first@arg\@empty
    \texttt{\verbatimfont\string#2}\indexcommand[#2]{#2}%
  \else
    \texttt{\verbatimfont\string#2}\indexcommand[#1]{#2}%
  \fi
}


\newcommand{\cmdX}[1]{\cmdI[$\string#1$]{#1}}
\newcommand{\cmdW}[1]{\cmdI[$\string\blackacc{\string#1}$]{#1}}
\newcommand{\cmdIp}[1]{\texttt{\string#1}\indexpunct[$#1$]{#1}}
%    \end{macrocode}

% {CMDI}\oarg[symbol command]\marg{command}
% This macro \#1 symbol to be typeset next to
% \#2 in the index |\gothic (symbol)|
%
%    \begin{macrocode}
\DeclareRobustCommand\CMDI[1]{%
\bgroup%
\smallskip 
\noindent\texttt{\verbatimfont\string#1}%
\indexcommand{#1}%
\egroup%
}

\DeclareRobustCommand\luacmd[1]{%
  \bgroup
    \smallskip
    \noindent\color{black}\textbf{\string#1}%
    \indexcommand{#1}
 \egroup%
}

\DeclareRobustCommand\luafunction[1]{%
  \bgroup
    \smallskip
    \noindent\color{black}\textbf{\verbatimfont#1}%
    \indexcommand{#1}
 \egroup%
}

%    \end{macrocode}
% 
%
% \begin{docCommand} {utfviii}  { \meta{void} }
%  Typesets UTF-8.
% \end{docCommand}
%    \begin{macrocode}
\newcommand{\utfviii}{\mbox{UTF-8}\index{UTF-8}\xspace}

% Index TeXbook symbols and the CTAN repository.
\newcommand{\idxTBsyms}{%
  \index{symbols>TeXbook=\TeX{}book}% 
  \index{TeXbook, The=\TeX{}book, The>symbols from}%
}

% Index logical styles.
\newcommand{\pkgname}[1]{%
  \href{http://ctan.org/pkg/#1}{#1}%
  \index{#1=\texttt{#1} (package)}%
  \index{packages>#1=\texttt{#1}}}
\let\pkg\pkgname

\newcommand*{\Lpack}[1]{\textsf {#1}}  
%\let\package\Lpack

\newcommand{\optname}[2]{%
  \textsf{#2}%
  \index{#2=\textsf{#2} (\textsf{#1} package option)}%
  \index{package options>#2=\textsf{#2} (\textsf{#1})}}
%    \end{macrocode}
%
% 
% This macro and all similar macros starting from doc
% typeset their argument and also add the argument to the 
% index.
%
%    \begin{macrocode}
\newcommand{\docfilename}[1]{%
  \texttt{#1}
  \index{#1=\texttt{#1} (file)}}
%    \end{macrocode}
% 
% 
%    \begin{macrocode}
\newcommand{\docfileextension}[1]{%
  \texttt{#1}%
  \index{#1=\texttt{#1} (file extension)}}
   \index{#1=\texttt{#1}}
\newcommand{\PSfont}[1]{%
  #1%
  \index{#1 (font)}%
  \index{fonts>#1}%
}
%    \end{macrocode}
% 
%    \begin{macrocode}
\NewDocumentCommand{\person} { m m } {#1\index{#2, #1} #2}
%    \end{macrocode}
%
%    \begin{macrocode}
\newcommand{\idxCTAN}{%
  \index{Comprehensive TeX Archive Network=Comprehensive \string\TeX{} Archive Network}}
% Typeset a string in various encodings.
\newcommand{\encone}[1]{{\fontencoding{T1}\selectfont#1}}
\newcommand{\encfour}[1]{{\fontencoding{T4}\selectfont#1}}
\newcommand{\encfive}[1]{{\fontencoding{T5}\selectfont#1}}
\newcommand{\encgreek}[1]{{\fontencoding{LGR}\selectfont#1}}

% Various punctuation marks confuse makeindex when used directly.
\let\magicrbrack=]
\let\magicequal=\=
\DeclareRobustCommand{\magicequalname}{\texttt{\string\=}}
\DeclareRobustCommand{\magicvertname}{\texttt{|}}
\DeclareRobustCommand{\magicVertname}{\texttt{\string\|}}

% Vertically center a text-mode symbol.
\newsavebox{\tvcbox}
\newcommand*{\textvcenter}[1]{%
  \savebox{\tvcbox}{#1}%
  \raisebox{0.5\dp\tvcbox}{\raisebox{-0.5\ht\tvcbox}{\usebox{\tvcbox}}}%
}
% Many tables have notes beneath them.  Define an environment in which to
% display such a note, with an optional, superscripted math symbol
% preceding it.
\newenvironment{tablenote}[1][]{
  \makebox[1em]{\ensuremath{^{#1}}}%
  \begin{minipage}[t]{0.75\textwidth}%
  \setlength{\parskip}{2ex}
}{%
  \end{minipage}%
}

% Define various messages we reuse repeatedly.
\newcommand{\twosymbolmessage}{%
  \begin{tablenote}
    Where two symbols are present, the left one is the ``faked'' symbol
    that \latexe provides by default, and the right one is the ``true''
    symbol that \TC\ makes available.
  \end{tablenote}
}

\newcommand{\notpredefinedmessage}{%
  \begin{tablenote}[*]
    Not predefined in \latexe.  Use one of the packages
    \pkgname{latexsym}, \pkgname{amsfonts}, \pkgname{amssymb},
    \pkgname{txfonts}, \pkgname{pxfonts}, or \pkgname{wasysym}.
  \end{tablenote}
}

\newcommand{\notpredefinedmessageABX}{%
  \begin{tablenote}[*]
    Not predefined in \latexe.  Use one of the packages
    \pkgname{latexsym}, \pkgname{amsfonts}, \pkgname{amssymb},
    \pkgname{mathabx}, \pkgname{txfonts}, \pkgname{pxfonts}, or
    \pkgname{wasysym}.
  \end{tablenote}
}

\newcommand{\usetextmathmessage}[1][]{%
  \begin{tablenote}[#1]
    It's generally preferable to use the corresponding symbol from
    \vref{math-text} because the symbols in that table work
    properly in both text mode and math mode.
  \end{tablenote}
}



\newcommand{\usefontcmdmessage}[2]{%
  These symbols must appear either within the argument to \cmd{#1} or
  following the \cmd{#2} font-selection command within a scope%
}
% Define an environment in which to write a single table of symbols.  The
% environment looks a lot like a table, but it doesn't float, and it gets
% an entry in the table of contents as opposed to the list of tables.
%
% The first argument is a conditional.  The table will appear only if
% the value of the conditional is true.  The second argument is the
% table's caption.

\def\fnum@table{\tablename~\thetable}

\newenvironment{symtable}[2][true]{%
  \expandafter\global\expandafter\let%
    \expandafter\ifshowsymtable\csname if#1\endcsname
  \ifshowsymtable
    \noindent%
    \begin{minipage}[t]{\linewidth}    % Prevent page breaks
    \begin{center}
    \refstepcounter{table}%
    \phantomsection
    \addcontentsline{toc}{subsection}{%
      \protect\numberline{\tablename~\thetable:}{#2}}%
    \@makecaption{\fnum@table}{#2}\medskip
    \let\next=\relax
  \else
    % The following was taken verbatim from verbatim.sty.
    \let\do\@makeother\dospecials\catcode`\^^M\active
    \let\verbatim@startline\relax
    \let\verbatim@addtoline\@gobble
    \let\verbatim@processline\relax
    \let\verbatim@finish\relax
    \let\next=\verbatim@
  \fi
  \next
}{%
  \ifshowsymtable
    \end{center}
    \end{minipage}
    \vskip 8ex minus 2ex
  \fi
}
%    \end{macrocode}
%
% \chapter{Scripts and Languages }

% The clist \refCom{g_phd_scripts_clist} holds a list of all the scripts that have been loaded.
% Managing the user interface is problematic, we will have users that require
% only one script and users that might want all of them.
% There is also the issue between the blurring of alphabets, languages and scripts
% Since we will always specify a pan-unicode font, which we will make available
% with the |phd| package. We map all scripts to this font first.
%
% \begin{docCommand}{g_phd_scripts_clist} {\meta{clist}}
%   Holds a clist of all scripts loaded.
% \end{docCommand}
%
% 
%  Declare two global lists to hold all the scripts available.
% The |\script_prop| holds info for each script loaded
%
%    \begin{macrocode}
\ExplSyntaxOn
\clist_new:N \g_phd_scripts_clist
\clist_new:N \g_phd_noto_clist
\prop_new:N \script_prop
%\input{notolist.txt.tex}
%    \end{macrocode}
%
% \begin{docCommand}{g_phd_noto_clist}{clist}
% Holds a list of all noto fonts available.
% \end{docCommand} 
%
% \begin{docCommand}{printnotofontlist} {clist}
% It typesets a list in a two column environment with all the available Noto fonts.
% \end{docCommand}

% 
%    \begin{macrocode}
\cs_set:Npn \printnotofontlist 
  {
    \begin{multicols}{2}
      \clist_map_inline:Nn \g_phd_noto_clist
        {
          ##1\par 
		  }
    \end{multicols}  
  }
%    \end{macrocode}	
% 
% 
%    \begin{macrocode}	
\prop_put:Nnn \script_prop {name}{Armenian}
\prop_put:Nnn \script_prop {fonts}{NotoArmenian-Regular.ttf, Others}
\prop_get:NnN \script_prop {fonts}\l_tempa_tl
\prop_put:Nnn \script_prop {group}{Europe}
\prop_get:NnN \script_prop {group} \l_tempa_tl
%    \end{macrocode}
%
% \begin{docCommand}{SetPanUnicodeFont}{\marg{font name}}
%  Sets the pan-unicode font. This font is to be used as a default for all the scripts
%  The user can override it with another font.
% \end{docCommand}
%
%    \begin{macrocode}
\NewDocumentCommand\SetPanUnicodeFont { m }
  {
     \gdef\panunicodefontface{#1}
     \newfontfamily\panunicode[Scale=MatchUppercase]{#1}
  }
\SetPanUnicodeFont{code2000.ttf}    
%    \end{macrocode}

%    \begin{macrocode}
\cs_gset:Npn \makepanfontfamily#1{
%  \newfontfamily\cs:w #1fontfamily\cs_end: { #2 }
  \cs_gset_eq:cN {#1fontfamily}\panunicode
  \cs_gset_eq:cc {#1} {#1fontfamily}
}

\cs_gset:Npn \add_a_script:n #1
 {
   \clist_gput_left:Nn \g_phd_scripts_clist {#1 }
   \createscriptenvironment {#1}
   \createtextscript {#1}
 }   
 
 % add a script
\NewDocumentCommand\addascript { m } 
  {
    \add_a_script:n {#1}
  }
  
% Mock an environment 
\gdef\createscriptenvironment #1{
   \exp_after:wN\gdef\csname #1script\endcsname{\group_begin:
      \csname #1fontfamily\endcsname}
   \exp_after:wN\gdef\cs:w end#1script\cs_end:{\group_end: }
}  
\ExplSyntaxOff
%    \end{macrocode}
%  
% \begin{docCommand}{createtextscript}{ \marg{script name}}
% This creates a command of the form |\text|\meta{script name} i.e., for tibetan
% it will produce |\texttibetan|
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn \createtextscript #1{
   \long\exp_after:wN\gdef\csname text#1\endcsname ##1
   {
      \group_begin: 
      \cs:w #1fontfamily\cs_end:
        ##1
     \group_end:
   }
}  
%
%
\cs_gset:Npn \makefontfamily#1#2 {
\if_meaning:w\panunicodefontface#2
  \else:
  \exp_after:wN
  \newfontfamily\cs:w #1fontfamily\cs_end: { #2 }
  \cs_gset_eq:cc {#1} {#1fontfamily}
\fi:  
}
\ExplSyntaxOff
\NewDocumentCommand\AddScript { m } {
    \cxset{script/.code=\addascript{##1}}
    \cxset{#1 font/.code=\makefontfamily{#1}{##1}}
    \cxset{script=#1}
    \cxset{#1 font=\panunicodefontface}
}
\cxset{add script/.code = \AddScript{#1}}

\ExplSyntaxOn
\clist_gset:Nn \g_phd_scripts_clist {
      armenian,
      %hebrew,
     % arabic,
      syriac,
      thaana,
      devanagari,
      bamum,
      bengali,
      brahmi,
      coptic,
      gurmukhi,
      gujarati,
      oriya,
      tamil,
      telugu,
      kannada,
      malayalam,
      thai,
      lao,
      lisu,
      myanmar,
      georgian,
      ethiopic,
      cherokee,
      ogham,
      runic,
      buhid,
      bopomofo,
      tibetan, 
      cypriot, 
      telugu, 
      phoenician, 
      cham,
      vai,
      rejang,
      glagolitic,
      saurashtra,
         sinhala,
      sylhetinagari,
      tifinagh,
      kayahli,
     mongolian,
     oldturkic,
     cjk,
}

\clist_map_inline:Nn\g_phd_scripts_clist 
  {
    \AddScript{#1}
    \makepanfontfamily {#1}
  }
\ExplSyntaxOff
%    \end{macrocode}
%
% A small utility macro to typeset unicode tables
% examples can be see in the chapters for scripts.
%puts the unicode label (removes last char and adds x)
%
% \begin{docCommand} {putunicode@label} {\marg{unformatted string}} 
%  This macro receives a number in hexadecimal, removes the last
%  0 and replaces it with an x. It then prepends a U+ to fomat it
%  as a Unicode number e.g. U+0100x
% \end{docCommand}
% 
%    \begin{macrocode}
\newcounter{glyph@count}%counts glyphs
%    \end{macrocode}
%		
%		
%    \begin{macrocode}
\ExplSyntaxOn
\def\textU#1{{\unicodenumberfam #1}}
\ExplSyntaxOff
%    \end{macrocode}
%		
%    \begin{macrocode}
\def\putunicode@label#1#2;{%
%    \end{macrocode}
%    
%    \begin{macrocode}
\def\reformat@unicode@string##1{%
   \textU{U+}%
  \let\z\empty%
  \expandafter\@tfor\expandafter\i\expandafter:\expandafter=#2;\do{%
  \if\i;%
    \textU{x}%
  \else%
    \textU{\z}%
  \fi%
  \edef\z{\i}%
 }%
}%
  \makebox[5em]{\reformat@unicode@string{#2}\hfill}%
}
%    \end{macrocode}
% 
% \begin{docCommand} {putchar@cx} {\meta{char}}
% \end{docCommand}
% 
%    \begin{macrocode}
\def\putchar@cx#1{%
\stepcounter{glyph@count}
\let\oldactive@prefix\active@prefix
\let\active@prefix\relax
   \iffontchar\font\n
     \char\the\n$_{\pgfmathparse{Hex(\the\r@cx)}\text{\pgfmathresult}}$%
      %
   \else
    {\arial\graybox}
   \fi
\let\active@prefix\oldactive@prefix
 }
%    \end{macrocode}
%    
%  typesets one row of a unicode table
%    \begin{macrocode}    
\def\urow@cx#1{%
    \n=#1% 
    \r@cx=0%
    \expandafter\putunicode@label#1;%
    \loop%
        \ifnum\n<\numexpr#1+16\relax%
        \makebox[2.1em]{\expandafter\putchar@cx{#1}}%
        \advance\r@cx by1%  
        \ifnum\r@cx>16\r@cx=1\relax\else\fi
        \advance\n by1%
    \repeat
    \par
}

\def\typeseturows@cx#1{%
\@for\next:=#1\do{%
  \urow@cx\next\vskip3pt}%
}

\newcount\r@cx%
\newcount\n%
\newcommand\unicodetable[2]{%
\bgroup
  \par
  \leavevmode%
   \r@cx=0%
   {\hbox to 5em{\ignorespaces}}%
   \loop%
    \ifnum\r@cx<16\ignorespaces 
    \makebox[2.1em]{\pgfmathparse{Hex(\the\r@cx)}\pgfmathresult}%
    \advance\r@cx by\@ne%  
   \repeat
   \vskip3pt\par
   \@nameuse{#1}%
   \typeseturows@cx{#2}%
\egroup
}
%    \end{macrocode}
% \begin{docCommand} {unicodenumber} {\meta{string}}
% Typesets a string such as |x1020| in a typewriter font.
% \end{docCommand}
%    \begin{macrocode}    
\DeclareRobustCommand\unicodenumber[1]{{\ttfamily #1\xspace}}
%    \end{macrocode}
%    
%    \begin{macrocode}
\def\putdescription#1:{%
  \parindent0pt 
  \begin{minipage}[t]{4cm}
  \bgroup\aegean
  \hangindent20pt
  #1\par
  \egroup
  \end{minipage} 
}


\long\def\parsefields #1:#2\@@{%
    \ifx\par#1
    \else 
        {\small\aegean U+#1}%
         %%\iffontchar\font"#1 %
          \makebox[2.1em]{\color{blue}\symbol{"#1}}% 
          \expandafter\putdescription#2\vskip3pt
        %%\else
          %%{\aegean \makebox[2.1em]{} Unallocated\par}%
        %%\fi
    \fi  
  }%
% Check if it can be saved
\newread\tempstream%s
%    \end{macrocode}
%
% \begin{docCommand}{printunicodeblock}{ \oarg{no columns} \marg{filename} \marg{fontcmd}}
%  The macro prints a unicode table from a file of definitions. This is
%   printed in a two column environment by default. \FIRE
% \end{docCommand}
% 
%    \begin{macrocode}
%\ExplSyntaxOn
\DeclareDocumentCommand{\printunicodeblock}{O{2} m m }
  {
    \bgroup
    \leavevmode\parindent0pt\par
    \begin{multicols}{#1}%
     #3
      \openin\@inputcheck=#2
      \loop\unless\ifeof\@inputcheck
      \read\@inputcheck to\fileline %
      \expandafter\parsefields \fileline:\@@ 
      \repeat
    \end{multicols}%
      \immediate\closein\@inputcheck
      \egroup
  }
\let\PrintUnicodeBlock\printunicodeblock
%\ExplSyntaxOff
%    \end{macrocode}
% 

%\section{Indexing macros}
%
% \begin{docCommand}{indexmany}{ \oarg{category} \marg{clist} }
% This function indexes a comma delimited list of items. It is convenient
% when you have paragraphs with a lot of terms.
% 
% \end{docCommand}
%    \begin{macrocode}
 \ExplSyntaxOn
 \DeclareDocumentCommand\indexmany {o m }
 {
   \clist_gset:Nn \indexmany: {#2} 
   \IfValueTF {#1}
    { 
      \clist_map_inline:Nn\indexmany: 
        {
          \index{#1>##1}\index{##1}
        }
    }
    { 
     \clist_map_inline:Nn\indexmany: 
      {
        \index{##1}
      } 
    }
 }
 \ExplSyntaxOff
%    \end{macrocode}
%
% \begin{docCommand} {indexboth}{ {arg1} {arg2} }
%  Indexes both arguments for example mathematical symbols
% \end{docCommand}
%    \begin{macrocode} 
\newcommand{\idxboth}[2]{\mbox{}\index{#1 #2}\index{#2>#1}}
\newcommand{\idxbothbegin}[2]{\mbox{}\index{#1 #2|(}\index{#2>#1|(}}
\newcommand{\idxbothend}[2]{\mbox{}\index{#1 #2|)}\index{#2>#1|)}}
\ExplSyntaxOn
\cs_gset_eq:NN \indexboth\idxboth
\cs_gset_eq:NN \indexbothbegin \idxbothbegin
\cs_gset_eq:NN \indexbothend\idxbothend
\ExplSyntaxOff
%    \end{macrocode}
% 
%  
%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \docFont #1
  {
    \bgroup
     \tcb@Print@Com{aegean}
     \label{key:aegean}
    \egroup 
  }

 
\def\refFont{\tcb@ref@doc{key}}  
    
\ExplSyntaxOff
\DeclareRobustCommand{\idxfont}[1]{\index{#1 (font)}\texttt{#1}\xspace}%
\DeclareRobustCommand{\idxlanguage}[1]{\index{#1 (script)}\index{scripts>#1}\texttt{#1}\xspace}%
%    \end{macrocode}
%
%  
%
% We define a related macro for indexing accents.  In a previous version
% of this file, \indexaccent additionally included "see also accents" in
% the index.  This became distracting so I made \indexaccent a synonym
% for \indexcommand for the time being.  Because punctuation marks can
% be problematic for makeindex, we define an \indexpunct macro that
% sorts its argument under the comparatively innocuous "\_".
%
%    \begin{macrocode}
\begingroup
 \catcode`\|=0
 \catcode`\\=12
 |gdef|sanitize#1#2!!!{%
   |ifx#1\%
     #2%
   |else
     #1#2%
   |fi
}
|endgroup
%    \end{macrocode}
%
%  \begin{docCommand}{indexcommand}{\oarg{}\marg{command} }
%    Index a \emph{symbol}, which may or may not begin with a \emph{backslash}.  (Is
%  there a better way to do this?)  Also, if symbol is given as an
%    optional argument is given, typeset that symbol in the index, as well
% \end{docCommand}
%
%  
%    \begin{macrocode}
\NewDocumentCommand \indexcommand { o m }  
  {
    \edef\sanitized{\expandafter\sanitize\string#2!!!}%
    %\def\first@arg{#1}%
    \IfNoValueTF{#1}
    {
       \expandafter\index\expandafter{\sanitized=\string\verb+\string#2+}%
    }
    {
       \expandafter\index\expandafter{\sanitized=\string\verb+\string#2+ (#1)}%
    }
  }
%    \end{macrocode}
%  
%    \begin{macrocode}
\NewDocumentCommand \indexcypriot { o m }  
  {
    \edef\sanitized{\expandafter\sanitize\string#2!!!}%
    \IfNoValueTF{#1}
    {
       \expandafter\index\expandafter{Cypriot>\sanitized=\string\verb+\string#2+}%
    }
    {
       \expandafter\index\expandafter{Cypriot>\sanitized=\string\verb+\string#2+ (#1)}%
    }
  }
%    \end{macrocode}  
%
%    \begin{macrocode}
\NewDocumentCommand \indexstaves { o m }  
  {
    \edef\sanitized{\expandafter\sanitize\string#2!!!}%
    \IfNoValueTF{#1}
    {
       \expandafter\index\expandafter{Staves>\sanitized=\string\verb+\string#2+}%
    }
    {
       \expandafter\index\expandafter{Staves>\sanitized=\string\verb+\string#2+ (#1)}%
    }
  }
%    \end{macrocode} 
%    
%    \begin{macrocode}
\NewDocumentCommand \indexlinearb { o m }  
  {
    \edef\sanitized{\expandafter\sanitize\string#2!!!}%
    \IfNoValueTF{#1}
    {
       \expandafter\index\expandafter{Linear B>\sanitized=\string\verb+\string#2+}%
    }
    {
       \expandafter\index\expandafter{Linearb>\sanitized=\string\verb+\string#2+ (#1)}%
    }
  }
%    \end{macrocode} 
%
%    \begin{macrocode}
\NewDocumentCommand \indexugar { o m }  
  {
    \edef\sanitized{\expandafter\sanitize\string#2!!!}%
    \IfNoValueTF{#1}
    {
       \expandafter\index\expandafter{Ugarite>\sanitized=\string\verb+\string#2+}%
    }
    {
       \expandafter\index\expandafter{Ugarite>\sanitized=\string\verb+\string#2+ (#1)}%
    }
  }
%    \end{macrocode} 

% \begin{docCommand} {indexoldpersian} {}
%   Indexing and doc command for symbols tables.
% \end{docCommand}
%    \begin{macrocode}
\NewDocumentCommand \indexoldpersian { o m }  
  {
    \edef\sanitized{\expandafter\sanitize\string#2!!!}%
    \IfNoValueTF{#1}
    {
       \expandafter\index\expandafter{Old Persian>\sanitized=\string\verb+\string#2+}%
    }
    {
       \expandafter\index\expandafter{Old Persian>\sanitized=\string\verb+\string#2+ (#1)}%
    }
  }
%    \end{macrocode} 
% \begin{docCommand} {indexsoutharabian} {}
%    Indexing and doc command for symbols tables.
% \end{docCommand}
%    \begin{macrocode}
\NewDocumentCommand \indexsoutharabian { o m }  
  {
    \edef\sanitized{\expandafter\sanitize\string#2!!!}%
    \IfNoValueTF{#1}
    {
       \expandafter\index\expandafter{South Arabian>\sanitized=\string\verb+\string#2+}%
    }
    {
       \expandafter\index\expandafter{South Arabian>\sanitized=\string\verb+\string#2+ (#1)}%
    }
  }
%    \end{macrocode} 
%
% \section{Indexing mathematical symbols}
%
% The currently available fonts 
% The following indexing commands are auxiliary commands to
% index unicode symbols for maths. 
% \tcbdocmarginnote{26-06-2015}
%    \begin{macrocode}
\NewDocumentCommand \indexmathcmd { o m }  
  {
    \edef\sanitized{\expandafter\sanitize\string#2!!!}%
    \IfNoValueTF{#1}
    {
       \expandafter\index\expandafter{#1>\sanitized=\string\verb+\string#2+
       ($#2$)}
       % put command also
      \expandafter\index\expandafter{\string#1=\string\verb+\string#2+ ($\string#2$)*}%
    }
    {
      \expandafter\index\expandafter{#1>\sanitized=\string\verb+\string#2+ ($#2$)}%
      \expandafter\index\expandafter{\string#1=\string\verb+\string#2+ ($\string#2$)}%
    }
  }
%    \end{macrocode} 
%
% \begin{docCommand}{indexaccent}{}
%   Syntactic sugar identical to \refCom{indexcommand}
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset_eq:NN \indexaccent\indexcommand
\cs_new:Npn \CLSLpipe {|}
\ExplSyntaxOff  
%    \end{macrocode}
%   

% {indexpunct}
%    \begin{macrocode}
%  
  \newcommand{\indexpunct}[2][]{%
    \def\first@arg{#1}%
    \def\second@arg{#2}%
    \ifx\first@arg\@empty
      \ifx\second@arg\CLSLpipe
        \index{_=\magicvertname}%
      \else
        \index{_=\string\verb+\string#2+}%
      \fi
    \else
      \ifx\second@arg\CLSLpipe
        \index{_=\magicvertname{} (#1)}%
      \else
        \index{_=\string\verb+\string#2+ (#1)}%
      \fi
    \fi
  }
%    \end{macrocode}
% 
%    \begin{macrocode}
%
% Define a counter to keep track of how many symbols are listed.
% Output this counter to the log file at the end of each run.
% Define |\prevtotalsymbols| to be the total number of symbols from
% the previous run.
%


%\usepackage{longdiv}
\newcommand\FC{\pkgname{fc}}
\newcommand\VIET{\pkgname{vietnam}}
%\newcommand\ABX{\pkgname{mathabx}}
%    \end{macrocode}
%

% \begin{docCommand} {incsyms} {void}
%  We define an integer counter to keep track of all the symbols we load
%  and list.\footnote{Unicode characters are counted separately}
%  These are symbols which can be produced using command sequences.
% \end{docCommand}
% \FIRE \FIRE \FIRE
%    \begin{macrocode}
%\setmathfont{stix}
% \setmathfont{Asana-Math.otf}

\ExplSyntaxOn
  \int_new:c {totalsymbols}
  \cs_new:Npn \incsyms { \int_gincr:c {totalsymbols} }
  \cs_new:Npn \thetotalsymbols {\int_use:c {totalsymbols} }
\ExplSyntaxOff
%    \end{macrocode}
%
% \begin{docCommand}{graybox} {\meta{void}}
% \end{docCommand}
%    \begin{macrocode}
\newcommand*{\graybox}{\textcolor{thegray!60}{\rule[-\adp]{\awd}{\aht}}}
 
% Define \blackacc to display an accented box, given an accent command.
% Define \blackacchack to display an accented "a" and then black out
% the "a".
\newlength\awd
\newlength\aht
\newlength\adp
\settowidth{\awd}{\normalfont m}
\settoheight{\aht}{\normalfont a}
\settodepth{\adp}{\normalfont m}
\advance\adp by 0.06pt    % In Computer Modern, "a" extends slightly below its bounding box.
\advance\aht by \adp
\gdef\blackacchack#1{#1a\llap{\graybox}}
\gdef\blackacc#1{#1{\graybox}}
\gdef\blackacctwo#1{#1{\graybox}{\graybox}}
%    \end{macrocode}
% 
% 
%
% Symbol+verbatim for various types of symbols
%    \begin{macrocode}
\def\E#1{%
  \begingroup
    \lccode`|=`\\
    \def\EStruename{ES#1T}
    \lowercase{\incsyms\index{#1=\string\verb+\string|#1+ (\string|\EStruename)}}
  \endgroup
  \csname ES#1T\endcsname & \csname ES#1D\endcsname &
  \ttfamily\expandafter\string\csname#1\endcsname
}


%    \end{macrocode}
%    
% \subsection{Indexing archaic symbols}  
% 
% These commands are here to be able to index these symbols for the index and to typeset
% them in the symbols appendix.
% 
% \begin{docCommand} {Kcyp} {\oarg{text cmd} \marg{symbol command}}
%   Indexes and prints the Cypriot archaic font symbols.
%   
% \begin{verbatim}
% \Kcyp[\textcypr{\Ca}]\Ca
% \end{verbatim}
% 
% \end{docCommand}
%    \begin{macrocode}
\def\Kcyp@opt@arg[#1]#2{\incsyms\indexcypriot[\textcypr{#1}]{#2}#1 &\ttfamily\string#2}
\def\Kcyp@no@opt@arg#1{\incsyms\indexcypriot[\textcypr{#1}]{#1}#1 &\ttfamily\string#1}
\def\Kcyp{\@ifnextchar[{\Kcyp@opt@arg}{\Kcyp@no@opt@arg}}
%    \end{macrocode}
%    
% \begin{docCommand} {Kstav} { \oarg{cmd} \marg{stave cmd}}      
%   Indexes and prints an Icelandic  stave. 
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn

\cs_set:Npn \Kstav_opt_arg [#1]#2
  {
    \incsyms\indexstaves[#1]{#2}# 1 &\ttfamily\string#2
  }
 
\cs_set:Npn \Kstav_no_opt_arg #1
  {
    \incsyms\indexstaves[#1]{#1}#1 &\ttfamily\string#1
  }

\NewDocumentCommand\Kstav {o m} {
  \IfNoValueTF {#1} 
    {
      \Kstav_no_opt_arg {#2}
    }
    {
      \Kstav_opt_arg [#1] {#2}
    }
}
\ExplSyntaxOff
%    \end{macrocode}
%    
%    
%    \begin{macrocode}
\def\K@opt@arg[#1]#2{\incsyms\indexcommand[#1]{#2}#1 &\ttfamily\string#2}
\def\K@no@opt@arg#1{\incsyms\indexcommand[#1]{#1}#1 &\ttfamily\string#1}
\def\K{\@ifnextchar[{\K@opt@arg}{\K@no@opt@arg}}
%    \end{macrocode}    
%    \begin{macrocode}
\def\Kp#1{\incsyms\indexpunct[$#1$]{#1}#1 &\ttfamily\string#1}

\def\KED[#1][#2][#3]#4{\incsyms\indexcommand[#1]{#2}#3 &\ttfamily\string#4}
\def\Kfeyn#1{\incsyms\indexcommand[\string\feyn{#1}]{\feyn{#1}}\feyn{#1} &\ttfamily\string\feyn\string{\string#1\string}}

\def\Kp#1{\incsyms\indexpunct[$#1$]{#1}#1 &\ttfamily\string#1}

\def\Kpig#1{\incsyms\index{pigpenfont #1=\string\verb+{\string\pigpenfont\space#1}+\space(\string\CLSLpig{#1})}\CLSLpig{#1} &\ttfamily\string{\string\pigpenfont\space\string#1\string}}
\def\Ks#1{\incsyms\indexcommand[\string\encone{\string#1}]{#1}{\encone{#1}} &\ttfamily\string#1$^*$}
%    \end{macrocode}

% 
%
% This macro is also from the comprehensive and takes
% the symbol command as its only argument. It provides
% |T1| encoding and also adds the command to the index.
%    \begin{macrocode}   
\newcommand\Kt[1]{%
        \incsyms\indexcommand[\string\encone{\string#1}]{#1}{%
        \encone{#1}} &\ttfamily\string#1}%
%    \end{macrocode}
% 
%
%    \begin{macrocode}
\def\Kv#1{\incsyms\indexcommand[\string\encfive{\string#1}]{#1}{\encfive{#1}} &\ttfamily\string#1}

\def\Kgr@opt@arg[#1]#2{\incsyms\indexcommand[\string\encgreek{\string#1}]{#2}{\encgreek{#1}} &\ttfamily\string#2}
  \def\Kgr@no@opt@arg#1{\incsyms\indexcommand[\string\encgreek{\string#1}]{#1}{\encgreek{#1}} &\ttfamily\string#1}
  \def\Kgr{\@ifnextchar[{\Kgr@opt@arg}{\Kgr@no@opt@arg}}

\def\KN[#1][#2]#3{\incsyms\indexcommand[\string#1]{#3} #1 & #2 & \ttfamily\string#3}
\def\KNbig[#1][#2]#3{\incsyms\indexcommand[\string#2]{#3} #1 & #2 & \ttfamily\string#3}
\def\Knoidx#1{\incsyms#1 &\ttfamily\string#1}
%% N
 \def\N@opt@arg[#1]#2{\incsyms\indexcommand[$\string#1$]{#2}$#1$ & $\Big#1$ &\ttfamily\string#2}
  \def\N@no@opt@arg#1{\incsyms\indexcommand[$\string#1$]{#1}$#1$ & $\Big#1$ &\ttfamily\string#1}
  \def\N{\@ifnextchar[{\N@opt@arg}{\N@no@opt@arg}}
  \def\Nn[#1]#2{%
    \incsyms\indexcommand[$\string\nathdouble\string#1$]{#2}%
    $\nathdouble#1$ & $\nathdouble{\Big#1}$ & \ttfamily\string#2}
  \def\Nnt#1[#2]#3{%
    \incsyms\indexcommand{\triple}%
    $\nathtriple#2$ & $\nathtriple{\Big#2}$ &
    \ttfamily\expandafter\string\csname#1triple\endcsname\string#3}
  \def\Np@opt@args[#1]{\@ifnextchar[{\Np@two@opt@args[#1]}{\Np@one@opt@arg[#1]}}
  \def\Np@two@opt@args[#1][#2]#3{\incsyms\index{_=\string#2{} ($\string#1$)}$#1$ & $\Big#1$ &\ttfamily\string#3}
  \def\Np@one@opt@arg[#1]#2{\incsyms\indexpunct[$\string#1$]{#2}$#1$ & $\Big#1$ &\ttfamily\string#2}
  \def\Np@no@opt@args#1{\incsyms\indexpunct[$\string#1$]{#1}$#1$ & $\Big#1$ &\ttfamily\string#1}
  \def\Np{\@ifnextchar[{\Np@opt@args}{\Np@no@opt@args}}
  \def\Nbig[#1]#2{\incsyms\indexcommand[$\string\Big\string#1$]{#2}$#1$ & $\Big#1$ &\ttfamily\string#2}
%% Q commands
 \def\Q@opt@arg[#1]#2{\incsyms\indexaccent[\string\blackacchack{\string#1}]{#2}#1{A}#1{a} &
           \ttfamily\string#2\string{A\string}\string#2\string{a\string}}
  \def\Q@no@opt@arg#1{\incsyms\indexaccent[\string\blackacchack{\string#1}]{#1}#1{A}#1{a} &
           \ttfamily\string#1\string{A\string}\string#1\string{a\string}}
  \def\Q{\@ifnextchar[{\Q@opt@arg}{\Q@no@opt@arg}}

\def\Qc#1{\incsyms\indexaccent[\string\blackacc{\string#1}]{#1}#1{A}#1{a} &
         \ttfamily\string#1\string{A\string}\string#1\string{a\string}}
\def\Qe[#1][#2]#3{%
  \incsyms\incsyms\index{_=\string#2{} (\string\blackacchack{\string#1})}%
  #3{A}#3{a} &
  \ttfamily\string#3\string{A\string}\string#3\string{a\string}}
\def\Qt#1{\incsyms\indexaccent[\string\encone{\string\blackacc{\string#1}}]{#1}{\encone{#1{A}#1{a}}} &
          \ttfamily\string#1\string{A\string}\string#1\string{a\string}}

\def\Qpc#1#2{\incsyms\indexcommand{#2}{\raisebox{1pt}{\tiny[#1]}} &
             \ttfamily\string#2\string{A\string}\string#2\string{a\string}}
\def\Qpfc[#1]#2{\incsyms\indexaccent[\string\encfour{\string\blackacchack{\string#1}}]{#2}\encfour{#1{A}#1{a}} &
           \ttfamily\string#2\string{A\string}\string#2\string{a\string}}
%% TODO
\newif\ifFC\FCfalse
\ifFC
  \def\Qiv#1#2{\incsyms\indexaccent[\string\encfour{\string\blackacchack{\string#1}}]{#1}\encfour{#1{A}#1{a}} &
               \ttfamily\string#1\string{A\string}\string#1\string{a\string}$^#2$}
  \def\QivBAR#1{\incsyms\index{_=\string\magicVertname{}
                (\string\encfour{\string\blackacchack{\string\FCbar}})}
                \encfour{\FCbar{A}\FCbar{a}} &
                \ttfamily\string\|\string{A\string}\string\|\string{a\string}$^#1$}
\else
  \def\Qiv#1#2{\Qpc{T4}{#1}$^#2$}
  \def\QivBAR#1{\Qpc{T4}{\|}$^#1$}
\fi

\newif\ifVIET\VIETfalse
\ifVIET
  \def\Qv#1#2{\incsyms\indexaccent[\string\encfive{\string\blackacchack{\string#1}}]{#1}{\encfive{#1{A}#1{a}}} &
              \ttfamily\string#1\string{A\string}\string#1\string{a\string}$^#2$}
\else
  \def\Qv#1#2{\Qpc{T5}{#1}$^#2$}\def\Qv#1#2{Err}%TODO
\fi
%% R Commands
  % We use \cmd{displaystyle} so that variable-sized symbols will be big.
  \def\R@opt@arg[#1]#2{\incsyms\indexcommand[$\string#1$]{#2}$#1$ & $\displaystyle#1$ &\ttfamily\string#2}
  \def\R@no@opt@arg#1{\incsyms\indexcommand[$\string#1$]{#1}$#1$ & $\displaystyle#1$ &\ttfamily\string#1}
  \def\R{\@ifnextchar[{\R@opt@arg}{\R@no@opt@arg}}
%% T commands
%    \end{macrocode}
%
% \begin{docCommand}{indexDing} { \marg{ ding symbol number }}
%   Auxiliary function to index and print in a table ding symbols. originally
%   from Comprehensive.
% \end{docCommand}
%
%    \begin{macrocode}
\newcommand \indexDing [1] {\incsyms\indexcommand{\ding}\ding{#1} &\ttfamily\string\ding\string{#1\string}}
%    \end{macrococode}
%
%    \begin{macrocode}
\def\Tm#1{\incsyms\indexcommand{\maya}$\mayadigit{#1}$ &\ttfamily\string\maya\string{#1\string}}
\def\Tmoon#1{\incsyms\indexcommand{\MoonPha}\MoonPha{#1} &\ttfamily\string\MoonPha\string{#1\string}}
%    \end{macrocode}
%
% \begin{docCommand}{indexTextcomp} {\oarg{ltx cmd} \marg{symbol arg}}
%   This command typesets its command argument in a table row of two
%   (used for textcomp symbols).
% \end{docCommand}   
%    \begin{macrocode}
\newcommand{\indexTextcomp}[2][]{%
   \incsyms#1 & 
   \indexcommand[#2]{#2}% necessary to put symbol \text
   #2%  
   &\ttfamily\string#2
}

   
\newcommand{\Vp}[2][]{\incsyms#1 & \indexpunct[$#2$]{#2}#2 &\ttfamily\string#2}

%W
\def\W@opt@arg[#1]#2#3{%
    \incsyms\indexaccent[$\string\blackacc{\string#1}$]{#2}%
    $#1{#3}$ &\ttfamily\string#2\string{#3\string}}

 \def\W@no@opt@arg#1#2{%
    \incsyms\indexaccent[$\string\blackacc{\string#1}$]{#1}%
    $#1{#2}$ &\ttfamily\string#1\string{#2\string}}
  \def\W{\@ifnextchar[{\W@opt@arg}{\W@no@opt@arg}}

\def\Wf#1#2{\incsyms\indexcommand{#1}$#1{#2}$ &\ttfamily\string#1\string{#2\string}}
\def\Ww#1#2#3{\incsyms\indexcommand{#2}$#1{#3}$ &\ttfamily\string#2\string{#3\string}}
\def\Wul#1#2#3{%
  \incsyms\indexaccent[$\string\blackacctwo{\string#1}$]{#1}%
  $#1{#2}{#3}$ &\ttfamily\string#1\string{#2\string}\string{#3\string}}
%    \end{macrocode}

% \begin{docCommand}{X} { \oarg{command} \marg{command} }
%   Typesets its arguments as commands and also the resulting symbol in 
%   math. Used for symbol tables in the documentation.
% \end{docCommand}
%
% \tcbdocmarginnote{U 25-6-2015}
%    \begin{macrocode}
\def\X@opt@arg[#1]#2{\incsyms\indexcommand[$\string#1$]{#2}$#1$ &\ttfamily\string#2}
\def\X@no@opt@arg#1{\incsyms\indexcommand[$\string#1$]{#1}$#1$ &\ttfamily\string#1}
\def\X{\@ifnextchar[{\X@opt@arg}{\X@no@opt@arg}}
%    \end{macrocode}

%    \begin{macrocode}
\def\Y#1{\incsyms\indexcommand[$\string\big\string#1$]{#1}$\big#1$ & $\Bigg#1$ &\ttfamily\string#1}
%    \end{macrocode}
%

%    \begin{macrocode}
\ExplSyntaxOn
\def\Z#1{\incsyms\indexcommand[$\string#1$]{#1}\ttfamily\string#1}
\ExplSyntaxOff
%    \end{macrocode}
%
%
% {docfile}
% NEED TO CHECK IF THIS IS NECESSARY
%    \begin{macrocode}
\def\docfile#1{\protect\texttt{\textbackslash #1}\index{#1}}
%    \end{macrocode}
% 
%
% {bibsample}
%  Typesets a sample of bib
%    \begin{macrocode}
\newenvironment{bibsample}
  {\trivlist\samepage
   \setlength{\itemsep}{0pt}}
  {\endtrivlist}
%% doccommands
\newcommand*{\marglistfont}{\itshape}
\newcommand*{\margoptionfont}{\ttfamily}
\newcommand*{\margnotefont}{}

\newcommand*{\optionlistfont}{\bfseries}

\newcommand*{\ltxsyntaxfont}{\ttfamily}

\newcommand*{\ltxsyntaxlabelfont}{\bfseries}

\newcommand*{\changelogfont}{\normalfont}

\newcommand*{\changeloglabelfont}{\bfseries}

%% needed for listings????
\newcommand*{\verbatimfont}{\ttfamily}%


\let\displayverbfont\ttfamily

\renewcommand*{\verbatim@font}{\verbatimfamily}

\def\cmd#1{\cs{\expandafter\cmd@to@cs\string#1}}%

\def\cmd@to@cs#1#2{\char\number`#2\relax}

\newrobustcmd*{\env}[1]{\mbox{\verbatimfont\bfseries\textcolor{thegreen}{#1}}}

\newrobustcmd*{\len}[1]{\mbox{\verbatimfont\textbackslash#1}}

\newrobustcmd*{\cnt}[1]{\mbox{\verbatimfont#1}}

\newlength{\marglistsep}

\newlength{\marglistwidth}
\setlength{\marglistwidth}{(\oddsidemargin+1in)*85/100}%
\deflength{\marglistsep}{10pt}
%% This needs thorough checking as to restore previous definitions
%% of parsep we want parsep to be a bit higher than standard enumerated lists.


\global\newlength\oldparsep
\newenvironment*{marglist}
  {\setlength\oldparsep{\parsep}\list{}{%
     \parsep 3.5\p@ \@plus0\p@ \@minus\p@
     \setlength{\labelwidth}{\marglistwidth}%
     \setlength{\labelsep}{\marglistsep}%
     \setlength{\leftmargin}{0pt}%
     \renewcommand*{\makelabel}[1]{\hss\marglistfont##1}}}
  {\endlist\setlength\parsep{\oldparsep}}

% tt 
\newenvironment*{margoptionslist}
  {\setlength\oldparsep{\parsep}\list{}{%
     \parsep 3.5\p@ \@plus0\p@ \@minus\p@
     \setlength{\labelwidth}{\marglistwidth}%
     \setlength{\labelsep}{\marglistsep}%
     \setlength{\leftmargin}{0pt}%
     \renewcommand*{\makelabel}[1]{\hss\margoptionfont\detokenize{##1}}}}
  {\endlist\setlength\parsep{\oldparsep}}
  
  

\newenvironment*{keymarglist}
  {\marglist
   \setlength{\itemsep}{0pt}%
   \raggedright}
  {\endmarglist}
% color definitions
\def\colDef#1{\textcolor{themacro}{#1}}
% color for options
\def\colOpt#1{\textcolor{theblue}{#1}}
\newcommand{\option}[1]{\colOpt{#1}}
%    \end{macrocode}
% 
%
% \section{Documentation Symbols for PGF type docs}
%
% Copyright 2006 by Till Tantau
%
% These type of documentation macros. 
%
%    \begin{macrocode}
\newenvironment{pgfmanualentry}{\list{}{\leftmargin=2em\itemindent-\leftmargin
 \def\makelabel##1{\hss##1}}}{\endlist}%%
%    \end{macrocode}
%
% \begin{pgfmanualentry}
%  \item pgfversion
%  \item test
% \end{pgfmanualentry}
%    \begin{macrocode}
\newcommand\pgfmanualentryheadline[1]{\itemsep=0pt\parskip=0pt\item\strut{#1}\par\topsep=0pt}
%    \end{macrocode}
%
%
%  
% \cs{parskip}.
%    \begin{macrocode}
\newcommand\pgfmanualbody{\parskip3pt}
%    \end{macrocode}
% 
%
% 
%    \begin{macrocode}
\newenvironment{pgflayout}[1]{
  \begin{pgfmanualentry}
    \pgfmanualentryheadline{\texttt{\string\pgfpagesuselayout\char`\{\declare{#1}\char`\}}\oarg{options}}
    \index{#1@\protect\texttt{#1} layout}%
    \index{Page layouts!#1@\protect\texttt{#1}}%
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}
%
%    \end{macrocode}
%
% 
%  command environment
% The command strips the backslash and  handles the at for 
% indexing.
% 
%    \begin{macrocode}
\newenvironment{command}[1]{
  \begin{pgfmanualentry}
    \extractcommand#1\@@
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}
%% MW: START MATH MACROS
\def\mvar#1{{\rmfamily\textit{#1}}}
\def\extractmathfunctionname#1{\extractmathfunctionname@#1(,)\tmpa\tmpb}
\def\extractmathfunctionname@#1(#2)#3\tmpb{\def\mathname{#1}}

\def\extractmathoperatorname{\begingroup\def\mvar##1{}\def\ {}\extractmathoperatorname@}
\def\extractmathoperatorname@#1{\xdef\mathname{#1}\endgroup}
\def\vskipspecial#1{\vskip#1\vskip0em}

\newenvironment{math-function}[1]{
	\begin{pgfmanualentry}
		\extractmathfunctionname{#1}
		\pgfmanualentryheadline{\texttt{#1}}%
		\index{\mathname @\protect\texttt{\mathname} math function}%
		\index{Math functions!\mathname @\protect\texttt{\mathname}}
		\pgfmanualbody
}
{
	\end{pgfmanualentry}\vskipspecial{-3em}
}
\newenvironment{math-operator}[1]{	
	\begin{pgfmanualentry}
		\extractmathoperatorname{#1}
		\pgfmanualentryheadline{\texttt{#1}}%
		\index{\mathname @\protect\texttt{\mathname} math operator}%
		\index{Math operators!\mathname @\protect\texttt{\mathname}}
    	\pgfmanualbody
}
{%
	\end{pgfmanualentry}\vskipspecial{-3em}
}
\newenvironment{math-constant}[1]{
	\begin{pgfmanualentry}
		\pgfmanualentryheadline{\texttt{#1}}%
		\index{#1@\protect\texttt{#1} math constant}%
		\index{Math constants!#1@\protect\texttt{#1}}
		\pgfmanualbody
}
{
	\end{pgfmanualentry}\vskipspecial{-3em}
}
\def\calcname{\textsc{calc}}
%% MW: END MATH MACROS
\def\extractcommand#1#2\@@{%
  \pgfmanualentryheadline{\declare{\texttt{\bfseries\string#1}}#2}%
  \removeats{#1}%
  %%\index{\strippedat @\protect\myprintocmmand{\strippedat}}
}

\@ifundefined{environment}{
\newenvironment{environment}[1]{
  \begin{pgfmanualentry}
    \extractenvironement#1\@@
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}}{}%
 %
\renewenvironment{environment}[1]{
  \begin{pgfmanualentry}
    \extractenvironement#1\@@
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}

\def\extractenvironement#1#2\@@{%
  \pgfmanualentryheadline{{\ttfamily\char`\\begin\char`\{\declare{#1}\char`\}}#2}%
  \pgfmanualentryheadline{{\ttfamily\ \ }\meta{environment contents}}%
  \pgfmanualentryheadline{{\ttfamily\char`\\end\char`\{\declare{#1}\char`\}}}%
  \index{#1@\protect\texttt{#1} environment}%
  \index{Environments!#1@\protect\texttt{#1}}}


\newenvironment{plainenvironment}[1]{
  \begin{pgfmanualentry}
    \extractplainenvironement#1\@@
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}

\def\extractplainenvironement#1#2\@@{%
  \pgfmanualentryheadline{{\ttfamily\declare{\char`\\#1}}#2}%
  \pgfmanualentryheadline{{\ttfamily\ \ }\meta{environment contents}}%
  \pgfmanualentryheadline{{\ttfamily\declare{\char`\\end#1}}}%
  \index{#1@\protect\texttt{#1} environment}%
  \index{Environments!#1@\protect\texttt{#1}}}


\newenvironment{contextenvironment}[1]{
  \begin{pgfmanualentry}
    \extractcontextenvironement#1\@@
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}

\def\extractcontextenvironement#1#2\@@{%
  \pgfmanualentryheadline{{\ttfamily\declare{\char`\\start#1}}#2}%
  \pgfmanualentryheadline{{\ttfamily\ \ }\meta{environment contents}}%
  \pgfmanualentryheadline{{\ttfamily\declare{\char`\\stop#1}}}%
  \index{#1@\protect\texttt{#1} environment}%
  \index{Environments!#1@\protect\texttt{#1}}}


\newenvironment{shape}[1]{
  \begin{pgfmanualentry}
  	\pgfmanualentryheadline{Shape {\ttfamily\declare{#1}}}%
    \index{#1@\protect\texttt{#1} shape}%
    \index{Shapes!#1@\protect\texttt{#1}}
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}


\newenvironment{handler}[1]{
  \begin{pgfmanualentry}
    \extracthandler#1\@nil%
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}

%% Changed must watch out!!
\def\gobble#1{}
\def\extracthandler#1#2\@nil{%
  \pgfmanualentryheadline{Key handler \meta{key}{\bfseries\ttfamily/\declare{#1}}#2}%
  \index{\gobble#1=\protect\texttt{#1} handler}%
  \index{Key handlers>#1=\protect\texttt{#1}}
}
\newenvironment{stylekey}[1]{
  \begin{pgfmanualentry}
    \def\extrakeytext{style, }
    \extractkey#1\@nil%
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}
%    \end{macrocode}
%
%    \begin{macrocode}
\newenvironment{key}[1]{
  \begin{pgfmanualentry}
    \def\extrakeytext{}
    %\def\altpath{\emph{\color{gray}or}}%
    \extractkey#1\@nil%
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}
%    \end{macrocode}

%    \begin{macrocode}
\def\extractkey#1\@nil{%
  \pgfutil@in@={#1}%
  \ifpgfutil@in@%
    \extractkeyequal#1\@nil
  \else%
    \pgfutil@in@{(initial}{#1}%
    \ifpgfutil@in@%
      \extractequalinitial#1\@nil%
    \else
      \pgfmanualentryheadline{{\ttfamily\declare{#1}}\hfill(\extrakeytext no value)}%
      \def\mykey{#1}%
      \def\mypath{}%
      \def\myname{}%
      \firsttimetrue%
      \decompose#1/\nil%ERROR?
    \fi
  \fi%
}

\def\extractkeyequal#1=#2\@nil{%
  \pgfutil@in@{(default}{#2}%
  \ifpgfutil@in@%
    \extractdefault{#1}#2\@nil%
  \else%
    \pgfutil@in@{(initial}{#2}%
    \ifpgfutil@in@%
      \extractinitial{#1}#2\@nil%
    \else
      \pgfmanualentryheadline{{\ttfamily\declare{#1}=}#2\hfill(\extrakeytext no default)}%
    \fi%
  \fi%
  \def\mykey{#1}%
  \def\mypath{}%
  \def\myname{}%
  \firsttimetrue%
  \decompose#1/\nil%
}

\def\extractdefault#1#2(default #3)\@nil{%
  \pgfmanualentryheadline{{\ttfamily\declare{#1}\opt{=}}\opt{#2}\hfill (\extrakeytext default {\ttfamily#3})}%
}

\def\extractinitial#1#2(initially #3)\@nil{%
  \pgfmanualentryheadline{{\ttfamily\declare{#1}=}#2\hfill (\extrakeytext no default, initially {\ttfamily#3})}%
}

\def\extractequalinitial#1 (initially #2)\@nil{%
  \pgfmanualentryheadline{{\ttfamily\declare{#1}}\hfill (\extrakeytext initially {\ttfamily#2})}%
  \def\mykey{#1}%
  \def\mypath{}%
  \def\myname{}%
  \firsttimetrue%
  \decompose#1/\nil%
}

\def\keyalias#1{\vspace{-3pt}\item{\small alias {\ttfamily/#1/\myname}}\vspace{-2pt}\par}

\newif\iffirsttime


\def\decompose/#1/#2\nil{%
  \def\test{#2}%
  \ifx\test\empty%
    % aha.
    \index{#1=\protect\texttt{#1} key}%@=
    \index{\mypath#1=\protect\texttt{#1}}%@
    \def\myname{#1}%
  \else%
    \iffirsttime
      \def\mypath{#1@\protect\texttt{/#1/}!}%
      \firsttimefalse
    \else
      \expandafter\def\expandafter\mypath\expandafter{\mypath#1@\protect\texttt{#1/}!}%
    \fi
    \def\firsttime{}
    \decompose/#2\nil%
  \fi%
}


\newenvironment{predefinednode}[1]{
  \begin{pgfmanualentry}
    \pgfmanualentryheadline{Predefined node {\ttfamily\declare{#1}}}%
    \index{#1=\protect\texttt{#1} node}%=
    \index{Predefined node!#1=\protect\texttt{#1}}=
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}

\newenvironment{coordinatesystem}[1]{
  \begin{pgfmanualentry}
    \pgfmanualentryheadline{Coordinate system {\ttfamily\declare{#1}}}%
    \index{#1@\protect\texttt{#1} coordinate system}%
    \index{Coordinate systems!#1@\protect\texttt{#1}}
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}


\newenvironment{decoration}[1]{
  \begin{pgfmanualentry}
    \pgfmanualentryheadline{Decoration {\ttfamily\declare{#1}}}%
    \index{#1@\protect\texttt{#1} decoration}%
    \index{Decorations!#1@\protect\texttt{#1}}
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}


\def\pgfmanualbar{\char`\|}

\newenvironment{pathoperation}[3][]{
  \begin{pgfmanualentry}
    \pgfmanualentryheadline{\textcolor{gray}{{\ttfamily\char`\\path}\
        \ \dots}
      \declare{\texttt{#2}}#3\ \textcolor{gray}{\dots\texttt{;}}}%
    \def\pgfmanualtest{#1}%
    \ifx\pgfmanualtest\@empty%
      \index{#2=\protect\texttt{#2} path operation}%=
      \index{Path operations!#2=\protect\texttt{#2}}%=
    \fi%
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}


\def\extractcommand#1#2\@@{%
  \pgfmanualentryheadline{\declare{\texttt{\string#1}}#2}%
  \removeats{#1}%
  \index{\strippedat @\protect\myprintocmmand{\strippedat}}}

\def\doublebs{\texttt{\char`\\\char`\\}}


\newenvironment{package}[1]{
  \begin{pgfmanualentry}
    \pgfmanualentryheadline{{\ttfamily\char`\\usepackage\char`\{\declare{#1}\char`\}\space\space \char`\%\space\space  \LaTeX}}
    \index{#1@\protect\texttt{#1} package}%
    \index{Packages and files!#1@\protect\texttt{#1}}%
    \pgfmanualentryheadline{{\ttfamily\char`\\input \declare{#1}.tex\space\space\space \char`\%\space\space  plain \TeX}}
    \pgfmanualentryheadline{{\ttfamily\char`\\usemodule[\declare{#1}]\space\space \char`\%\space\space  Con\TeX t}}
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}


\newenvironment{pgfmodule}[1]{
  \begin{pgfmanualentry}
    \pgfmanualentryheadline{{\ttfamily\char`\\usepgfmodule\char`\{\declare{#1}\char`\}\space\space\space
        \char`\%\space\space  \LaTeX\space and plain \TeX\space and pure pgf}}
    \index{#1@\protect\texttt{#1} module}%
    \index{Modules!#1@\protect\texttt{#1}}%
    \pgfmanualentryheadline{{\ttfamily\char`\\usepgfmodule[\declare{#1}]\space\space \char`\%\space\space  Con\TeX t\space and pure pgf}}
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}

\newenvironment{pgflibrary}[1]{
  \begin{pgfmanualentry}
    \pgfmanualentryheadline{{\ttfamily\char`\\usepgflibrary\char`\{\declare{#1}\char`\}\space\space\space
        \char`\%\space\space  \LaTeX\space and plain \TeX\space and pure pgf}}
    \index{#1@\protect\texttt{#1} library}%
    \index{Libraries!#1@\protect\texttt{#1}}%
    \pgfmanualentryheadline{{\ttfamily\char`\\usepgflibrary[\declare{#1}]\space\space \char`\%\space\space  Con\TeX t\space and pure pgf}}
    \pgfmanualentryheadline{{\ttfamily\char`\\usetikzlibrary\char`\{\declare{#1}\char`\}\space\space
        \char`\%\space\space  \LaTeX\space and plain \TeX\space when using \tikzname}}
    \pgfmanualentryheadline{{\ttfamily\char`\\usetikzlibrary[\declare{#1}]\space
        \char`\%\space\space  Con\TeX t\space when using \tikzname}}
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}

\newenvironment{tikzlibrary}[1]{
  \begin{pgfmanualentry}
    \pgfmanualentryheadline{{\ttfamily\char`\\usetikzlibrary\char`\{\declare{#1}\char`\}\space\space \char`\%\space\space  \LaTeX\space and plain \TeX}}
    \index{#1@\protect\texttt{#1} library}%
    \index{Libraries!#1@\protect\texttt{#1}}%
    \pgfmanualentryheadline{{\ttfamily\char`\\usetikzlibrary[\declare{#1}]\space \char`\%\space\space Con\TeX t}}
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}



\newenvironment{filedescription}[1]{
  \begin{pgfmanualentry}
    \pgfmanualentryheadline{File {\ttfamily\declare{#1}}}%
    \index{#1@\protect\texttt{#1} file}%
    \index{Packages and files!#1@\protect\texttt{#1}}%
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}


\newenvironment{packageoption}[1]{
  \begin{pgfmanualentry}
    \pgfmanualentryheadline{{\ttfamily\char`\\usepackage[\declare{#1}]\char`\{pgf\char`\}}}
    \index{#1@\protect\texttt{#1} package option}%
    \index{Package options for \textsc{pgf}!#1@\protect\texttt{#1}}%
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}

\newcommand\opt[1]{{\color{black!50!green}#1}}
\newcommand\ooarg[1]{{\ttfamily[}\meta{#1}{\ttfamily]}}

\def\opt{\afterassignment\pgfmanualopt\let\next=}
\def\pgfmanualopt{\ifx\next\bgroup\bgroup\color{black!50!green}\else{\color{black!50!green}\next}\fi}



\def\beamer{\textsc{beamer}}
\def\pdf{\textsc{pdf}}
\def\pgfname{\textsc{pgf}\xspace}
\def\tikzname{Ti\emph{k}Z\xspace}
\def\pstricks{\textsc{pstricks}}
\def\prosper{\textsc{prosper}}
\def\seminar{\textsc{seminar}}
\def\texpower{\textsc{texpower}}
\def\foils{\textsc{foils}}

{
  \makeatletter
  \global\let\myempty=\@empty
  \global\let\mygobble=\@gobble
  \catcode`\@=12
  \gdef\getridofats#1@#2\relax{%
    \def\getridtest{#2}%
    \ifx\getridtest\myempty%
      \expandafter\def\expandafter\strippedat\expandafter{\strippedat#1}
    \else%
      \expandafter\def\expandafter\strippedat\expandafter{\strippedat#1\protect\printanat}
      \getridofats#2\relax%
    \fi%
  }

  \gdef\removeats#1{%
    \let\strippedat\myempty%
    \edef\strippedtext{\stripcommand#1}%
    \expandafter\getridofats\strippedtext @\relax%
  }
  
  \gdef\stripcommand#1{\expandafter\mygobble\string#1}
}


\def\printanat{\char`\@}

\def\declare{\afterassignment\pgfmanualdeclare\let\next=}
\def\pgfmanualdeclare{\ifx\next\bgroup\bgroup\color{red!75!black}\else{\color{red!75!black}\next}\fi}


\let\textoken=\command
\let\endtextoken=\endcommand

\def\myprintocmmand#1{\texttt{\char`\\#1}}

\def\example{\par\smallskip\noindent\textit{Example: }}
\def\themeauthor{\par\smallskip\noindent\textit{Theme author: }}


\def\indexoption#1{%
  \index{#1@\protect\texttt{#1} option}%
  \index{Graphic options and styles!#1@\protect\texttt{#1}}%
}

\def\itemcalendaroption#1{\item \declare{\texttt{#1}}%
  \index{#1@\protect\texttt{#1} date test}%
  \index{Date tests!#1@\protect\texttt{#1}}%
}



\def\class#1{\list{}{\leftmargin=2em\itemindent-\leftmargin\def\makelabel##1{\hss##1}}%
\extractclass#1@\par\topsep=0pt}

\def\endclass{\endlist}

\def\extractclass#1#2@{%
\item{{{\ttfamily\char`\\documentclass}#2{\ttfamily\char`\{\declare{#1}\char`\}}}}%
  \index{#1@\protect\texttt{#1} class}%
  \index{Classes!#1@\protect\texttt{#1}}}



%\def\index@prologue{\section*{Index}\addcontentsline{toc}{section}{Index}
%  This index only contains automatically generated entries. A good
%  index should also contain carefully selected keywords. This index is
%  not a good index.
%  \bigskip
%}
%\@ifundefined{c@IndexColumns}{\newcount\c@IndexColumns}{}
%\c@IndexColumns=2
%  \def\theindex{\@restonecoltrue
%    \columnseprule \z@  \columnsep 29\p@
%    \twocolumn[\index@prologue]%
%       \parindent -30pt
%       \columnsep 15pt
%       \parskip 0pt plus 1pt
%       \leftskip 30pt
%       \rightskip 0pt plus 2cm
%       \small
%       \def\@idxitem{\par}%
%    \let\item\@idxitem \ignorespaces}
%  \def\endtheindex{\onecolumn}
%\def\noindexing{\let\index=\@gobble}



\newcommand\symarrow[1]{
  \index{#1@\protect\texttt{#1} arrow tip}%
  \index{Arrow tips!#1@\protect\texttt{#1}}
  \texttt{#1}& yields thick  
  \begin{tikzpicture}[arrows={#1-#1},thick,baseline]
    \useasboundingbox (0pt,-0.5ex) rectangle (1cm,2ex);
    \draw (0pt,.5ex) -- (1cm,.5ex);
  \end{tikzpicture} and thin
  \begin{tikzpicture}[arrows={#1-#1},thin,baseline]
    \useasboundingbox (0pt,-0.5ex) rectangle (1cm,2ex);
    \draw (0pt,.5ex) -- (1cm,.5ex);
  \end{tikzpicture}
}

\newcommand\sarrow[2]{
  \index{#1@\protect\texttt{#1} arrow tip}%
  \index{Arrow tips!#1@\protect\texttt{#1}}
  \index{#2@\protect\texttt{#2} arrow tip}%
  \index{Arrow tips!#2@\protect\texttt{#2}}
  \texttt{#1-#2}& yields thick  
  \begin{tikzpicture}[arrows={#1-#2},thick,baseline]
    \useasboundingbox (0pt,-0.5ex) rectangle (1cm,2ex);
    \draw (0pt,.5ex) -- (1cm,.5ex);
  \end{tikzpicture} and thin
  \begin{tikzpicture}[arrows={#1-#2},thin,baseline]
    \useasboundingbox (0pt,-0.5ex) rectangle (1cm,2ex);
    \draw (0pt,.5ex) -- (1cm,.5ex);
  \end{tikzpicture}
}

\newcommand\carrow[1]{
  \index{#1@\protect\texttt{#1} arrow tip}%
  \index{Arrow tips!#1@\protect\texttt{#1}}
  \texttt{#1}& yields for line width 1ex
  \begin{tikzpicture}[arrows={#1-#1},line width=1ex,baseline]
    \useasboundingbox (0pt,-0.5ex) rectangle (1.5cm,2ex);
    \draw (0pt,.5ex) -- (1.5cm,.5ex);
  \end{tikzpicture}
}
\def\myvbar{\char`\|}
\newcommand\plotmarkentry[1]{%
  \index{#1@\protect\texttt{#1} plot mark}%
  \index{Plot marks!#1@\protect\texttt{#1}}
  \texttt{\char`\\pgfuseplotmark\char`\{\declare{#1}\char`\}} &
  \tikz\draw[color=black!25] plot[mark=#1,mark options={fill=examplefill,draw=black}] coordinates{(0,0) (.5,0.2) (1,0) (1.5,0.2)};\\
}
\newcommand\plotmarkentrytikz[1]{%
  \index{#1@\protect\texttt{#1} plot mark}%
  \index{Plot marks!#1@\protect\texttt{#1}}
  \texttt{mark=\declare{#1}} & \tikz\draw[color=black!25]
  plot[mark=#1,mark options={fill=examplefill,draw=black}] 
    coordinates {(0,0) (.5,0.2) (1,0) (1.5,0.2)};\\
}



\ifx\scantokens\@undefined
  \PackageError{phd}{You need to use extended latex
    (elatex) or (pdfelatex) to process this document}{}
\fi

\begingroup
\catcode`|=0
\catcode`[= 1
\catcode`]=2
\catcode`\{=12
\catcode `\}=12
\catcode`\\=12 |gdef|find@example#1\end{codeexample}[|endofcodeexample[#1]]
|endgroup

\begingroup
\catcode`\^=7
\catcode`\^^M=13
\catcode`\ =13%
\gdef\returntospace{\catcode`\ =13\def {\space}\catcode`\^^M=13\def^^M{}}%
\endgroup

\begingroup
\catcode`\%=13
\catcode`\^^M=13
\gdef\commenthandler{\catcode`\%=13\def%{\@gobble@till@return}}
\gdef\@gobble@till@return#1^^M{}
\gdef\@gobble@till@return@ignore#1^^M{\ignorespaces}
\gdef\typesetcomment{\catcode`\%=13\def%{\@typeset@till@return}}
\gdef\@typeset@till@return#1^^M{{\def%{\char`\%}\textsl{\char`\%#1}}\par}
\endgroup

\define@key{codeexample}{width}{\setlength\codeexamplewidth{#1}}
\define@key{codeexample}{graphic}{\colorlet{codebackground}{#1}}
\define@key{codeexample}{code}{\colorlet{codebackground}{#1}}
\define@key{codeexample}{execute code}{\csname code@execute#1\endcsname}
\define@key{codeexample}{code only}[]{\code@executefalse}
\define@key{codeexample}{pre}{\def\code@pre{#1}}
\define@key{codeexample}{post}{\def\code@post{#1}}
\define@key{codeexample}{vbox}[]{\def\code@pre{\vbox\bgroup\setlength{\hsize}{\linewidth-6pt}}\def\code@post{\egroup}}
\define@key{codeexample}{ignorespaces}[]{\let\@gobble@till@return=\@gobble@till@return@ignore}
\define@key{codeexample}{leave comments}[]{\def\code@catcode@hook{\catcode`\%=12}\let\commenthandler=\relax\let\typesetcomment=\relax}
\def\code@pre{}
\def\code@post{}
\def\code@catcode@hook{}

\newdimen\codeexamplewidth
\newif\ifcode@execute
\newbox\codeexamplebox
\def\codeexample[#1]{%
  \begingroup%
  \code@executetrue
  \setlength\codeexamplewidth{4cm+7pt}
  \setkeys{codeexample}{#1}%
  \parindent0pt
  \begingroup%
  \par%
  \medskip%
  \let\do\@makeother%
  \dospecials%
  \obeylines%
  \@vobeyspaces%
  \catcode`\%=13%
  \catcode`\^^M=13%
  \code@catcode@hook%
  \relax%
  \find@example}
\def\endofcodeexample#1{%
  \endgroup%
  \ifcode@execute%
    \setbox\codeexamplebox=\hbox{%
      {%
        {%
          \returntospace%
          \commenthandler%
          \xdef\code@temp{#1}% removes returns and comments
        }%
        \colorbox{codebackground}{\color{black}\ignorespaces%
          \code@pre\expandafter\scantokens\expandafter{\code@temp\ignorespaces}\code@post\ignorespaces}%
      }%
    }%
    \ifdim\wd\codeexamplebox>\codeexamplewidth%
      \def\code@start{\par}%
      \def\code@flushstart{}\def\code@flushend{}%
      \def\code@mid{\parskip2pt\par\noindent}%
      \def\code@width{\linewidth-6pt}%
      \def\code@end{}%
    \else%
      \def\code@start{%
        \linewidth=\textwidth%
        \parshape \@ne 0pt \linewidth
        \leavevmode%
        \hbox\bgroup}%
      \def\code@flushstart{\hfill}%
      \def\code@flushend{\hbox{}}%
      \def\code@mid{\hskip6pt}%
      \def\code@width{\linewidth-12pt-\codeexamplewidth}%
      \def\code@end{\egroup}%
    \fi%
    \code@start%
    \noindent%
    \begin{minipage}[t]{\codeexamplewidth}\raggedright
      \hrule width0pt%
      \footnotesize\vskip-1em%
      \code@flushstart\box\codeexamplebox\code@flushend%
      \vskip-1ex
      \leavevmode%
    \end{minipage}%
  \else%
    \def\code@mid{\par}
    \def\code@width{\linewidth-6pt}
    \def\code@end{}
  \fi%
  \code@mid%  
  \colorbox{codebackground}{%
    \begin{minipage}[t]{\code@width}%
      {%
        \let\do\@makeother
        \dospecials
        \frenchspacing\@vobeyspaces
        \normalfont\ttfamily\footnotesize
        \typesetcomment%
        \@tempswafalse
        \def\par{%
          \if@tempswa
          \leavevmode \null \@@par\penalty\interlinepenalty
          \else
          \@tempswatrue
          \ifhmode\@@par\penalty\interlinepenalty\fi
          \fi}%
        \obeylines
        \everypar \expandafter{\the\everypar \unpenalty}%
        #1}
    \end{minipage}}%
  \code@end%
  \par%
  \medskip
  \end{codeexample}
}

\def\endcodeexample{\endgroup}
%    \end{macrocode}
%
% 
% From pgfplots manual
% 
%    \begin{macrocode}
\long\def\codeexamplenl{\noexpand\par}%
\pgfqkeys{/codeexample}{%
	every codeexample/.style={
		width=3.9cm,
		/pgfplots/every axis/.append style={legend style={fill=codebackground}}
	},
	narrow/.style={width=6.9cm},
	%tabsize=4,
	%pre={\begin{minipage}{\linewidth}\begingroup},
	%post={\endgroup\end{minipage}},
	%vbox,
	%newline=\codeexamplenl,
}
%%% Local Variables: 
%%% mode: latex
%%% TeX-master: "beameruserguide"
%%% End: 
%    \end{macrocode}
%
%
%
% \section{Phonetic Symbols}
% \subsection{Tipa}
%
% Users that make extensive use of the Tipa symbols would
% probably have no use for this package, however now and then
% these symbols can be useful when definining words and their
% pronunciation. 
%\href{http://tex.stackexchange.com/questions/36542/using-tex-for-writing-papers-on-linguistics}{using Tex for linguistics}
%
% I am indebted to egreg at \url{http://tex.stackexchange.com/questions/64830/using-tipa-with-fontspec} for the hack to get tipa to work with fontspec.
% The \pkgname{Tipa} was developed by Rei Fukui at the Graduate School  of Humanities and Sociology,
% The University of Tokyo \cite{tipa}.

%    \begin{macrocode}
\newif\ifTIPA 
\newcommand\TIPA{\pkgname{tipa}}
\newcommand\WIPA{\pkgname{wipa}}
\ifxetex
\else
  \ifluatex
  \else
    \TIPAtrue
    \RequirePackage[tone,extra,safe]{tipa}
  \fi
\fi
%    \end{macrocode}
% 
% This is also quite useful for Wikipedia transcriptions. 
% For example `phonetics' is pronounced as  |\textipa{\sffamily f@"nEtIks}| and typed as
% |\textipa{\sffamily f@"nEtIks}|
%
% |texdoc tipaman| for the full manual if this is part of your field
% of research.
% 
% \section{Referencing}
%
% Most authors that use \LaTeXe\ develop shorthands for common tasks such as, typing
% |See figure~\ref{fig:myplot}|. The advantage of a macro is that one can be consistent
% with capitalization or abbreviations.
%
% At first I thought of providing two macros for example \cs{sref} and \cs{Sref}, however
% the problem with such an approach is internationalization. If we allow the user to
% load her language then we need to pick-up the name from the \LaTeX2e\ definitions. There
% is also the additional issue that for paragraphs and sections, sometimes people prefer
% using an abbreviation. So we stay with lowercase commands and rather set the names using
% keys in the style settings file.
% 
%    \begin{macrocode}
\cxset{ref sectionname/.store in =\refsectionname@cx,
       ref chaptername/.store in =\refchaptername@cx,
       ref appendixname/.store in = \refappendixname@cx,
       ref equationname/.store in = \refequationname@cx,
       ref figurename/.store in = \reffigurename@cx,
       ref tablename/.store in = \reftablename@cx,
       ref paragraphname/.store in =\refparagraphname@cx,
       ref examplename/.store in=\refexamplename@cx,
}
\cxset{ref sectionname = \thinspace,
       ref chaptername = Chapter,
       ref appendixname = \appendixname,
       ref equationname = Equation,
       ref figurename = \figurename,
       ref tablename  = \tablename,
       ref paragraphname = \P,
       ref examplename=Example,
}
\newcommand{\fref}[1]{\reffigurename@cx~\ref{#1}}
\newcommand{\tref}[1]{\tablename~\ref{#1}}
\newcommand{\eref}[1]{equation~\ref{#1}}
\@ifundefined{cref}{\newcommand{\cref}[1]{chapter~\ref{#1}}}{}
\newcommand{\sref}[1]{\refsectionname@cx\ref{#1}}
\newcommand{\aref}[1]{\refappendixname@cx~\ref{#1}}
\newcommand{\refPar}[1]{\refparagraphname@cx\ref{#1}} %clashes with genealogy!!
\newcommand\refSee[1]{\textit{see} \textbf{\ref{#1}}}
%    \end{macrocode}
%
%
%\subsection{meta}\label{meta}
%
% This has been lifted from |doc|
% {meta}
%    The |\meta| macro is a bit tricky. We want to allow line
%    breaks at blanks in the argument but we don't want a break
%    in between. In the past this was done by defining |\meta| in a way that a
%    \verb*+ + is active when the argument is scanned. Words are then
%    scanned into |\hbox|es. The active \verb*+ + will end the
%    preceding |\hbox| add an ordinary space and open a new
%    |\hbox|. In this way breaks are only possible at spaces.  The
%    disadvantage of this method was that |\meta| was neither robust
%    nor could it be |\protect|ed. The new implementation  fixes this
%    problem by defining |\meta| in a radically different way: we
%    prevent hypenation by defining a |\language| which has no
%    patterns associated with it and use this to typeset the words
%    within the angle brackets. see \sref{meta}
% 
%    \begin{macrocode}
\ifx\l@nohyphenation\undefined
  \newlanguage\l@nohyphenation
\fi
%    \end{macrocode}
%    
%    \begin{macrocode}
\DeclareRobustCommand\meta[1]{%
%    \end{macrocode}
%    Since the old implementation of |\meta| could be used in math we
%    better ensure that this is possible with the new one as
%    well. So we use |\ensuremath| around |\langle| and
%    |\rangle|. However this is not enough: if |\meta@font@select|
%    below expands to |\itshape| it will fail if used in math
%    mode. For this reason we hide the whole thing inside an
%    |\nfss@text| box in that case.
%    \begin{macrocode}
     \ensuremath\langle
     \ifmmode \expandafter \nfss@text \fi
     {%
      \meta@font@select
%    \end{macrocode}
%    Need to keep track of what we changed just in case the user
%    changes font inside the argument so we store the font explicitly.
%    \begin{macrocode}
      \edef\meta@hyphen@restore
        {\hyphenchar\the\font\the\hyphenchar\font}%
      \hyphenchar\font\m@ne
      \language\l@nohyphenation
      #1\/%
      \meta@hyphen@restore
     }\ensuremath\rangle
}
%    \end{macrocode}
% 
%
%
% begin{macro}{meta@font@select} 
%  	We default the definition to upshape.
%    \begin{macrocode}
\def\meta@font@select{\upshape}
%    \end{macrocode}
% 
%
% begin{macro}{macro} 
%	The \cs{macro} environment is straight out of the
%	\pkg{doc} also. We redefine it here to allow usage in documents that have not 
%	preloaded the package.
%
%    \begin{macrocode}
\def\macro{\begingroup
   \catcode`\\12
   \MakePrivateLetters \m@cro@ \iftrue}
%    \end{macrocode}
% 
%
% begin{macro}{environment}
%    The ``environment'' envrironment will be implemented just like the
%    ``macro'' environment flagging any differences in the code by
%    passing |\iffalse| or |\iftrue| to the |\m@cro@| environment
%    doing the actual work.
%    \begin{macrocode}
\def\environment{\begingroup
   \catcode`\\12
   \MakePrivateLetters \m@cro@ \iffalse}
%    \end{macrocode}
% 
%
%    After scanning the argument we close the group to get the normal
%    |\catcode|$\,$s back. Then we assign a special value to
%    |\topsep| and start a \textsf{trivlist} environment. (Modified for normal indexing by YL)
%
%    \begin{macrocode}
\long\def\m@cro@#1#2{\index{\string#2}\endgroup \topsep\MacroTopsep \trivlist
%    \end{macrocode}
% We also save the name being described in |\saved@macroname| for
% 
%    \begin{macrocode}
   \edef\saved@macroname{\string#2}%
%    \end{macrocode}
%    Now there follows a variation of |\makelabel| which is used
%    should the environment not be nested, or should it lie between
%    two successive || instructions or explanatory
%    text.  One can recognize this with the switch |\if@inlabel|
%    which will be |true| in the case of successive |\item|
%    commands.
%
%    \begin{macrocode}
  \def\makelabel##1{\llap{##1}}%\llap
%    \end{macrocode}
%
%    If |@inlabel| is |true| and if $\verb=\macro@cnt= > 0$
%    then the above definition needs to be changed, because in this
%    case \LaTeX{} would otherwise put the labels all on the same line
%    and this would lead to them being overprinted on top of each
%    other.  Because of this |\makelabel| needs to be redefined
%    in this case.
%    \begin{macrocode}
  \if@inlabel
%    \end{macrocode}
%    If |\macro@cnt| has the value $1$, then we redefine
%    |\makelabel| so that the label will be positioned in the
%    second line of the margin.  As a result of this, two macro names
%    appear correctly, one under the other.  It's important whilst
%    doing this that the generated label box is not allowed to have
%    more depth than a normal line since otherwise the distance
%    between the first two text lines of \TeX{} will be incorrectly
%    calculated. The definition should then look like:
%\begin{verbatim}
%     \def\makelabel##1{\llap{\vtop to \baselineskip
%          {\hbox{\strut}\hbox{##1}\vss}}}
%\end{verbatim}
%    Completely analogous to this is the case where labels need to be
%    placed one under the other.  The lines above are only an example
%    typeset with the \textsf{verbatim} environment. To produce the real
%    definition we save the value of |\macro@cnt| in
%    |\count@| and empty the temp macro |\@tempa| for later
%    use.
%    \begin{macrocode}
    \let\@tempa\@empty \count@\macro@cnt
%    \end{macrocode}
%    In the following loop we append for every already typeset label
%    an |\hbox{\strut}| to the definition of |\@tempa|.
%    \begin{macrocode}
    \loop \ifnum\count@>\z@
      \edef\@tempa{\@tempa\hbox{\strut}}\advance\count@\m@ne \repeat
%    \end{macrocode}
%    Now be put the definition of |\makelabel| together.
%
%    \begin{macrocode}
    \edef\makelabel##1{\llap{\vtop to\baselineskip
                               {\@tempa\hbox{##1}\vss}}}%
%    \end{macrocode}
%    Next we increment the value of the nesting depth counter.  This
%    value inside the \textsf{macro} environment is always at least one
%    after this point, but its toplevel definition is zero. Provided
%    this environment has been used correctly, $|\macro@cnt|=0$
%    should not occur when |@inlabel|=\textsf{true}.  It is
%    however possible if this environment is used within other list
%    environments (but this would have little point).
%    \begin{macrocode}
    \advance \macro@cnt \@ne
%    \end{macrocode}
%    If |@inlabel| is false we reset |\macro@cnt| assuming
%    that there is enough room to print the macro name without
%    shifting.
%    \begin{macrocode}
  \else  \macro@cnt\@ne  \fi
%    \end{macrocode}
%    Now the label will be produced using |\item|. The following
%    line is only a hack saving the day until a better solution is
%    implemented.  We have to face two problems: the argument might be
%    a |\par| which is forbidden in the argument of other macros
%    if they are not defined as |\long|, or it is something like
%    |\iffalse| or |\else|, i.e.\ something which will be
%    misinterpreted when \TeX{} is skipping conditional text. In both
%    cases |\item| will bomb, so we protect the argument by using
%    |\string|.
%    \begin{macrocode}
  \edef\@tempa{\noexpand\item[%
%    \end{macrocode}
%    Depending on whether we are inside a ``macro'' or ``environment''
%    environment we use |\PrintMacroName| or |\PrintEnvName| to
%    display the name.
%    \begin{macrocode}
     #1%
       \noexpand\PrintMacroName
     \else
       \noexpand\PrintEnvName
     \fi
     {\string#2}]}%
  \@tempa
%    \end{macrocode}
%    At this point we also produce an index entry.  Because it is not
%    known which index sorting program will be used, we do not use the
%    command |\index|, but rather a command
%    |\SpecialMainIndex| after advancing the counter for indexing
%    by line number.  This may be redefined by the user in
%    order to generate an index entry which will be understood by the
%    index program in use (note the definition of
%    |\SpecialMainIndex| for our installation).
%
%    We advance the current codeline number and after producing an
%    index entry revert to the original value
%    \begin{macrocode}
  \global\advance\c@CodelineNo\@ne
%    \end{macrocode}
%    Again the macro to call depends on the environment we are
%    actually in.
%    \begin{macrocode}
   #1%
      \nobreak
      \DoNotIndex{#2}%
   \else
      \SpecialMainEnvIndex{#2}\nobreak
   \fi
  \global\advance\c@CodelineNo\m@ne
%    \end{macrocode}
%    The |\nobreak| is needed to prevent a page break after the
%    |\write| produced by the |\SpecialMainIndex| macro.  We
%    exclude the new macro in the cross-referencing feature, to
%    prevent spurious non-main entry references.  Regarding possibly
%    problematic arguments, the implementation takes
%    care of |\par| and the conditionals are uncritical.
%
%    Because the space symbol should be ignored between the
%    |{...}| and the following text we must take
%    care of this with |\ignorespaces|.
%    \begin{macrocode}
  \ignorespaces}
%    \end{macrocode}
% 
%	We now ready to define the code for the end of the environments.	
%	
% {endmacro}
% {endenvironment}
%     Older releases of this environment omit the |\endgroup| token,
%     when being nested. This was done to avoid unnessary stack usage.
%     However it does not work if \textsf{macro} and
%     \textsf{environment} environments are mixed, therefore we now
%     use a simpler approach.
%
%    \begin{macrocode}
\let\endmacro \endtrivlist
\let\endenvironment\endmacro
%    \end{macrocode}
%  
%  
%
% {MacroTopsep}
%    Here is the default value for the |\MacroTopsep| parameter
%    used above.
%    \begin{macrocode}
\newskip\MacroTopsep     \MacroTopsep = 7pt plus 2pt minus 2pt
%    \end{macrocode}
% 
%
%
% \subsection{Formatting the margin}
%
% The following three macros should be user definable.
% Therefore we define those macros only if they have not already
% been defined.
%
% begin{macro}{PrintMacroName}
% egin{macro}{PrintEnvName}
% begin{macro}{PrintDescribeMacro}
% begin{macro}{PrintDescribeEnv}
%    The formatting of the macro name in the left margin is done by
%    these macros. We first set a |\strut| to get the height and
%    depth of the normal lines. Then we change to the
%    |\MacroFont| using |\string| to |\catcode| the
%    argument to other (assuming that it is a macro name). Finally we
%    print a space.  The font change remains local since this macro
%    will be called inside an |\hbox|. NEED TO FIX
%    \begin{macrocode}
\@ifundefined{PrintMacroName}
   {\def\PrintMacroName#1{\strut \MarginMacroFonts \string #1\ }}{\def\PrintMacroName#1{\strut \MarginMacroFonts \string #1\ }}
%    \end{macrocode}
%    We use the same formatting conventions when describing a macro.
%    \begin{macrocode}
\@ifundefined{PrintDescribeMacro}
   {\def\PrintDescribeMacro#1{\strut \MacroFonts \string #1\ }}{\def\PrintDescribeMacro#1{\strut \MarginMacroFonts \string #1\ }}
%    \end{macrocode}
%    To format the name of a new environment there is no need to use
%    |\string|.
%    \begin{macrocode}
\@ifundefined{PrintDescribeEnv}
   {\def\PrintDescribeEnv#1{\strut \MacroFonts #1\ }}{\def\PrintDescribeEnv#1{\strut \MarginMacroFonts #1\ }}
\@ifundefined{PrintEnvName}
   {\def\PrintEnvName#1{\strut \MarginMacroFonts #1\ }}{\def\PrintEnvName#1{\strut \MarginMacroFonts #1\ }}
%    \end{macrocode}

%
% begin{macro}{MarginMacroFont} As we dont care for older versions of LaTeX we simplify the
%	code provide by \pkg{doc}. We also add a hook for color.
%	as we do not expect that the package will be used in places with no colour support.
%	The command used in the original \pkg{doc} is the same as the one used to
% 	typeset the code for |macrocode|, however we wish to have the option to color
%	the margin macros separately.
%	
%    \begin{macrocode}
\ifxetex
  \def\MarginMacroFonts{\color{spot!60}\ttfamily}
\else
  \ifluatex
    \def\MarginMacroFonts{\color{spot!60}\ttfamily}
  \else
    \def\MarginMacroFonts{%
                  \fontencoding\encodingdefault
                   \fontfamily\ttdefault
                   \fontseries\mddefault
                   \fontshape\updefault
                   \color{red}\small}%
  \fi
\fi
%    \end{macrocode}
% 
%
% 
% \section{Code demo environments}
%
%	To demonstrate LaTeX code it is sometimes desirable to have the code
%	be executed. This was pioneered in a number of packages. One of
%	the better packages to do so is \pkg{tcolorbox}. We use it to define
%	a special environment.
%

% \begin{docEnvironment}{texexample}{ \marg{title} \marg{label for referencing} } 
% The environment |texexample| will list the code
%	using the \pkgname{listings} package, so we can have a nice box and shows the
%	output at the bottom section.
%	\end{docEnvironment}
%	
%	First we define a new counter which resets at every chapter. If |c@chapter|
%	is not defined we reset it based on sections.
%
% \begin{enumerate}
%	\item [\#1] Title of the example
%	\item [\#2] label for referencing
% \end{enumerate}
% 
%    \begin{macrocode}
  \ifx\c@chapter\@undefined
    \newcounter{texexp}[section]
    \@addtoreset{c@texexp}{c@section}
  \else
    \newcounter{texexp}[chapter]
    \@addtoreset{c@texexp}{c@chapter}
  \fi 
%    \end{macrocode}
%
%	
%    \begin{macrocode}
%\tcbset{listing utf8=latin1}% optional; â€™latin1â€™ is the default.
\def\thetexexp{\@arabic\c@section.\arabic{texexp}}
%    \end{macrocode}
%    \begin{macrocode}    
\tcbset{texexp/.style={% 
    fonttitle=\small\ttfamily, 
    fontupper=\small, 
    fontlower=\small,
    coltitle=black,
    colback = codebackground,% background
    colframe=codebackground, 
      %colupper=spot!,
   },
   listing options = {%
     keywordstyle=\color{thekeywordstyle},
     belowskip=0pt, 
     escapeinside={(*@}{@*)},%
     breaklines=true,%
     backgroundcolor=\color{codebackground},%
     firstnumber=last,%
     stepnumber=1,%
     upquote=true,%
     alsoletter={_,:},%
     commentstyle=\color{thecommentstyle},%
     emph={cs,new,seq,map,inline,eq,gincr,incr,IfNoValueF,if,%
            If,exist,protect,nopar,gset,%
            set,undefine,define,add,gadd,remove,div,%
            round,truncate,max,min,mod,gzero,int,exp,put,left,args,%
            zero,newcount,protected,msg,error,%
            eval,to,arabic,alph,Alph,roman,Roman,dim%
            DeclareDocumentCommand,%
            NewDocumentCommand,%
            RenewDocumentCommand,includegraphics,
            function,local,return
         },%
           %
          % For LaTeX3 we need to add these, note % is important
          % dnâ€™t miss, at the end...
          moretexcs    = {DeclareDocumentCommand,IfBooleanTF,tex_def:D,%
          cs_new:Nn,cs_new:Npn,cs_new:cn,cs_set_nopar:Npn,token_to_meaning:N,%
          %primitives
          cs:w,cs_end:,tex_underline,group_begin:, group_end:,%
          %coffins
          NewCoffin,JoinCoffins,SetHorizontalCoffin,TypesetCoffin,%
          %properties
          prop_new:N,prop_new:c,prop_put:Nnn,%
          %boolean
          bool_new:N,bool_set_true:N,bool_set_false:N,%
          bool_if:NTF,%
          hbox_to_wd:nn,%
          IfNoValueTF,%
          %token lists
          tl_new:N,tl_set:Nn,tl_concat:NNN,%
          token_to_meaning:N,%
          seq_pop_left:NN,%
          %
          %int
          int_if_exist:cT,int_use:c,int_new:c,int_new:N,int_eval:n,%
          int_add,int_use,int_to_roman,%
          %boxes
          box_new:c,hbox_set:cn,box_use:c,vbox_set:cn,box_move_down:nn,%
          %string
          str_if_eq_x:nnTF,%
          tl_tail:n,%
          DeclareObjectType,%
          DeclareTemplateInterface,%
          DeclareTemplateCode,%
          DeclareInstance,UseInstance,AssignTemplateKeys%
          keys_set,keys_define,%      
          },%
     emphstyle=\verbatimfont\bfseries\color{black!80},%
          %
   },%close listings options
      % added for better control
      arc=0pt,  
      outer arc=0pt,
      example1/.code 2 args={\refstepcounter{texexp}{\ifx#2\empty\else\label{#2}\fi}}%Reference
     \pgfkeysalso{texexp, enhanced, breakable, title={Example \thetexexp\ #1}%
 },
}
%
\newenvironment{texexp}[1]{\tcblisting{texexp,#1}}{\endtcblisting}

\newenvironment{example1}[3][]{\tcblisting{example1={#2}{#3},#1}}%
    {\endtcblisting}
%
%    \end{macrocode}
%    
%    \begin{docEnvironment}{texexample} { \oarg{} \marg{Title} \meta{label} }
%      
%    \end{docEnvironment}
%    \begin{macrocode}
\newenvironment{texexample}[3][]{\noindent\tcblisting{example1={#2}{#3},#1}}%
    {\endtcblisting}
%    
% Need to fix
\let\luaexample\texexample        
\let\endluaexample\endtexexample    
%    \end{macrocode}
%     
%    \begin{macrocode}
%\tcbset{luacode/.style={%
%      fonttitle=\small\ttfamily, 
%      fontupper=\small, 
%      fontlower=\small,
%      coltitle=black,
%      colback = codebackground,% background
%      colframe=codebackground, 
%      %colupper=spot!,
%      },
%      listing options = {
%          language={[5.2]Lua},
%          belowskip=0pt, 
%          escapeinside={(*@}{@*)},%
%          breaklines=true,%
%          backgroundcolor=\color{codebackground},%
%          firstnumber=last,%
%          stepnumber=1,%
%          upquote=true,%
%          alsoletter={_,:},%
%          commentstyle=\bfseries\color{black!90},%
%          stringstyle = \color{black!90},
%          emphstyle=\verbatimfont\bfseries\color{black!80},%
%          keywordstyle= \bfseries\color{black!80},%
%          },
%      % added for better control
%      arc=0pt,  
%      outer arc=0pt,
%      luaexp1/.code 2 args={\refstepcounter{texexp}\label{#2}}%Reference
%     \pgfkeysalso{luacode, enhanced, breakable, title={Example \thetexexp\ #1}},
%}
%\newenvironment{luaexp1}[1]{\tcblisting{luacode,#1}}{\endtcblisting}
%
%\newenvironment{luaexample}[3][]{\noindent\tcblisting{luaexp1={#2}{#3},#1}}%
%    {\endtcblisting}
%%
%    \end{macrocode} 
%
% The following demonstrates the usage.
%
% 	\begin{texexample}[]{atest}{This is a comment?}
%	  \def\demomacro{Hello World!}
%	\end{texexample}
%
% 	\begin{example}{A Test}{test}{This is a comment?}
%	  \def\demomacro{Hello World!}
%	\end{example}
%
%
%
% \section{Floats settings} 
%                   
% We use Donald Arseneau's improved float parameters. I am not too sure when this was first referenced
% once I find it, will provide a citation and or a link.
% 
% For some of the rationale behind |topfraction| values see \ref{topfraction}.
%    \begin{macrocode}
\renewcommand{\topfraction}{.85}
\renewcommand{\bottomfraction}{.7} % .3 in kernel.
\renewcommand{\textfraction}{.15}
\renewcommand{\floatpagefraction}{.7}
\renewcommand{\dbltopfraction}{.66}
\renewcommand{\dblfloatpagefraction}{.66}
\setcounter{topnumber}{9}
\setcounter{bottomnumber}{9}
\setcounter{totalnumber}{20}
\setcounter{dbltopnumber}{9}
%    \end{macrocode}
%	

%
% We done with a very long and exhausting, preamble but hopefully
% will save countless hours for other people. If you use it in your
% publication send me a copy of it.  What follow is the special keys
% for formatting sectioning commands.
% 	
% \chapter{Section Formatting}
%
% \section{Introduction}
%
%  The code that follows deals exclusively with sectioning commands.
% The macros \cs{HUGE} and \cs{HHUGE} provide larger sizes than those
% provided by \LaTeXe that are used in the production of titles and
% chapter heads.
%
% \begin{docCommand}{words@cx} {\marg{int}} Utility macro for translating a 
%   number from numbers to words.
% \end{docCommand}
%    \begin{macrocode}
\def\words@cx#1{%
  \ifcase#1 zero\or one\or two\or three\or four\or five\or six\or seven
\or eight\or nine\or ten\or eleven\or twelve\or thirteen\or
fourteen
\or fifteen\or sixteen\or seventeen\or eighteen\or nineteen \or
twenty
\or twenty one\or twenty two\or twenty three\or twenty four\or
twenty five
\or twenty six\or twenty seven \or twenty eight \or twenty
nine\or thirty
\or thirty one\or thirty two\or thirty three\or thirty four\or
thirty five
\or thirty six\or thirty seven\or thirty eight\or thirty nine\or
forty\or forty one
\or forty two \or forty three\or forty four\or forty five \or
forty six \or forty seven
\or forty eight \or forty nine\or fifty\or fifty on\or fifty
two\or fifty three
\or fifty four\or fifty five\or fifty six\or fifty seven\or
fifty eight\or fifty nine
  \or sixty \or sixty one \or sixty two
  \or sixty three \or sixty four \or sixty five
    \else
    #1
    %\@ctrerr
    \fi
}

\def\Words@cx#1{%
\ifcase#1 Zero\or One\or Two\or Three\or Four\or Five\or Six\or
Seven\or Eight\or Nine\or Ten\or
Eleven\or Twelve\or Thirteen\or Fourteen\or Fifteen\or
Sixteen\or Seventeen\or Eighteen\or Nineteen \or Twenty\or
Twenty One\or Twenty Two\or Twenty Three\or Twenty Four\or
Twenty Five\or Twenty Six\or Twenty Seven \or Twenty Eight \or
Twenty Nine\or Thirty\or Thirty One\or Thirty Two\or Thirty
Three\or Thirty Four\or Thirty Five\or Thirty Six\or Thirty
Seven\or Thirty Eight\or Thirty Nine\or Forty\or Forty One\or
Forty Two \or Forty Three\or Forty Four\or Forty Five \or Forty
Six \or Forty Seven\or Forty Eight \or Forty Nine\or Fifty\or
Fifty One\or Fifty Two\or Fifty Three\or Fifty four\or Fifty
Five\or Fifty Six\or Fifty Seven\or Fifty Eight\or Fifty Nine\or
Sixty \or Sixty One \or Sixty Two
\or Sixty Three \or Sixty Four \or Sixty Five \or SixtySix \or SixtySeven
\or Sixty Eight \or SixtyNine \or Seventy \or Seventy One \or Seventy Two
\else
#1
%\@ctrerr
\fi}

\def\WORDS@cx#1{%
\ifcase#1 ZERO\or ONE\or TWO\or THREE\or FOUR\or FIVE\or SIX\or
SEVEN\or EIGHT\or NINE\or TEN\or
ELEVEN\or TWELVE\or THIRTEEN\or FOURTEEN\or FIFTEEN\or
SIXTEEN\or SEVENTEEN\or EIGHTEEN\or NINETEEN \or TWENTY\or
TWENTY ONE\or TWENTY TWO\or TWENTY THREE\or TWENTY FOUR\or
TWENTY FIVE\or TWENTY SIX\or TWENTY SEVEN \or TWENTY EIGHT \or
TWENTY NINE\or THIRTY\or THIRTY ONE\or THIRTY TWO\or THIRTY
THREE\or THIRTY FOUR\or THIRTY FIVE\or THIRTY SIX\or THIRTY
SEVEN\or THIRTY EIGHT\or THIRTY NINE\or FORTY\or FORTY ONE\or
FORTY TWO \or FORTY THREE\or FORTY FOUR\or FORTY FIVE\or FORTY
SIX\or FORTY SEVEN\or FORTY EIGHT\or FORTY NINE\or FIFTY\or
FIFTY ONE\or FIFTY TWO\or FIFTY THREE\or FIFTY FOUR\or FIFTY
FIVE\or FIFTY SIX\or FIFTY SEVEN\or FIFTY EIGHT\or FIFTY NINE\or
SIXTY\or SIXTY ONE\or SIXTY TWO\or SIXTY THREE \or SIXTY FOUR\or
SIXTY FIVE\or SIXTY SIX\or SIXTY SEVEN\or SIXTY EIGHT\or SIXTY
NINE\or SEVENTY\or SEVENTY ONE\or SEVENTY TWO\or SEVENTY
THREE\or SEVENTY FOUR\or SEVENTY FIVE\or SEVENTY SIX\or SEVENTY
SEVEN\or SEVENTY EIGHT\or SEVENTY NINE\or EIGHTY\or EIGHTY
ONE\or EIGHTY TWO\or EIGHTY THREE\or EIGHTY FOUR\or EIGHTY
FIVE\or EIGHTY SIX\or EIGHTY SEVEN\or EIGHTY EIGHT\or EIGHTY
NINE\or NINETY \or NINETY ONE \or NINETY TWO \or NINETY THREE
\or NINETY FOUR \or NINETY FIVE
\else
#1
%\@ctrerr
\fi}
   
\def\ORDINALS@cx#1{%
\ifcase#1 ZEROETH\or FIRST\or SECOND\or THIRD\or FOURTH\or
FIFTH\or SIXTH\or SEVENTH\or EIGHTTH\or NINTH\or TENTH\or
ELEVENTH\or TWELFTH\or THIRTEENTH\or FOURTEENTH\or FIFTEENTH\or
SIXTEENTH\or SEVENTEEN\or EIGHTEEN\or NINETEEN \or TWENTY\or
TWENTY ONE\or TWENTY TWO\or TWENTY THREE\or TWENTY FOUR\or
TWENTY FIVE\or TWENTY SIX\or TWENTY SEVEN \or TWENTY EIGHT \or
TWENTY NINE\or THIRTY\or THIRTY ONE\or THIRTY TWO\or THIRTY
THREE\or THIRTY FOUR\or THIRTY FIVE\or THIRTY SIX\or THIRTY
SEVEN\or THIRTY EIGHT\or THIRTY NINE\or FORTY\or FORTY ONE\or
FORTY TWO \or FORTY THREE\or FORTY FOUR\or FORTY FIVE\or FORTY
SIX\or FORTY SEVEN\or FORTY EIGHT\or FORTY NINE\or FIFTY\or
FIFTY ONE\or FIFTY TWO\or FIFTY THREE\or FIFTY FOUR\or FIFTY
FIVE\or FIFTY SIX\or FIFTY SEVEN\or FIFTY EIGHT\or FIFTY NINE\or
SIXTY\or SIXTY ONE\or SIXTY TWO\or SIXTY THREE \or SIXTY FOUR\or
SIXTY FIVE \or SIXTY SIX \or SIXTY SEVEN \or SIXTY EIGHT \or SIXTY NINE
\or SEVENTY \or SEVENTY ONE \or SEVENTY TWO \or SEVENTY THREE
\or SEVENTY FOUR \or SEVENTY FIVE \or SEVENTY SIX \or SEVENTY SEVEN
\or SEVENTY EIGHT \or SEVENTY NINE \or EIGHTY
\else
#1
%\@ctrerr
\fi}

\def\ordinals@cx#1{%
  \ifcase#1 Zeroeth\or First\or Second\or Third\or Fourth\or Fifth\or Sixth
  \or Seventh\or Eighth\or Ninth\or Tenth\or
 Eleventh\or Twelfth\or Thirteenth\or Fourteenth\or Fifteenth
\or SIXTEENTH\or SEVENTEEN\or EIGHTEEN\or NINETEEN \or TWENTY\or
TWENTY ONE\or TWENTY TWO\or TWENTY THREE\or TWENTY FOUR\or
TWENTY FIVE\or TWENTY SIX\or TWENTY SEVEN \or TWENTY EIGHT \or
TWENTY NINE\or THIRTY\or THIRTY ONE\or THIRTY TWO\or THIRTY
THREE\or THIRTY FOUR\or THIRTY FIVE\or THIRTY SIX\or THIRTY
SEVEN\or THIRTY EIGHT\or THIRTY NINE\or FORTY\or FORTY ONE\or
FORTY TWO \or FORTY THREE\or FORTY FOUR\or FORTY FIVE\or FORTY
SIX\or FORTY SEVEN\or FORTY EIGHT\or FORTY NINE\or FIFTY\or
FIFTY ONE\or FIFTY TWO\or FIFTY THREE\or FIFTY FOUR\or FIFTY
FIVE\or FIFTY SIX\or FIFTY SEVEN\or FIFTY EIGHT\or FIFTY NINE\or
SIXTY\or SIXTY ONE\or SIXTY TWO\or SIXTY THREE \or SIXTY FOUR\or
SIXTY FIVE\or SIXTY SIX \or SIXTY SEVEN \or \else
#1
%\@ctrerr
\fi
}

%    \end{macrocode}
% 
%
%
% \subsection{General Utility Environments}
%
%
%    \begin{macrocode}
\newenvironment{absolutequote}
               {\list{}{\leftmargin2cm\rightmargin\leftmargin}%
                \item\relax\footnotesize}
               {\endlist}

\newenvironment{summary}
               {\list{}{\listparindent0pt %
                        \itemindent\listparindent
                        \leftmargin0pt
                        \rightmargin\leftmargin
                        \parsep\z@ \@plus\p@}%
                \item\relax\itshape}
               {\endlist}
%
\def\solution{%
   \everypar{}
   \parindent0pt
  \leavevmode\par
  \makebox{\llap{\bfseries\textit{Solution }:}\thinspace}%
  \parindent2em
  }
%    \end{macrocode}
%
% \subsection{Setting up the key system}
%
% We are going to use a few conditionals and we start by defining 
% them here:
%
%    \begin{macrocode}
\newif\if@left
\newif\if@right
\newif\if@center
\@leftfalse
\@rightfalse
\@centerfalse
% newifs for number position
\newif\if@lefttitle
\newif\if@righttitle
\newif\if@leftname
\newif\if@rightname
\newif\if@chapterspaceout\@chapterspaceoutfalse
\newif\if@soulspaceout\@soulspaceoutfalse
\newif\if@numberspaceout\@numberspaceoutfalse
\newif\if@titlespaceout\@chapterspaceoutfalse
\newif\if@sectionspaceout\@sectionspaceoutfalse
\newif\if@openanywhere\@openanywherefalse
%    \end{macrocode}
%
% The standard LaTeX2e settings does not allow for open left chapters.
% However, quite a few designs do have this incorporated so we add an
% openany boolean.
%    \begin{macrocode}
\newif\if@openleft\@openleftfalse
\newif\if@openany\@openanyfalse
%    \end{macrocode}
%
% Some publications allow chapters to be written by different authors
% we provide a conditional for this. This also makes the package more general.
% 
%    \begin{macrocode}
\newif\if@special\@specialfalse
\newif\if@chaptertitlespecial
\@chaptertitlespecialfalse

\newif\if@authorblock
%    \end{macrocode}
%
% We are going to allow the user to use a key to add a toc, also
% wea re allowing to incorporate images in such table of contents.
% We creating two conditionals to hold this information.
%
%    \begin{macrocode}
\newif\if@toc  \@toctrue
\newif\if@tocimage \@tocimagefalse
%    \end{macrocode}
%
% \subsection{Defining Document Keys}
%
% As we aim to make the package generic to be used with any base class
% we define some conditionals and keys.
%
%    \begin{macrocode}
\newif\if@book
\newif\if@report
\newif\if@article
\cxset{document type/.is choice,
  document type/book/.code = {\@booktrue},
  document type/article/.code = {\@reporttrue},
  document type/report/.code = {\@articletrue}, 
}
%    \end{macrocode}
%
% {setfontparam@cx} 
% {setfont@cx} 
% This macro enables font setting keys to either
% be entered by an author as  a command e.g., |\Huge| or as a macro name |Huge|. It uses
% the \pkg{etoolbox} |\ifdef| macro.
%
%    \begin{macrocode}
\ExplSyntaxOn 
\gdef\setfontparam@cx #1;{%
  \ifdefmacro{#1}{#1}{
  \csname#1\endcsname
  }%
}
\cs_new:Npn \setfont@cx #1#2#3#4 
  {
    \expandafter\setfontparam@cx#1;
    \expandafter\setfontparam@cx#2;
    \expandafter\setfontparam@cx#3;
    \expandafter\setfontparam@cx#4;
  }
\let\bold\bfseries
\let\normal\mdseries
\let\serif\rmfamily
\ExplSyntaxOff
%    \end{macrocode}
% 
% 
%
% \chapter{Layout Engine}
%
% 
%  The layout engine is used to provide a declarative interface to all sectioning
%  and ancillary commands. All keys follow a common nomenclature to make them 
%  easy to remember.
% user level parameters,
%    \begin{macrocode}
\newdimen\fboxrule
\newdimen\fboxsep
\fboxrule.4pt
\fboxsep1pt
\newdimen\fboxseptop
\newdimen\fboxsepright
\newdimen\fboxsepbottom
\newdimen\fboxsepleft
\fboxseptop\fboxsep
\fboxsepright\fboxsep
\fboxsepbottom\fboxsep
\fboxsepleft\fboxsep
\newdimen\fboxruletop
   \fboxruletop\fboxrule
\newdimen\fboxruleright
   \fboxruleright\fboxrule
\newdimen\fboxrulebottom
   \fboxrulebottom\fboxrule 
\newdimen\fboxruleleft
   \fboxruleleft\fboxrule
%    \end{macrocode}
% \section{toks registers}
% We creat a number of toks registers for later usage.
%    \begin{macrocode}

\newtoks\chapterprelimtoks
\newtoks\chaptertoks
\newtoks\numbertoks
\newtoks\titletoks
\newtoks\headingtoks 
\headingtoks={}
\newsavebox\numberbox
%    \end{macrocode}
%
% \section{Registers, booleans and preliminaries}
%
% Parametric definitions for chapters 
%    \begin{macrocode}
\@ifundefined{@openright}{%
  }{}
\def\afterindenton@cx{\def\afterindent@cx{\@afterindenttrue}}
\def\afterindentoff@cx{\def\afterindent@cx{\@afterindentfalse}}
%\edef\zeroboxalign@cx{c}
%    \end{macrocode}
%
% \subsection{Lengths}
%    \begin{macrocode}
\global\newlength\chaptermarginleft
    \setlength\chaptermarginleft{30pt}%
 

\gdef\chaptermarginleft@cx{0pt}
\def\chaptertitleblockalign{}
\newcounter{chapterdisplay} \setcounter{chapterdisplay}{0}
\newcounter{numberdisplay} \setcounter{numberdisplay}{0}
%
\gdef\numberbgcolor{spot!20}   
%    \end{macrocode}
% All chapter titles can be fully framed with borders. We create length
% registers for these and appropriate keys.
% (See style 87 for usage examples)
%    \begin{macrocode}

\ExplSyntaxOn
%
	\dim_new:c {chapter_margin_top}
	\dim_new:c {chapter_margin_right}
	\dim_new:c {chapter_margin_bottom}
	\dim_new:c {chapter_margin_left}
	\dim_new:c {chapter_margin}
	%
	\dim_new:c {chapter_border_top_width}
	\dim_new:c {chapter_border_right_width}
	\dim_new:c {chapter_border_bottom_width}
	\dim_new:c {chapter_border_left_width}
	\dim_new:c {chapter_border}
	%
	\dim_new:c {chapter_padding_top}
	\dim_new:c {chapter_padding_right}
	\dim_new:c {chapter_padding_bottom}
	\dim_new:c {chapter_padding_left}
	\dim_new:c {chapter_padding}
%
  \tl_new:N \chapter_border_top_color
  \tl_new:N \chapter_border_right_color
  \tl_new:N \chapter_border_bottom_color
  \tl_new:N \chapter_border_left_color

%
  \dim_gzero_new:N \number_margin_top
  \dim_gzero_new:N \number_margin_right
  \dim_gzero_new:N \number_margin_bottom
  \dim_gzero_new:N \number_margin_left
%
  \dim_gzero_new:N \number_border_top_width
  \dim_gzero_new:N \number_border_right_width
  \dim_gzero_new:N \number_border_bottom_width
  \dim_gzero_new:N \number_border_left_width
%  
  \dim_new:N \number_padding_top
  \dim_new:N \number_padding_right
  \dim_new:N \number_padding_bottom
  \dim_new:N \number_padding_left  
%  
  \dim_gzero_new:N \title_margin_top
  \dim_gzero_new:N \title_margin_right
  \dim_gzero_new:N \title_margin_bottom
  \dim_gzero_new:N \title_margin_left
%
  \dim_gzero_new:N \title_padding_width
  \dim_gzero_new:N \title_padding_top_width
  \dim_gzero_new:N \title_padding_left_width
  \dim_gzero_new:N \title_padding_right_width
  \dim_gzero_new:N \title_padding_bottom_width 
% 
  \dim_gzero_new:N \title_border_width
  \dim_gzero_new:N \title_border_left_width
  \dim_gzero_new:N \title_border_top_width
  \dim_gzero_new:N \title_border_right_width 
  \dim_gzero_new:N \title_border_bottom_width 
%  
  \tl_new:N \chapter_title_display_tl
  \tl_new:N \chapter_title_float_tl
  \tl_gset:Nn \chapter_title_float_tl {center}
  \tl_new:c {chapter_title_text_align}  
% 
  
\ExplSyntaxOff
%    \end{macrocode}
%
% \section{Key Handlers}
%
% This handler first checks if the font-family has been supplied as a
% list. In this case it will call check font and pick the first available
% font.
% \subsection{Font family handler}
%    \begin{macrocode}
\ExplSyntaxOn
\clist_new:N \allowed_font_family_options
\clist_gset:Nn \allowed_font_family_options 
  {
    sffamily,rmfamily,ttfamily, normal,italic,oblique,
    itshape,slshape,upshape,sans-serif,serif,monospace,
    inherit,auto
  }
% creat aliases for some of the names to match those commonly
% used in css  NEEDS TESTING 
\cs_gset_eq:cc {monospace} {ttfamily}
\cs_gset_eq:cc {serif} {rmfamily}
\cs_gset_eq:cc {non-serif} {sffamily}
  
  \pgfkeys{/handlers/.font-family~in/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \clist_if_in:NnTF \allowed_font_family_options {##1 } 
          {
           \gdef #1 {##1}
          } 
          {
            \gdef #1 {\sffamily}
          }
      }
  }      
%    \end{macrocode}
%
%  \subsection{Font face handler}  
%  The handler |.set font-face| creates a command for activating a font face
%  and also activates it? DOES NOT WORK
%  DEVELOP IDEA FURTHER
%  \begin{docCommand}{title_font_face} {\meta {font name}}
%   This peculiar handler is a store in that can be used for all elements. We defined
%   them as \meta{element}|_font_face|. This took a bit long to figure out. The
%   |allowed_font_face_options| will eventually be linked with the font loading mechanism.
%  \end{docCommand}
%    \begin{macrocode}  
\clist_new:N \allowed_font_face_options
\clist_gset:Nn \allowed_font_face_options 
  {
    sffamily,rmfamily,ttfamily, normal,italic,oblique,
    itshape,slshape,upshape,sans-serif,serif,monospace,
    inherit,auto,tiresias,arial,pan
  }
% creat aliases for some of the names to match those commonly
% used in css.    
  
  \pgfkeys{/handlers/.font-face~in/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
         \IfNoValueTF {##1} {\@empty} 
           {
            \cs_if_exist:NTF { #1 } 
              { \gdef#1 {##1} }
              { \gdef#1 {\rmfamily} } %add error trapping as well
           }
          }
               
  }        
  
  
%    \end{macrocode}
%
%    \begin{macrocode}
 \pgfkeys{/handlers/.set~font-face/.code=\pgfkeysalso{\pgfkeyscurrentpath/.code=
           \def\tempa{##1}%
           \def\tempb{normal}%
           \def#1{##1}%
           \ifx\tempa\tempb%
              \def#1{\normalfont}%
           \fi%
   }}%   
%
%    \end{macrocode}
%
% \subsection{Fonts style handler}
%  This controls the input for font-shape or font-style, which they are equivalent.
%    \begin{macrocode}
\clist_new:N \allowed_font_style_options
\clist_gset:Nn \allowed_font_style_options {normal,upshape,itshape,oblique,slshape,italic}
% create some aliases also for these options.
\cs_gset_eq:cc {normal}{upshape}  
\cs_gset_eq:cc {italic}{itshape}
\cs_gset_eq:cc {oblique}{slshape}

\pgfkeys{/handlers/.font-style~in/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \clist_if_in:NnTF \allowed_font_style_options {##1 } 
          {
           \gdef #1 {##1}
          } 
          {
            \gdef#1 {upshape} %Plus error message
          }
      }
  }  
%    \end{macrocode}
%  
%   \begin{docCommand}{title_font_weight}{\meta{font weight name}}
%     Handler for defining the font-weight of an element.
%   \end{docCommand}  
%   These are all very repetitive and could have been replaced by one
%   handler at the cost of obfuscating the code. 
%    \begin{macrocode}
\clist_new:N \allowed_font_weight_options
\clist_gset:Nn \allowed_font_weight_options 
  {
    normal,bold,bfseries,mdseries
  }
  
  \pgfkeys{/handlers/.font-weight~in/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \clist_if_in:NnTF \allowed_font_weight_options {##1 } 
          {
           \gdef #1 {##1}
          } 
          {
            \gdef #1 {\rmfamily}
          }
      }
  }

\ExplSyntaxOff   
%    \end{macrocode}
%
% \subsection{Shape handler} 
%    \begin{docCommand}{number_shape}{\meta{shape name}}
%      This handler obtains values for the shape attribute.
%    \end{docCommand} 
%
%    \begin{macrocode}
\ExplSyntaxOn
\clist_new:N \allowed_shape_options
\clist_gset:Nn \allowed_shape_options 
  {
    rectangle,rounded~rectangle,circle,ellipse, 
    diamond, starburst,none,star,custom
  }
  
  \pgfkeys{/handlers/.shape~is/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \clist_if_in:NnTF \allowed_shape_options {##1 } 
          {
           \gdef#1{##1}
          } 
          {
            \gdef#1{none} %also emit error message
          }
      }
  }
  
\ExplSyntaxOff  
%    \end{macrocode}
% \subsection{Border style option}
%    \begin{macrocode}
\ExplSyntaxOn
\clist_new:N \allowed_border_style_options
\clist_gset:Nn \allowed_border_style_options 
  {
    dash,solid,double,dotted,custom,none,
  }
  
  \pgfkeys{/handlers/.border~style~is/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \clist_if_in:NnTF \allowed_border_style_options {##1 } 
          {
           \gdef#1{##1}
          } 
          {
            \gdef#1{none} %also emit error message
          }
      }
  }
  
\ExplSyntaxOff  
%    \end{macrocode}
%
%
%  The \texttt{font-size in} handler is defined next.
%  This can be set both as a command or a name.
%  
%  \begin{docCommand} {allowed_keys_font_size} {\meta{list of allowed keys}}
%    list with all allowed keys in the |phd system|
%  \end{docCommand} 
%
%  Coding this through |expl3| is such a pleasure and cut the previous code in half! 
%  The mavericks of the LaTeX3 Team pulled it off! It also
%  enables better error trapping and the allowed words can be configurable, one day!
%  For example if 38/52 is typed one can automatically set it to a specific size?
%  Could also allow say 10pt check in list if we have them and set it.
%  The keys auto, inherit, autoscale need development.
%
%  |auto| should scale one step down from parent element.
%  |inherit| takes the same value as the parent element
%  |autoscale| will fit the contents in the width of its container
%  box. (All three for next version)
%
%    \begin{macrocode}
\ExplSyntaxOn   
  
  \clist_new:N   \allowed_keys_font_size
  \clist_gset:Nn \allowed_keys_font_size 
    { 
      normal,tiny,footnotesize,small,
      large,Large,LARGE,
      huge,Huge,HUGE,HHUGE,
      HHHUGE,auto,inherit,
      autoscale,
    }
    
  \pgfkeys{/handlers/.font-size~in/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \clist_if_in:NnTF \allowed_keys_font_size {##1 } 
          {
           \gdef #1 {##1}
          } {normalsize}
      }
  }
%    \end{macrocode}
%
% \subsection{Capitalization handler}
%  This handler is for making text upper or lower case. Took
%  a few tests to get it right! Will have to go to expl3 when
%  these work ok. \FIRE
%    \begin{macrocode}
\ExplSyntaxOn  
  \clist_new:N  \allowed_options_case 
  \clist_gset:Nn \allowed_options_case 
    { 
      lower,upper,none
    }
    
  \pgfkeys{/handlers/.case~in/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \tl_set:Nn\l_tmpa_str:N {##1}
           \str_case_x:nnTF {##1}  
             {
               { none       } { \cs_gset:Npn #1 { empty             } } 
               { lower      } { \cs_gset:Npn #1 { MakeTextLowercase } } 
               { lowercase  } { \cs_gset:Npn #1 { MakeTextLowercase } } 
               { upper      } { \cs_gset:Npn #1 { MakeTextUppercase } } 
               { uppercase  } { \cs_gset:Npn #1 { MakeTextUppercase } } 
               { upper case } { \cs_gset:Npn #1 { MakeTextUppercase } } 
             }
             {                         }
             { \cs_gset:Npn #1 {empty} }
      }
  }
\ExplSyntaxOff  
%    \end{macrocode}

% \subsection{Alignment handler}
%  This handler is for aligning text. \FIRE
%    \begin{macrocode}
\ExplSyntaxOn  
  \pgfkeys{/handlers/.textalign/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \tl_set:Nn\l_tmpa_str:N {##1}
           \str_case_x:nnTF {##1}  
             {
               { none         } { \cs_gset:Npn #1 {}                 } 
               { left         } { \cs_gset:Npn #1 { \RaggedRight }   } 
               { RaggedLeft   } { \cs_gset:Npn #1 { \RaggedLeft  }   } 
               { right        } { \cs_gset:Npn #1 { \RaggedLeft  }   } 
               { RaggedRight  } { \cs_gset:Npn #1 { \RaggedRight }   } 
               { center       } { \cs_gset:Npn #1 { \Centering   }   } 
               { centre       } { \cs_gset:Npn #1 { \Centering   }   } 
               { centering    } { \cs_gset:Npn #1 { \centering   }   }
               { Centering    } { \cs_gset:Npn #1 { \Centering   }   }
              
             }
             {                          }
             { \cs_gset:Npn #1 {empty} }
      }
  }
\ExplSyntaxOff  
%    \end{macrocode}

% \subsection{Number format handler}
%  This handler is for formatting integers in roman, arabic etc . \FIRE
%  How do you pick the counter?\FIRE abandoned for the time being
%    \begin{macrocode}
\ExplSyntaxOn 
  \cs_set:Npn \use_v:nnnnn #1#2#3#4#5 {#5}
   \cs_new:Npn \remove_the:#1
     {
       \exp_after:wN \use_v:nnnnn \token_to_str:N #1
     } 
   \cs_new:Npn \makethecmd #1#2 
     {
       \gdef\countername{\remove_the:{#1} }
       \gdef#1 {
       \expandafter\expandafter\expandafter#2
       \expandafter \csname c@\countername\endcsname
     }
   % \csname the\countername\endcsname to use
    }  
       
  \pgfkeys{/handlers/.numbering~in/.code = 
    
    \pgfkeysalso
      {  
        \pgfkeyscurrentpath/.code=
        \tl_set:Nn\l_tmpa_str:N {##1}
           \str_case_x:nnTF {##1}  
             {
               { none       } { \cs_gset:Npn #1 {}                     }
               { arabic     } { \makethecmd {#1}{\@arabic}             } 
               { Alpha      } { \makethecmd {#1}{\@Alph}               } 
               { alph       } { \makethecmd {#1}{\@alph}               } 
               { Roman      } { \makethecmd {#1}{\@Roman}              } 
               { roman      } { \makethecmd {#1}{\@roman}              }
               { WORDS      } { \makethecmd {#1}{\WORDS@cx}            }
               { Words      } { \makethecmd {#1}{\Words@cx}            }
               { words      } { \makethecmd {#1}{\words@cx}            }
               { ordinals   } { \makethecmd {#1}{\ordinals@cx}         }
               { Ordinals   } { \makethecmd {#1}{\ordinals@cx}         }
               { ORDINALS   } { \makethecmd {#1}{\ODINALS@cx}          }
               % add padzeroes later
             }
             {                         }
             { \cs_gset:Npn #1 {##1}   }
      }
  }
\ExplSyntaxOff  
%    \end{macrocode} 

%
% \subsection{Sectioning format handler}
%  This handler manages sectioning type formats. Not all of them are currently
%  defined.
%    \begin{macrocode}  
\ExplSyntaxOn
  \clist_new:N   \allowed_options_format
  \clist_gset:Nn \allowed_options_format 
    { 
      plain,block,display,runin,leftmargin,rightmargin,drop,wrap,frame,custom
    }
    
  \pgfkeys{/handlers/.format~in/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \clist_if_in:NnTF \allowed_options_format {##1 } 
          {
           \gdef #1 {##1}
          } 
          {\gdef #1 {hang}}
      }
  }
%    \end{macrocode}

% \subsection {Chapter name handler}
%  Handler for chaptername to hook to i18n functions, if set to auto
%  If empty just typesets nothing. 
%  
%    \begin{macrocode}
\clist_new:N \allowed_chapter_names_clist
\clist_gset:Nn \allowed_chapter_names_clist
  { auto, i18n, none}
\pgfkeys{/handlers/.getchaptername/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \tl_set:Nn\l_tmpa_str:N {##1}
%        \clist_if_in:NnTF \allowed_chapter_names_clist {##1 } 
%          {
          % check for none auto etc
           \str_case_x:nnTF {##1}  
             {
               { none } { \gdef#1{} } 
               { auto } { \gdef#1{\chaptername} } %hook to babel
               { i18n } { \gdef#1{\chaptername} } %hook to babl 
             }
             {            }%true
             {\gdef#1{#1} }%false
           %}  
%           { %not in clist just set to what the user wants
%             \gdef #1 {##1}
%           }
           
      }
  }

\ExplSyntaxOff   
%    \end{macrocode}
% 
% \section{Part keys and code}
%
% The Part section is pretty much similar to the chapter code. We redefine the 
% standard sectioning commands from the book class to provide for hooks and
% additional parameters. This will be the pattern for all the sectioning 
% commands that follow.
%
%    \begin{macrocode}
\ExplSyntaxOn
  \bool_new:N \partopenleft     \bool_gset_false:N \partopenleft
  \bool_new:N \partopenany      \bool_gset_false:N \partopenany
  \bool_new:N \partopenanywhere \bool_gset_false:N \partopenanywhere
  \bool_new:N \partopenright    \bool_gset_false:N \partopenright
\cxset
  {
    part~name/.store~in                      = \partname,
    part~color/.store~in                     = \part_color,
    part~background-color/.store~in          = \part_bgcolor,
    part~opening/.is~choice,
    part~opening/right/.code                 = \bool_gset_true:N \partopenright,
    part~opening/left/.code                  = \bool_gset_true:N \partopenleft,
    part~opening/any/.code                   = \bool_gset_true:N \partopenany,
    part~opening/none/.code                  = \bool_gset_true:N \partopenanywhere,
    part~opening/anywhere/.code              = \bool_gset_true:N \partopenanywhere, 
    part~opening/ifafter/.code={},
    part~font-family/.font-family~in         = \part_font_family,
    part~font-weight/.font-weight~in         = \part_font_weight,
    part~font-size/.font-size~in             = \part_font_size,
    part~font-shape/.font-style~in           = \part_font_shape,
    part~font-style/.font-style~in           = \part_font_shape,
    part~case/.case~in                       = \part_case, 
    part~numbering/.numbering~in             = \thepart,
    part~title~text-align/.textalign         = \part_title_text_align,
    part~format/.store~in                    = \part_format,
%    
    part~number~font-family/.font-family~in  = \part_number_font_family,
    part~number~font-weight/.font-weight~in  = \part_number_font_weight,
    part~number~font-size/.font-size~in      = \part_number_font_size,
    part~number~font-shape/.font-style~in    = \part_number_font_shape,
    part~number~font-style/.font-style~in    = \part_number_font_shape,
    part~number~color/.store~in              = \part_number_color,
} 
\ExplSyntaxOff  
\cxset
  {
    part opening                             = left,
    part color                               = black!90,
    part background-color                    = spot!30, 
    part name                                = PART,
    part font-size                           = Huge, 
    part font-weight                         = bold,
    part font-family                         = serif, 
    part font-shape                          = upshape,
    part number font-size                    = Huge, 
    part number font-weight                  = normal,
    part number font-family                  = sans-serif, 
    part number font-shape                   = upshape,
    part number color                        = thelightgray,
    part numbering                           = ordinals,
    part numbering                           = Words,
    part title text-align                    = center,
    part format                              = traditional,  
  }       
%    \end{macrocode}




%
% \begin{docCommand} {part} { \meta{void} }
%   The famous |\part| command can be used both for articles as well as books
%   here.
% \end{docCommand}
% As is normal with programming the user interface is much longer than the
% the code that does the actual work!
%    \begin{macrocode}
\ExplSyntaxOn
\renewcommand\part{%
  \bool_if:NTF \partopenanywhere {}
    {
      \bool_if:NT \partopenright { \cleardoublepage }
      \bool_if:NT \partopenany   { \clearpage       }
      \bool_if:NT \partopenleft  { \clearpage       }
    }
  
  \thispagestyle{plain}
  \if@twocolumn
    \onecolumn
    \@tempswatrue
  \else
    \@tempswafalse
  \fi
  \null\vfil
  \secdef\@part\@spart}
\ExplSyntaxOff  
%    \end{macrocode}
%
% \begin{docCommand} {part} {\marg{short title} \marg{long title} }
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn  
  \def\@part[#1]#2{%
    \ifnum \c@secnumdepth >-2\relax
      \refstepcounter{part}%
      \addcontentsline{toc}{part}{\thepart\hspace{1em}#1}%
    \else
      \addcontentsline{toc}{part}{#1}%
    \fi
    \markboth{}{}%
    \bgroup
    \tl_set:Nn\l_tmpa_str:N {box}
    \str_case_x:nnTF { \part_format  }  
     {
       { traditional} { \format_part_traditional:nn { part } { #1 } { #2 } }
       { box        } { \format_part_boxed:nn       { part } { #1 } { #2 } } 
       { inline     } { \format_part_inline:nn      { part } { #1 } { #2 } } 
      }
      {                                            }
      { \format_part_traditional:nn{part}{#1}{#2}  }
    \egroup
    \@endpart
}
 
    
            
\def\@spart#1{%
    {\centering
     \interlinepenalty \@M
     \normalfont
     \Huge \bfseries #1\par}%
     \@endpart}

\def\@endpart{%
              %\vfil %\newpage %was here
              \if@twoside
               \if@openright
                \null
                \thispagestyle{empty}%
               \fi
              \fi
              \if@tempswa
                \twocolumn
              \fi} 
\ExplSyntaxOff                 
%    \end{macrocode}
%
% \begin{docCommand} {format_part_traditional:nn} { \marg{part name } \marg{ unused} \marg{title }}
%  Formats a traditional part, set on its own page and centeres
% \end{docCommand}
%    \begin{macrocode} 
\ExplSyntaxOn
\cs_new:Npn \format_part_traditional:nn #1 #2 #3
  {
   \group_begin:
    \centering
     \interlinepenalty \@M
     \normalfont
     \set_color:nn {#1_number}{color}
     \set_font_parameters:n {#1_number}
     \ifnum \c@secnumdepth >-2\relax
       \partname\nobreakspace\thepart
       \par
       \vskip 20\p@
     \fi
     \group_begin:
       \set_color:nn {#1}{color}
       \set_font_parameters:n { #1 }
          #3
     \group_end:
     \par
   \group_end:  
  }
\ExplSyntaxOff  
%    \end{macrocode}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \format_part_boxed:nn #1 #2 #3
  {
    \centering
    \begin{tcolorbox}[colback=\part_bgcolor, 
                              colframe=white, 
                              arc=3mm]
     \interlinepenalty \@M
     \normalfont
     \color{\part_color}
     \ifnum \c@secnumdepth >-2\relax
       \huge\bfseries \partname\nobreakspace\thepart
       \par
       \vskip 20\p@
     \fi
     \set_font_parameters:n { #1 }
      #3\par
     \end{tcolorbox} 
  }
\ExplSyntaxOff  
%    \end{macrocode}
%
% \begin{docCommand} { set_property_from_section_name:nn } 
%                         { \marg{name of section}  \marg{suffix} }
%  Given a section name such as part gets its property.
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \get_property_from_section_name:nn #1 #2
  {
    \csname\expandafter\csname #1#2\endcsname\endcsname
  }
\cs_new:Npn \set_font_parameters:n #1
  {
     \get_property_from_section_name:nn {#1}{_font_size}
     \get_property_from_section_name:nn {#1}{_font_weight}
     \get_property_from_section_name:nn {#1}{_font_shape}
     \get_property_from_section_name:nn {#1}{_font_family}
  }

\cs_new:Npn \get_color_property:nn #1 #2  
  {
     \cs:w #1_#2 \cs_end:
  }    
\cs_new:Npn \set_color:nn #1 #2  
  {
     \color{\cs:w #1_#2 \cs_end:}
  }  
%    \end{macrocode}
%
%
%    \begin{macrocode}  
\cs_new:Npn \format_part_inline:nn #1 #2 #3
  {
    
     \begin{tcolorbox}[colback= \get_color_property:nn {#1}{bgcolor}, 
                                colframe=white, 
                                arc=3mm]
     \interlinepenalty \@M
     \normalfont
     \set_color:nn {#1}{color}
     \cs:w #1_title_text_align \cs_end:
     \ifnum \c@secnumdepth >-2\relax
       {
         \set_font_parameters:n {part_number} 
         \set_color:nn {part_number} {color}
         \partname\nobreakspace\thepart
       }
     \fi
       \set_font_parameters:n {#1} 
     \nobreakspace #3
     \par
     \end{tcolorbox} 
  }
\ExplSyntaxOff  
%    \end{macrocode}
%
%    \begin{macrocode}
\def\gluestart{\hss}\def\glueend{\hss}
%    \end{macrocode}
%
% \section{Chapter keys}
%
% It is not envisioned that the chapter name key be set directly by the user.
% This should be set by the document language tag (like Babel). 
% However, the user might decide that this is an easier approach.
%  \begin{docCommand}{chaptername}{ \meta{void}} 
%    Holds the chapter name tag such as Chapter or 'CHAPTER' or whatever
%    is typed by the user. 
%    This is also hooked here for i18n routines later, hence we get it via a handler.
% 
%  \end{docCommand}
%    \begin{macrocode}
\cxset{chapter name/.getchaptername=\chapternameint}
\cxset{chapter name= Chapter}  
  
\cxset{  
  chapter color/.store in=\chaptercolor@cx,
  chapter background-color/.store in=\chapterbgcolor,
  number background-color/.store in=\numberbgcolor,
}
\cxset{    
  chapter opening/.is choice,
  chapter opening/right/.code={\@openrighttrue},
  chapter opening/left/.code={\@openlefttrue},
  chapter opening/any/.code={\@openanytrue},
  chapter opening/none/.code={\@openanywheretrue\@openrightfalse%
                                                  \@openleftfalse\@openanyfalse},
  chapter opening/anywhere/.code={\@openanywheretrue\@openrightfalse
     \@openleftfalse\@openanyfalse},
  chapter opening/ifafter/.code={},
}
%    \end{macrocode}


%  The font options use handlers to get the values. This alows for more flexibiliy.
%    \begin{macrocode}
\ExplSyntaxOn
\cxset{%    
  chapter~font-family/.font-family~in=\chapter_font_family,
  chapter~font-weight/.font-weight~in = \chapter_font_weight,
  chapter~font-size/.font-size~in=\chapter_font_size,
  chapter~font-shape/.font-style~in=\chapter_font_shape,
  chapter~font-style/.font-style~in=\chapter_font_shape,}
\ExplSyntaxOff  
%    \end{macrocode}
%
% \subsection{Chapter display and float properties}
%
% This generates keys for float and display. The attribute display determines if the
% element is on a line of its own or not. The float determines glue to be
% set to float the element left or right.
%
%    \begin{macrocode}
\newcounter{lastelementfloat}
     \setcounter{lastelementfloat}{-1}
\newcounter{chapterfloat} 
      \setcounter{chapterfloat}{1}  
\newcounter{numberfloat} 
      \setcounter{numberfloat}{1}        
\newcounter{currentelementfloat}
      \setcounter{currentelementfloat}{-1}
%
\global\newlength\chapterborderrightwidth
    \setlength\chapterborderrightwidth{2pt} 
\global\newlength\chapterborderleftwidth
    \setlength\chapterborderleftwidth{2pt}     
\global\newlength\chapterborderbottomwidth
    \setlength\chapterborderbottomwidth{2pt}  
\global\newlength\chapterbordertopwidth
    \setlength\chapterbordertopwidth{2pt}             
%
\global\newlength\chapterpaddingleft
    \setlength\chapterpaddingleft{10pt}
\global\newlength\chapterpaddingright
    \setlength\chapterpaddingright{10pt}  
\global\newlength\chapterpaddingtop
    \setlength\chapterpaddingtop{10pt}        
\global\newlength\chapterpaddingbottom
    \setlength\chapterpaddingbottom{10pt}       
\ExplSyntaxOn
\int_zero_new:c {chapterdisplaycounter}
\int_zero_new:c {chapterfloatcounter}
%    \end{macrocode}
%
% \begin{docCommand}{phdsetcounter}{ \marg{counter name} \marg{int value} }
%    Sets an integer counter to a value.
% \end{docCommand}
%    \begin{macrocode}
\cs_gset:Npn \phd_set_counter:nn #1 #2 
 {
   \int_gset:cn {#1} {#2}
 }  
\ExplSyntaxOff
%    \end{macrocode}
%
% \subsubsection{Chapter name floating and display properties}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cxset{%  
  chapter~display/.is~choice,
  chapter~display/inline/.code=\global\setcounter{chapterdisplay}{0}
                               \phd_set_counter:nn {chapterdisplaycounter}{0},
  chapter~display/block/.code=\global\setcounter{chapterdisplay}{2}
                               \phd_set_counter:nn {chapterdisplaycounter}{2}, 
  chapter~display/none/.code=\global\setcounter{chapterdisplay}{0}
                               \phd_set_counter:nn {chapterdisplaycounter}{0},                              
%    
  chapter~float/.is~choice,
  chapter~float/none/.code= \global\setcounter{chapterfloat}{0}%
                            \phd_set_counter:nn {chapterfloatcounter}{0},
  chapter~float/left/.code= \global\setcounter{chapterfloat}{0}
                            \phd_set_counter:nn {chapterfloatcounter}{0},
% center = 1                             
  chapter~float/center/.code= \global\setcounter{chapterfloat}{1}%
                             \phd_set_counter:nn {chapterfloatcounter}{1}, 
% right = 2                             
  chapter~float/right/.code= \global\setcounter{chapterfloat}{2}%
                             \phd_set_counter:nn {chapterfloatcounter}{2},%   
 }
\ExplSyntaxOff 
\cxset{chapter display=block,
       chapter float=left,
       } 
%    \end{macrocode}
%
%
% \subsection{Chapter content before and after}
%
%    \begin{macrocode}   
\ExplSyntaxOn
\cxset
  {
    chapter~before~content/.store~in=\chapter_before_content,
    chapter~before/.store~in=\chapter_before,
  }
   
\cxset
  {
    chapter~before~content = ,
    chapter~before=,
  }
\ExplSyntaxOff 
%    \end{macrocode}
% 
% \subsection{Chapter margins and padding}
%
% The dual code is interim we will avoid all these in the future
%    \begin{macrocode}
\ExplSyntaxOn

\cxset{   
  chapter~margin-top/.code= \dim_gset:cn { chapter_margin_top } { #1 },
  chapter~margin-left/.code=\setlength\chaptermarginleft{#1}%
                            \global\chaptermarginleft\chaptermarginleft\relax
                            \def\gluestart{\hskip#1}%
                            \def\glueend{\hss}
                            \dim_gset:cn {chapter_margin_left}{#1},
  chapter~margin-right/.code = \dim_gset:cn {chapter_margin_right} { #1 },
  chapter~margin-bottom/.code = \dim_gset:cn {chapter_margin_bottom} { #1 },                           
  }

\ExplSyntaxOff 
%    \end{macrocode}
%
% \subsection{Chapter borders}
%
% Next we set keys for all border width
% \subsubsection{Chapter border widths}
%    \begin{macrocode}      
\ExplSyntaxOn
\cxset{  
  chapter~border-top-width/.code    = \dim_gset:cn {chapter_border_top_width} {#1},                                            
  chapter~border-right-width/.code  = \dim_gset:cn {chapter_border_right_width} {#1},                                                                                      
  chapter~border-bottom-width/.code = \dim_gset:cn {chapter_border_bottom_width} {#1},                                                                                                                              
  chapter~border-left-width/.code   = \dim_gset:cn {chapter_border_left_width} {#1},
 }                        
\cxset{  
  chapter~border-width/.code = \pgfkeysalso{chapter~border-top-width=#1,
                                            chapter~border-right-width=#1,
                                            chapter~border-bottom-width=#1,
                                            chapter~border-left-width=#1,
                                            },
}            
\ExplSyntaxOff                                     
%    \end{macrocode}  
% 
% \subsubsection{Chapter padding}
% We now deal with padding the same way including the generic version                                             
%    \begin{macrocode}  
\ExplSyntaxOn                                             
\cxset{
  chapter~padding-left/.code   = \dim_gset:cn {chapter_padding_left}{#1},                                                                                                                           
  chapter~padding-right/.code  = \dim_gset:cn {chapter_padding_right}{#1},                                                                                                             
  chapter~padding-top/.code    = \dim_gset:cn {chapter_padding_top}{#1},                                                                                                                                                       
  chapter~padding-bottom/.code = \dim_gset:cn {chapter_padding_bottom}{#1},                                                                                                                                                                                                 
}
%    \end{macrocode}
% In retrospect this should go in a handler
%    \begin{macrocode}
\cxset{
  chapter padding/.code={
    \def\@tempa{none}%
    \def\@tempb{#1}%
    \ifx\@tempa\@tempb%
      \global\setlength\chapterpaddingleft{0pt}%
      \global\setlength\chapterpaddingright{0pt}%
      \global\setlength\chapterpaddingtop{0pt}%
      \global\setlength\chapterpaddingbottom{0pt}%
    \else
      \setlength\chapterpaddingleft{#1}%
      \global\chapterpaddingleft\chapterpaddingleft\relax                                                                                                                           
      \setlength\chapterpaddingright{#1}%
      \setlength\chapterpaddingtop{#1}%
      \setlength\chapterpaddingbottom{#1}%
    \fi}
}    

%    \end{macrocode}
%
% \subsubsection{Chapter border colors}
%
% The series of keys denoted by \meta{chapter}\meta{border}\meta{top}\meta{color}
% are used to store the colors of borders. We need to be careful here not to get
% any expansion problems.

%    \begin{macrocode}
\cxset{chapter~border-top-color/.code    = \tl_gset:Nn \chapter_border_top_color {#1},
  chapter~border-right-color/.code       = \tl_gset:Nn \chapter_border_right_color {#1},
  chapter~border-bottom-color/.code      = \tl_gset:Nn \chapter_border_bottom_color{#1},
  chapter~border-left-color/.code        = \tl_gset:Nn \chapter_border_left_color {#1},
  }
 \cxset{%
  chapter~border-top-color=sweet,
  chapter~border-right-color=sweet,
  chapter~border-bottom-color=sweet,
  chapter~border-left-color=sweet,
}%
%                            
\cxset{chapter~border-color/.code=\pgfkeysalso{chapter~border-top-color={#1},%
                                               chapter~border-right-color={#1},
                                               chapter~border-bottom-color={#1},
                                               chapter~border-left-color={#1}}}%
%                                                           
 % set some defaults                                                                
\cxset{%
  chapter~border-top-color=sweet,
  chapter~border-right-color=sweet,
  chapter~border-bottom-color=sweet,
  chapter~border-left-color=white,
  chapter~border-color=blue,
 }%
\ExplSyntaxOff          
%    \end{macrocode}    
%
% \subsubsection{Chapter letter spacing} 
% NEEDS REVISITING TO ALLOW FOR  SOUL OR MICROTYPE  LEAVE ALSO LETTER SPACING 
% ALSO TO TAKE OUT SPACEOUT
%    \begin{macrocode}   
\ExplSyntaxOn


\ExplSyntaxOff                                   
\cxset{
  chapter after/.store in=\chapterafter@cx,
  chapter spaceout/.is choice,
  chapter spaceout/soul/.code=\@chapterspaceouttrue\@soulspaceouttrue,
  chapter spaceout/microtype/.code=\@chapterspaceouttrue\@soulspaceouttrue,
  chapter spaceout/none/.code=\@chapterspaceoutfalse\@soulspaceoutfalse,
  %  
%  chapter letter-spacing/.is choice,
%  chapter letter-spacing/soul/.style=\pgfkeysalso{chapter spaceout=soul},
%  chapter letter-spacing/microtype/.style=\pgfkeysalso{chapter spaceout=microtype},
%  chapter letter-spacing/true/.code=\@chapterspaceouttrue,
%  chapter letter-spacing/none/.code=\@chapterspaceoutfalse,
%  chapter letter-spacing/false/.code=\@chapterspaceoutfalse,
 }  
%    \end{macrocode}  
%
%  Next we define styles. This must be distinguished from shapes and only
%  apply to rectangular boxed content, using \cmd{\phd@fbox}
%
%    \begin{macrocode}
\ExplSyntaxOn
\tl_new:c {chapter_border_top_style}
\tl_new:c {chapter_border_right_style}
\tl_new:c {chapter_border_bottom_style}
\tl_new:c {chapter_border_left_style}
\cxset{
  chapter~border-top-style/.code      = \tl_gset:cn {chapter_border_top_style}{#1}, 
  chapter~border-right-style/.code    = \tl_gset:cn {chapter_border_right_style}{#1}, 
  chapter~border-bottom-style/.code   = \tl_gset:cn {chapter_border_bottom_style}{#1},
  chapter~border-left-style/.code     = \tl_gset:cn {chapter_border_left_style}{#1}, 
  chapter~border-style/.code          = \pgfkeysalso{chapter~border-top-style=#1,%
                              chapter~border-right-style=#1,%
                              chapter~border-bottom-style=#1,%
                              chapter~border-left-style=#1%,
  },
}
\ExplSyntaxOff
\cxset{
  chapter border-top-style=solid,
  chapter border-right-style=solid,
  chapter border-bottom-style=solid,
  chapter border-left-style=solid}  
%    \end{macrocode}

%
%  \begin{docCommand}{chaptershape} {\meta{shape name}}
%  Defines the shape for the Chapter
%  \end{docCommand}
%
%    \begin{macrocode}
%
\ExplSyntaxOn
  \cxset{chapter~shape/.shape~is = \chaptershape, }
  \cxset{chapter~shape = diamond}
\ExplSyntaxOff
%  
%    \end{macrocode}
%
% \cxset{chapter shape = diamond}
% \subsection{Chapter title keys}
% 
%   We define  key-sets for the chapter title block. The text is typeset in a minipage
%   of width \docAuxCommand {chapter_title_text_width}. Any borders and padding
%   are added by the layout engine and then the block is aligned as per the rules 
%   and settings described later on.
% 
%    \begin{macrocode}  
\ExplSyntaxOn
\dim_new:N \chapter_title_text_width
\cxset{ 
  chapter~title~width/.code =  \dim_gset:Nn \chapter_title_text_width {#1},
  title~text-width/.style = { chapter~title~width= {#1} }
}    
\ExplSyntaxOff
%    \end{macrocode}
%
%  Next we deal with the title alignment. The title is typeset in a minipage
%  We allow for the total to be positioned. The key text-align specifies the alignment
%  of the inner text block. 
%
%  TeX does not distinguish the type of boxes found in CSS. As a matter of fact TeXâ€™s model
%  is much more complicated and also allows the different types to be nested indefinetly.
%  Rendering depends on the typesetting mode. 
%  The display block, should just add |\vskip|s and terminate horizontal mode. This might
%  avoid to have to type some keys.
%
% \begin{docKey}{title display}{ = \oarg{none,block,inline,inline-block}}{default block}
% The title display key determines how the title is aligned with its neighbours.
% It defaults to block, which it means is typeset on its own line.
%
%  |chapter_title_display = none|   none is left left aligned\\
%  |chapter_title_display = block|   block typeset in minipage\\
%  |chapter_title_display = in-line block|   in-line block minipage but cannot float\\
%  |chapter_title_display = inline|   inline equivalent to 0 consider removing \\ 
% \end{docKey}
%    \begin{macrocode}
\ExplSyntaxOn
%
\cxset{
  title~display/.is~choice,
  title~display/none/.code          = \tl_gset:Nn \chapter_title_display_tl{none},
  title~display/block/.code         = \tl_gset:Nn \chapter_title_display_tl{block},
  title~display/in-line block/.code = \tl_gset:Nn \chapter_title_display_tl{in-line block},
  title~display/inline/.code        = \tl_gset:Nn \chapter_title_display_tl{inline},
 }
\ExplSyntaxOff
\cxset{title display=block}  %!REMOVE PUT AT DEFAULTS
%    \end{macrocode}
% 
%  \begin{docCommand}{chapter_title_float_tl} {\meta{option}}
%  This key determines if the title block can float. This is used together 
%  with the display property described above. For an element to float the |title  display| must be block
%  and the |title| float to one of |left|, |right| or |center|. The last one is a
%  heretical departure from the css standard model, which uses |margin:auto| for this. 
%  Not too difficult to incorporate, maybe I should do this at the next version.
%  \end{docCommand}
% 
%    \begin{macrocode}
\ExplSyntaxOn
\cxset{
  title~float/.is~choice,
  title~float/none/.code   = \gdef\chapter_title_float_tl {none},    
  title~float/left/.code   = \gdef\chapter_title_float_tl {left},
  title~float/right/.code  = \gdef\chapter_title_float_tl {right},
  title~float/center/.code = \gdef\chapter_title_float_tl {center},
}
\ExplSyntaxOff
\cxset{title float=center}
%    \end{macrocode}
% 
% 
%  \begin{docCommand}{chapter_title_text_align} {\meta{void}}
%  Key setting to set inner block text alignment. This allows for more options than normal css.
%  For example we can do russian last line alignment. 
%  
% \end{docCommand}  
%
%    \begin{macrocode}  
\ExplSyntaxOn
\cxset{
  chapter~title~text-align/.is~choice,
  chapter~title~text-align/center/.code = \tl_gset:cn {chapter_title_text_align}
      {\Centering},                                                                                                 
  chapter~title~text-align/centering/.code= \tl_gset:cn {chapter_title_text_align}
      {\centering},
  chapter~title~text-align/Centering/.code= \tl_gset:cn {chapter_title_text_align}
      {\Centering},                                                                                                        
  chapter~title~text-align/none/.code = \tl_gset:cn {chapter_title_text_align}{},                                                                                                 
  chapter~title~text-align/justified/.code = \tl_gset:cn {chapter_title_text_align}{},
  chapter~title~text-align/left/.code =  \tl_gset:cn {chapter_title_text_align}
      {\RaggedRight},
  chapter~title~text-align/raggedleft/.code =  \tl_gset:cn {chapter_title_text_align}
      {\RaggedLeft},
  chapter~title~text-align/right/.code =  \tl_gset:cn {chapter_title_text_align}
      {\RaggedLeft},
  chapter~title~text-align/raggedright/.code = \tl_gset:cn {chapter_title_text_align}
     {\RaggedRight},
}

%
\cxset{chapter~title~text-align=none}

\tl_new:c {chapter_title_align}
\cxset{    
  % aligning the block title 
  chapter~title~align/.is~choice,
  chapter~title~align/centering/.code=
   \tl_gset:cn {chapter_title_align}{centering},
  % alias
  chapter~title~align/center/.style= {chapter~title~align=#1} , 
%   
  chapter~title~align/raggedright/.code=,
%  
  chapter~title~align/raggedleft/.code=
    \tl_gset:cn {chapter_title_align}{raggedleft},
%                                                          
  chapter~title~align/right/.code=                                                      
    \tl_gset:cn {chapter_title_align}{right},  
%  
  chapter~title~align/left/.code=
    \tl_gset:cn {chapter_title_align}{left},
%                                                 
  chapter~title~align/none/.code=
     \tl_gset:cn {chapter_title_align}{none},
}

%  
\ExplSyntaxOff
\cxset{chapter title align=centering}
%
%    \end{macrocode}
%
% \begin {docCommand} {title_font_family} {\meta{font family name}}
%    These keys set the font parameters for the element. These are high level commands
%    \pkgname{fontspec} can be used for lower level fine-tuning, such as tags for scripts,
%    languages and other features.
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cxset{
  title~font-face/.font-face~in=\title_font_face, 
  title~font-family/.font-family~in=\title_font_family,
  title~font-weight/.font-weight~in=\title_font_weight,
  title~font-size/.font-size~in =\titlefontsize@cx,
  title~font-color/.store~in=\titlefontcolor@cx,
  title~font-shape/.font-style~in=\titlefontshape@cx
}
\ExplSyntaxOff
\cxset{title font-shape=upshape}
\cxset{title font-face=pan}
%    \end{macrocode}
%
%  Letter-spacing is handled in a similar fashion defining keys both for 
%  the common \latex community terminology (spaceout) and also
%  using |letter-spacing|.
%
%  
%    \begin{macrocode}
\cxset{  
  title spaceout/.is choice,
  title spaceout/soul/.code=\@titlespaceouttrue,
  title spaceout/none/.code=\@titlespaceoutfalse,
  title spaceout/true/.code=\@titlespaceouttrue,
  title spaceout/false/.code=\@titlespaceoutfalse,
  title letter-spacing/true/.code=\@titlespaceouttrue,
  title letter-spacing/false/.code=\@titlespaceoutfalse,  
}
%    \end{macrocode}
%
%    \begin{macrocode}
\cxset{  
  title font/.style={title font-family=#1},
  title before/.store in=\titlebefore@cx,
  title after/.store in=\titleafter@cx,
  title beforeskip/.store in=\titlebeforeskip@cx,
  }
%    \end{macrocode}
%
% \begin{docKey}{title margin-top}{ = \meta{dim}} {default 0pt}
% This family of keys are used to set the title margins. Note these are outside 
% the containing block and for the top and bottom, we need to be in vertical mode.
% \end{docKey}
%
%   \begin{macrocode}
\ExplSyntaxOn


\cxset  {          
  title~margin-top/.code    = \dim_gset:Nn \title_margin_top {#1},
  title~margin-right/.code  = \dim_gset:Nn \title_margin_right {#1},
  title~margin-bottom/.code = \dim_gset:Nn \title_margin_bottom {#1},
  title~margin-left/.code   = \dim_gset:Nn \title_margin_left {#1},
 
}    
\ExplSyntaxOff    

%    \end{macrocode}
%
% \begin{docCommand}{title_padding_top_width} { \meta{dim} }  
%    Handles all the padding settings. The padding is added outside the minipage
%    and before the border. It is equivalent to \tikzname |inner sep| and to |\fbox|'s 
%    |\fboxsep|, so no fire works here or browser wars.
% \end{docCommand}
% 
%    \begin{macrocode}
\ExplSyntaxOn
\cxset{  
   title~padding-top/.code    = \dim_gset:Nn \title_padding_top_width{#1},
   title~padding-bottom/.code = \dim_gset:Nn \title_padding_bottom_width{#1} ,
   title~padding-left/.code   = \dim_gset:Nn \title_padding_left_width{#1},
   title~padding-right/.code  = \dim_gset:Nn \title_padding_right_width{#1},
   title~padding/.style       = {title~padding-top=#1,
                                   title~padding-right=#1,
                                   title~padding-bottom=#1,
                                   title~padding-left=#1,
                                 }, 
}
\ExplSyntaxOff
%    \end{macrocode}

%
% \begin{docCommand}{title_border_top_width}{\marg {dim} }
%    Handles all the settings for the border widths. The \docAuxCommand{title_border_width}
%    sets all borders to one value.
% \end{docCommand}
%    \begin{macrocode}  
\ExplSyntaxOn  
\cxset {                                   
  title~border-top-width/.code  = \dim_gset:Nn \title_border_top_width {#1},
  title~border-right-width/.code = \dim_gset:Nn \title_border_right_width {#1},
  title~border-left-width/.code    = \dim_gset:Nn \title_border_left_width {#1},
  title~border-bottom-width/.code=\dim_gset:Nn \title_border_bottom_width {#1},                             
  title~border-width/.code= \dim_gset:Nn \title_border_width{#1}
                                           \dim_gset:Nn\title_border_top_width{#1}
                                           \dim_gset:Nn \title_border_right_width{#1}
                                           \dim_gset:Nn \title_border_bottom_width{#1}
                                           \dim_gset:Nn \title_border_left_width{#1},
}                     
\ExplSyntaxOff  
%    \end{macrocode}
%
% \begin{docCommand} { title_border_color } { \meta{color} }
%   This family of commands sets colors for titles.
% \end{docCommand}
%
%    \begin{macrocode} 
\ExplSyntaxOn
\tl_new:N \title_border_color
\tl_new:N \title_border_top_color
\tl_new:N \title_border_right_color
\tl_new:N \title_border_bottom_color
\tl_new:N \title_border_left_color
\cxset{  
  title~border-left-color/.code     = \tl_gset:Nn \title_border_left_color {#1},
  title~border-top-color/.code      = \tl_gset:Nn \title_border_top_color {#1},
  title~border-right-color/.code    = \tl_gset:Nn \title_border_right_color {#1},
  title~border-bottom-color/.code   = \tl_gset:Nn \title_border_bottom_color {#1},
% 
  title~border-color/.code=\tl_gset:Nn \title_border_color{#1}%
                           \tl_gset:Nn \title_border_left_color{#1}%
                           \tl_gset:Nn \title_border_right_color{#1}%
                           \tl_gset:Nn \title_border_top_color{#1}%
                           \tl_gset:Nn \title_border_bottom_color{#1},
}
\ExplSyntaxOff
%    \end{macrocode}
%
%\cxset{title border-color=blue}
%\ExplSyntaxOn
%
%\ExplSyntaxOff

%    \begin{macrocode}
\cxset {
  %title margin-bottom/.style =\pgfkeysalso{title margin bottom=#1},      
%  title margin-left/.code=\global\setlength{\titlemarginleft}{#1}
%                                      \gdef\titlemarginleft@cx{\hspace*{#1}},%,
  title afterskip/.store in=\titleafterskip@cx,
  position/.is choice,
  position/left/.code={\@lefttrue},
  position/right/.code={\@righttrue},
  position/center/.code={\@centertrue},
}

%                  
%    \end{macrocode}
%
% \section{The number element keys}
% The numbering keys deal with the typesetting of the chapter number
% in the chapter head. We use two packages for expressing numbers into
% words. The padzeroes is to produce EWD style notes. 
%
%    \begin{macrocode}
%\cxset{
%  chapter numbering/.is choice,
%  chapter numbering/none/.code={\gdef\thechapter{}},
%  chapter numbering/roman/.code={\gdef\thechapter{\@roman\c@chapter}},
%  chapter numbering/Roman/.code={\gdef\thechapter{\@Roman\c@chapter}},
%  chapter numbering/arabic/.code={\gdef\thechapter{\@arabic\c@chapter}},
%%  
%  chapter numbering/alpha/.code={\gdef\thechapter{\alphalph\c@chapter}\relax},
%  chapter numbering/Alpha/.code={\gdef\thechapter{\AlphAlph\c@chapter}},
%  chapter  numbering/words/.code=%
%  {\gdef\thechapter{\expandafter\words@cx{\expandafter\@arabic\c@chapter}}},
%  chapter numbering/WORDS/.code= {\gdef\thechapter{\expandafter\WORDS@cx{\expandafter\@arabic\c@chapter}}},
%  chapter numbering/ORDINALS/.code=\gdef\thechapter{%
%  \expandafter\ordinals@cx{\@arabic\c@chapter}},%{\gdef\thechapter{\NUMBERstring{chapter}}},
%  chapter numbering/Words/.code={\gdef\thechapter{\expandafter\Words@cx{\expandafter\@arabic\c@chapter}}},
%chapter numbering/padzeroes/.code={\gdef\thechapter{\mbox{EWD -\padzeroes[4]\decimal{chapter}}}},%
% chapter numbering custom/.code=\gdef\thechapter{#1},
%}
%    \end{macrocode}
%
% We define a number of shorter aliases. This also for some legacy code using it.
%    \begin{macrocode}
\cxset{
  numbering/.numbering in = \thechapter,
  chapter numbering/.numbering in = \thechapter,
%  numbering/none/.code = \pgfkeysalso{chapter numbering=none}, % do not leave empty
%  numbering/roman/.code={\gdef\thechapter{\@roman\c@chapter}},
%  numbering/Roman/.code={\gdef\thechapter{\@Roman\c@chapter}},
%  numbering/arabic/.code={\gdef\thechapter{\@arabic\c@chapter}},
%  numbering/alpha/.code={\gdef\thechapter{\alphalph\c@chapter}},
%  numbering/Alpha/.code={\gdef\thechapter{\AlphAlph\c@chapter}},
%  numbering/WORDS/.code={\gdef\thechapter{\expandafter\WORDS@cx{\expandafter\@arabic\c@chapter}}},
%  numbering/Words/.code={\gdef\thechapter{\expandafter\Words@cx{\expandafter\@arabic\c@chapter}}},
%  numbering/padzeroes/.code={\gdef\thechapter{\mbox{EWD -\padzeroes[4]\decimal{chapter}}
%  }},
%  numbering/ORDINALS/.code=\gdef\thechapter{%
%  \expandafter\ordinals@cx{\@arabic\c@chapter}},
}
%    \end{macrocode}
%
%  Next we get the spaceout keys going
%
%    \begin{macrocode}
\cxset{  
  number spaceout/.is choice,
  number spaceout/soul/.code=\@numberspaceouttrue,
  number spaceout/none/.code=\@numberspaceoutfalse,
  number spaceout/inherit/.code=\let\@numberspaceout\@chapterspaceout,
  number spaceout/microtype/.code=\@numberspaceouttrue,
  number letter-spacing/.code=\pgfkeysalso{number spaceout=soul},
  number dot/.store in=\numberpunctuation@cx,}
%    \end{macrocode}
% The position keys will be dropped soon!
%    \begin{macrocode}  
\cxset{  
  number position/.is choice,
  number position/leftname/.code={\@leftnametrue\@rightnamefalse},
  number position/rightname/.code={\@rightnametrue\@leftnamefalse},
  number position/absolute/.code={},
  number position/righttitle/.code=\@righttitletrue,
  number position/lefttitle/.code=\@lefttitletrue,
}
%    \end{macrocode}
%
% The before and after keys. We need to expand the concept.
%
%    \begin{macrocode}
\ExplSyntaxOn
\cxset
  {
    number~after/.store~in=\numberafter@cx,
    number~after~content/.store~in=\numberaftercontent@cx,
    number~before/.store~in=\numberbefore@cx,
    number~before~content/.store~in=\numberbeforecontent@cx,
  }
\ExplSyntaxOff
\cxset{number after=,
       number after content=,
       number before=,
       number before content=,}  
%  
\cxset{  
  number background-color/.code=\gdef\numberbgcolor{#1},
  number color/.store in=\numbercolor@cx,
}
%    \end{macrocode}
%  \begin{docCommand}{number_font_weight} {\meta{font weight name}}
%    Defining the fonts follows the same pattern as for the other elements.
%    These are passed onto the \refCom{setnumberfont} for further processing by the
%    layouts engine.
%  \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cxset{    
  number~font-size/.store~in         = \number_font_size,
  number~font-family/.font-family~in = \number_font_family,
  number~font-weight/.font-weight~in = \number_font_weight ,
  number~font-shape/.font-style~in   = \number_font_shape,
  number~font-style/.font-style~in   = \number_font_shape,
  number~font-name/.store~in         = \number_font_name,% CHECK USAGE
}
\ExplSyntaxOff
%
%    \end{macrocode}
%
% \subsection{Number borders}
%    \begin{macrocode}
\ExplSyntaxOn
%

\cxset
  {  
    number~margin~top/.code     = \dim_gset:Nn\number_margin_top {#1},
    number~margin~left/.code    = \dim_gset:Nn \number_margin_left {#1},
    number~margin~right/.code   = \dim_gset:nn \number_margin_right {#1},
    number~margin~bottom/.code  = \dim_gset:nn \number_margin_bottom {#1}
  }  
%  
\cxset
  {  
  % number borders
  number~border-top-width/.code    = \dim_gset:Nn\number_border_top_width{#1},
  number~border-bottom-width/.code = \dim_gset:Nn\number_border_bottom_width {#1} ,
  number~border-right-width/.code  = \dim_gset:Nn\number_border_right_width{#1},
  number~border-left-width/.code   = \dim_gset:Nn\number_border_left_width{#1},
  number~border-width/.code        = \pgfkeysalso{number~border-top-width=#1,
                                                  number~border-right-width=#1,
                                                  number~border-bottom-width=#1,
                                                  number~border-left-width=#1},}
\ExplSyntaxOff
%    \end{macrocode}
%
%    \begin{macrocode}                                                         
\cxset{  
  number display/.is choice,
  number display/inline/.code=\global\setcounter{numberdisplay}{0},
  number display/block/.code=\global\setcounter{numberdisplay}{2},}   
%  
\cxset{  
  number float/.is choice,
  number float/left/.code=\global\setcounter{numberfloat}{0},
  number float/none/.code=\global\setcounter{numberfloat}{0},                                                    
  number float/center/.code=\global\setcounter{numberfloat}{1},
  number float/right/.code=\global\setcounter{numberfloat}{2},     
}
%    \end{macrocode}
%  \subsection{Shapes}
% I wasnâ€™t too sure how to incorporate this in a nice way, so I defined a new property key,
% shape
% A shape can also have a style, if you want to really get fancy.
%  \begin{docCommand}{numbershape} {\meta{void}}
%    The |\numbershape| token list stores common shapes that can be used to shape the
%    number. We use \tikzname to as the shaping engine except for the rectangle that
%    we use our own. The number can be shaped separately from the chapter even when they
%    are inline. 
%  \end{docCommand}
% Picked up quite a few issues here. Need to revisit to ensure everything is ok. Seems
% to be an issue with number???
%    \begin{macrocode}
\ExplSyntaxOn
\cxset{
   number~shape/.shape~is= \numbershape,
}
\ExplSyntaxOff
\cxset{number shape=star}
%
%    \end{macrocode}
%  
%
% We define border styles first individually per side and then globally with
% a short-hand key.
% CSS has a dotted solid dashed double
% 
%    \begin{macrocode}
\ExplSyntaxOn
\cxset
  {                                                         
   number~border-style/.border~style~is=\number_border_style,
  }
\ExplSyntaxOff   
\cxset{number border-style=solid}
 
% number padding
\ExplSyntaxOn

\cxset{  
  number~padding-top/.code= \dim_gset:Nn \number_padding_top {#1},
  number~padding-right/.code=\dim_gset:Nn \number_padding_right{#1},
  number~padding-bottom/.code=\dim_gset:Nn \number_padding_bottom {#1},
  number~padding-left/.code=\dim_gset:Nn \number_padding_left{#1},
  number~padding/.code=\pgfkeysalso{number~padding-top=#1,
           number~padding-right=#1,
           number~padding-bottom=#1,
           number~ padding-left=#1},%
}   
\ExplSyntaxOff
%    \end{macrocode}                                                        
%
% \subsection{Author blocks}
% 
% Author blocks are only set if the boolean |\@authorblock| is set to true.
%
%    \begin{macrocode}
\cxset{
  author block/.is choice,
  author block/true/.code={\@authorblocktrue},
  author block/false/.code={\@authorblockfalse},
  author names/.store in=\authorblock@cx,  
  author block format/.store in=\authorblockformat@cx,
  author block afterskip/.store in=\authorblockafterskip@cx,
  chapter toc/.is choice,
  chapter toc/true/.code=\@toctrue,
  chapter toc/false/.code=\@tocfalse,
  chapter toc/none/.code=\@tocfalse,
}
%    \end{macrocode}
    
%    \begin{macrocode}    
\def\debugtitle{%                                         
\cxset{title border-top-color=sweet,
          title border-top-width=10pt,
          title border-left-color=sweet,
          title border-left-width=10pt,
          title border-right-color=sweet,
          title border-right-width=20pt,
          title border-bottom-color=sweet,
          title border-bottom-width=20pt,
          title border-width=0.2pt,
          title border-color=red,
          title padding-top=50pt,
          title padding-bottom=50pt,
          title padding-left=0pt,
          title padding-right=0pt,
          title padding=0pt,
          }
   }                
\cxset{chapter margin-top=0pt,
          chapter margin-left=20pt,
          chapter title align=left,
          chapter background-color=white,
          chapter border-left-width=0pt,
          chapter border-right-width=0pt,
          chapter border-bottom-width=0pt,
          chapter border-top-width=0pt,
          chapter font-shape=upshape,
}
\cxset{number background-color=white,
          number padding-left=0pt,
          number padding-right=0pt,
          number padding-top=0pt,
          number padding-bottom=0pt,
          number border-top-width=0pt,
          number border-bottom-width=0pt,
          number border-left-width=0pt,
          number border-right-width=0pt,
          number border-style=solid,
          number font-shape=upshape}
\cxset{author block=false,
          author block afterskip=,
          title margin-top=0pt,
          title margin-bottom=0pt,
          title margin-left=0pt,
          title margin-right=0pt,
          title border-top-color=sweet,
          title border-top-width=10pt,
          title border-left-color=sweet,
          title border-left-width=10pt,
          title border-right-color=sweet,
          title border-right-width=20pt,
          title border-bottom-color=sweet,
          title border-bottom-width=20pt,
          title border-width=0pt,
          title border-color=red,
          title padding-top=50pt,
          title padding-bottom=50pt,
          title padding-left=50pt,
          title padding-right=50pt,
          title padding=0pt,
          chapter title text-align=center,
          title display=block,
          }
\cxset{author names=}
\cxset{author block format=}
\cxset{chapter title width=0.7\textwidth}
\cxset{chapter title align=centering}
%    \end{macrocode}
%
% \begin{docCommand} {debugchapter} { \meta{void}}
% Settings for debugging a chapter heading. Shows all borders. \FIRE
% \end{docCommand}
%    \begin{macrocode}
\def\debugchapter{%
\cxset{chapter margin-top=0pt,
          chapter margin-left=0pt,
          chapter background-color=white,
%          
          chapter border-left-width=0.2pt,
          chapter border-right-width=0.2pt,
          chapter border-bottom-width=0.2pt,
          chapter border-top-width=0.2pt,
%          
          chapter padding-top=1pt,
          chapter padding-bottom=0pt,
          chapter padding-left=0pt,
          chapter padding-right=0pt,
%         
          number border-left-width=0.2pt,
          number border-right-width=0.2pt,
          number border-bottom-width=0.2pt,
          number border-top-width=0.2pt,
%          
          number padding-top=1pt,
          number padding-bottom=0pt,
          number padding-left=0pt,
          number padding-right=0pt,
}}
\debugchapter
%    \end{macrocode}
% 
%
% \section{Lower Level Headings}
%
% We now define keys for stacked heads, in a similar fashion to the chapter section. All keys
% are prefixed with `section' and font related commands are similar to 
% those found in CSS. As users that are familiar with pgf conventions might make mistakes by 
% writing |\cxset{section font size}| rather than |\cxset{section font-size}|  we create aliases to cater
% for both. These keys and commands are based on \latexe kernel macros. A more powerful approach will be
% to start from scratch and use \latex3 routines, especially with \pkgname{xparse}, these commands can
% become more user friendly and flexible. We also deal with some other limitations of the kernel, such
% as the shape of the sections. Originally anything off the beaten path was left to the class to 
% deal with it. The packages \pkgname{titlesec} and others dealt with these limitations. What
% is missing is a mechanism to shape the sections---such as the one provided by \pkgname{titlesec}.
% secondly we need to deal with extra marks and also for marks in long section titles. 
% As \pkgname{titlesec} served the \latex community so well over the years, we follow its nomeclature
% in declaring shapes (calling them formats)
%
%    \begin{macrocode}
\ExplSyntaxOn
  \cxset {section~format/.format~in= \sectionformat@cx}
  \cxset {section~format = block }
\ExplSyntaxOff
%    \end{macrocode}
%
% Next we deal with the normal parameters for sections,
% 
%    \begin{macrocode}
\ExplSyntaxOn
\cxset{
  section~font-size/.font-size~in=\sectionfontsize@cx,
  section~font-weight/.font-weight~in=\sectionfontweight@cx,
  section~font-family/.font-family~in=\sectionfontfamily@cx,
  section~font-shape/.font-style~in=\sectionfontshape@cx,
  section~color/.code=\gdef\sectioncolor@cx{#1}\renewsection,
  section~color/.initial=black,
  section~color/.default=black,
 } 
\ExplSyntaxOff 
%    \end{macrocode}
% 
%
% Next we define keys for the section numbering system. We cater for 
% |roman|, |Roman|, and within brackets |(roman)|, |arabic| or |numeric|. 
% Since unlike the standard
% classes we are aiming at a more generic template we need to care
% for the document type. If we have a chapter we will allow prefixing 
% of numbers. We use |sectionnumberingprefix@cx| as a key. 
% 
% \subsection{Section numbering}
%    \begin{macrocode}
\def\sectionnumberingsuffix@cx{}% 
\def\sectionnumberingprefix@cx{}%
\cxset{%
  section numbering suffix/.store in=\sectionnumberingsuffix@cx, 
  %alias
  section number after/.store in =\sectionnumberafter@cx,
  section numbering prefix/.store in=\sectionnumberingprefix@cx,
}

\cxset{  
  section numbering/.is choice,
  section numbering/roman/.code={%
       \gdef\thesection{\sectionnumberingprefix@cx\@roman\c@section}%
          \renewsection},
 section numbering/Roman/.code={%
       \gdef\thesection{\sectionnumberingprefix@cx\@Roman\c@section}%
          \renewsection},
  section numbering/(roman)/.code={%
       \gdef\thesection{\sectionnumberingprefix@cx(\@roman\c@section)}%
       \renewsection},
  section numbering/(Roman)/.code={%
       \gdef\thesection{\sectionnumberingprefix@cx(\@Roman\c@section)}%
          \renewsection},
  section numbering/arabic/.code={%
       \gdef\thesection{\sectionnumberingprefix@cx\@arabic\c@section\sectionnumberingsuffix@cx}%
          \renewsection},
  section numbering/numeric/.code={%
       \gdef\thesection{\sectionnumberingprefix@cx\@arabic\c@section\sectionnumberingsuffix@cx}%
          \renewsection},
  section numbering/none/.code={\gdef\thesection{\hspace*{-1em}}\renewsection},
  section numbering/alpha/.code={\gdef\thesection{\alphalph\c@section}},
  section numbering/Alpha/.code={\gdef\thesection{\AlphAlph\c@section}},
  section numbering/words/.code={\gdef\thesection{\sectionnumberingprefix@cx%
                                                   \words@cx{\@arabic\c@section}}},
  section numbering/Words/.code={%
 \gdef\thesection{\sectionnumberingprefix@cx\words@cx{\@arabic\c@section}}},
   section numbering/WORDS/.code={\gdef\thesection{\sectionnumberingprefix@cx \words@cx{\@arabic\c@section}}},
}   
%    \end{macrocode}
%
% The |section numbering custom| is a catch-all key to define a special
% definition for |thesection|. Just pass on the tokens you require.t
%    \begin{macrocode}
\cxset{
     section numbering custom/.code=\gdef\thesection{#1}\renewsection,}
%    \end{macrocode}
%
%  \subsection{Section alignment keys}
%  We next define choice keys for the alignment of sections. These can be one
% of |left|, |right|, |center| or |centering|.
%
%    \begin{macrocode}
\cxset{
  section align/.is choice,
  section align/right/.code        = \gdef\sectionalign@cx{flushright},
  section align/center/.code       = \gdef\sectionalign@cx{\centering},
  section align/centering/.code    = \gdef\sectionalign@cx{\centering},
  section align/Centering/.code    = \gdef\sectionalign@cx{\Centering},
  section align/left/.code         = \gdef\sectionalign@cx{flushleft},
   section align/flushleft/.code   = \gdef\sectionalign@cx{flushleft},
  section align/right/.code        = \gdef\sectionalign@cx{flushright},
  section align/flushright/.code   = \gdef\sectionalign@cx{flushright},
  section align/RaggedRight/.code  = \gdef\sectionalign@cx{RaggedRight},
  section align/raggedright/.code  = \gdef\sectionalign@cx{RaggedRight},
  %
  section afterindent/.is choice,
  section afterindent/on/.code     = \afterindenton@cx,
  section afterindent/off/.code    = \afterindentoff@cx,
  section afterindent/true/.code   = \afterindenton@cx,
  section afterindent/false/.code  = \afterindentoff@cx,
  %
  section beforeskip/.store in     = \sectionbeforeskip@cx,
  section afterskip/.store in      = \sectionafterskip@cx,
  section indent/.store in         = \sectionindent@cx,
  section spaceout/.is choice,
  section spaceout/soul/.code      = \@sectionspaceouttrue,
  section spaceout/none/.code      = \@sectionspaceoutfalse,
  section number after/.store in   = \sectionnumberafter@cx,
}  
%    \end{macrocode}
%
% 
% \subsection{Subsection options}
% From now on almost everything is a repetition of whatever was previously
% defined for higher order sectioning commands.
%
%    \begin{macrocode}
% subsections
\ExplSyntaxOn
  \cxset {subsection~format/.format~in     = \subsectionformat@cx}
  \cxset {subsection~format = hang }
  \cxset {subsection~name/.store~in=\subsectionname@cx}
  
\cxset{
  subsection~font-size/.font-size~in       = \subsectionfontsize@cx,
  subsection~font-weight/.font-weight~in   = \subsectionfontweight@cx,
  subsection~font-family/.font-family~in   = \subsectionfontfamily@cx,
  subsection~font-shape/.font-style~in     = \subsectionfontshape@cx,
  subsection~color/.store~in               = \subsectioncolor@cx,
}
\ExplSyntaxOff  
\cxset{subsection font-size=Large,
       subsection font-weight=bold,
       subsection font-family=rmfamily,
       subsection font-shape=upshape,
       subsection color=spot!50}
%    \end{macrocode}

%  \subsection{Subsection numbering}
%    \begin{macrocode}
\ExplSyntaxOn
\cxset{
  subsection~numbering/.is~choice,
  subsection~numbering/arabic/.code     = 
    {
      \gdef\thesubsection{\subsectionnumberingprefix@cx\@arabic\c@subsection}
     },
  subsection~numbering/custom/.store~in = \thesubsection@cx,
  subsection~numbering/none/.code       = 
    {
      \gdef\thesubsection{\hspace*{-1em}} \renewsubsection
    },
  subsection~align/.store~in            = \subsectionalign@cx,
  subsection~beforeskip/.store~in       = \subsectionbeforeskip@cx,
  subsection~afterskip/.store~in        = \subsectionafterskip@cx,
  subsection~indent/.store~in           = \subsectionindent@cx,
  subsection~numbering~custom/.code     =
     \gdef\thesubsection
       {
         \subsectionnumberingprefix@cx#1
       } \renewsubsection,
  subsection~number~after/.store~in     = \subsectionnumberafter@cx, 
  subsection~numbering~prefix/.store~in = \subsectionnumberingprefix@cx,  
}
\ExplSyntaxOff 
%    \end{macrocode}
% 
%
% \section{Subsubsections}
% 
% We are now five levels down at the headings
% Part, Chapter, section, subsection, subsubsection and lots of cut and paste and
% modifying commands. I am sure using templates would have been easier, but I want
% to retain some of Lamport's concepts and provide templates later.
% 
%    \begin{macrocode}
%
\ExplSyntaxOn 
\cxset{  
  subsubsection~font-size/.font-size~in         = \subsubsectionfontsize@cx,
  subsubsection~font-weight/.font-weight~in     = \subsubsectionfontweight@cx,
  subsubsection~font-family/.font-family~in     = \subsubsectionfontfamily@cx,
  subsubsection~font-shape/.font-style~in       = \subsubsectionfontshape@cx,
  subsubsection~color/.store~in                 = \subsubsectioncolor@cx,
}
\ExplSyntaxOff
\cxset{subsubsection font-shape=upshape}
\cxset{  
  subsubsection numbering prefix/.store in      = \subsubsectionnumberingprefix@cx,
  subsubsection numbering/.numbering in         = \thesubsubsection,
  % needs handler
  subsubsection align/.store in                 = \subsubsectionalign@cx,
  subsubsection beforeskip/.store in            = \subsubsectionbeforeskip@cx,
  subsubsection afterskip/.store in             = \subsubsectionafterskip@cx,
  subsubsection indent/.store in                = \subsubsectionindent@cx,
  subsubsection number after/.store in          = \subsubsectionnumberafter@cx,
}  
    %
%    \end{macrocode}  
%
% \subsection{Paragraph}  
% Mostly paragraphs are typset inline, however, here are some keys, in case a layout requires complicated paragraphs..
%    \begin{macrocode}
%
\ExplSyntaxOn
\cxset{
  paragraph~font-size/.font-size~in         = \paragraphfontsize@cx,
  paragraph~font-weight/.font-weight~in     = \paragraphfontweight@cx,
  paragraph~font-family/.font-family~in     = \paragraphfontfamily@cx,
  paragraph~font-shape/.font-style~in       = \paragraphfontshape@cx,
  paragraph~color/.store~in                 = \paragraphcolor@cx,
  paragraph~numbering/.is~choice,
  paragraph~numbering/arabic/.code          =
   \cs_gset:Npn \theparagraph {
    \thesubsubsection.\@arabic\c@paragraph},
  paragraph~numbering/custom/.store~in      = \theparagraph@cx,
  paragraph~numbering/none/.code            = {\gdef\theparagraph{}},
  paragraph~align/.store~in                 = \paragraphalign@cx,
  paragraph~beforeskip/.store~in            = \paragraphbeforeskip@cx,
  paragraph~afterskip/.store~in             = \paragraphafterskip@cx,
  paragraph~indent/.store~in                = \paragraphindent@cx,
  paragraph~number~after/.store~in          = \paragraph_number_after_tl,
}  
\ExplSyntaxOff
%    \end{macrocode}
%
% \subsection {Subparagraphs}
%    \begin{macrocode}
%% subparagraphs
%
\ExplSyntaxOn
\cxset{
  subparagraph~name/.store~in                = \subparagraphname@cx, 
  subparagraph~font-size/.font-size~in       = \subparagraphfontsize@cx,
  subparagraph~font-weight/.font-weight~in   = \subparagraphfontweight@cx,
  subparagraph~font-family/.font-family~in   = \subparagraphfontfamily@cx,
  subparagraph~font-shape/.font-style~in     = \subparagraphfontshape@cx,
  subparagraph~color/.store~in               = \subparagraphcolor@cx,
  subparagraph~numbering/.is~choice,
  subparagraph~numbering/numeric/.code       =
  {\gdef\thesubparagraph{\theparagraph.\@arabic\c@subparagraph}},
  subparagraph~numbering/arabic/.code        = 
    \cs_gset_nopar:Npn \thesubparagraph{
    \theparagraph.\@arabic\c@subparagraph},
  subparagraph~numbering/custom/.store~in    = \thesubparagraph@cx,
  subparagraph~numbering/none/.code          = \gdef\thesubparagraph{},
  subparagraph~align/.store~in               = \subparagraphalign@cx,
  subparagraph~beforeskip/.store~in          = \subparagraphbeforeskip@cx,
  subparagraph~afterskip/.store~in           = \subparagraphafterskip@cx,
  subparagraph~indent/.store~in              = \subparagraphindent@cx,
  subparagraph~number~after/.store~in        = \subparagraphnumberafter@cx,
  subparagraph~number~after/.default=,
  subparagraph~number~after/.initial=,
  subparagraph~format/.format~in             = \subparagraphformat@cx,
}
\ExplSyntaxOff
  

%    \end{macrocode}
%

% \subsection{Renewsection commands}
%
% These have to be called explicitly after key definitions, it is just 
% the way LaTeX works. One could add them in settings or explore a
% bit more deeply. 
%
% We also define \cs{@startsection} as somehow there are problems
% with after indent false. valid |\section*{title}|, |\section[toc-entry]|, 
% |\section [toc-entry] {title}|
%
%  |#1| name i.e, section
%  |#2| level number 2 section
%  |#3| indent
%  |#4| beforeskip
%  |#5| afterskip
%  |#6|  styling command
%
%    \begin{verbatim}
% \def\@startsection#1#2#3#4#5#6{%
%    \if@noskipsec \leavevmode \fi
%    \par
%    \@tempskipa #4\relax 
%    \afterindent@cx%\@afterindentfalse
%    \ifdim \@tempskipa <\z@
%        \@tempskipa -\@tempskipa\afterindent@cx %\@afterindentfalse
%    \fi
%    \if@nobreak
%    \everypar{}%
%    \else
%      \addpenalty\@secpenalty\addvspace\@tempskipa
%    \fi
%   \@ifstar
%   {\@ssect{#3}{#4}{#5}{#6}}%defined in the kernel
%   {\@dblarg{\@sect{#1}{#2}{#3}{#4}{#5}{#6}}}%
%   }
%    \end{verbatim}
%
%   
%    \begin{macrocode}
\ExplSyntaxOn
\DeclareDocumentCommand \sect_create_document_section:nnnnnnnnn {m m m m m m s o m}      
  {
    \if@noskipsec \leavevmode \fi
    \par
%    check for before skip    
    \l_tmpa_skip #4\relax 
   % \afterindent@cx%
    \@afterindenttrue
    \if_dim:w \l_tmpa_skip <\z@

% make it positive    
      \skip_set:Nn\l_tmpa_skip {-\l_tmpa_skip} 
      %\afterindent@cx %\@afterindentfalse
    \fi:
%    
    \if@nobreak
      \everypar{}% weird ERROR and removed added back
    \else
      \addpenalty \@secpenalty
      \addvspace\l_tmpa_skip
    \fi
%
% redirect depending on star or option
%     
    \IfBooleanTF {#7}
      {\@ssect {#3} {#4} {#5} {#6} {#9} }
      {
        \IfValueTF {#8} {\@sect  {#1} {#2} {#3} {#4} {#5} {#6} [{#8}] {#9} }
                        {\@sect  {#1} {#2} {#3} {#4} {#5} {#6} [{#8}] {#9} } %sends TF we get it later
      }   
  }
\cs_gset_eq:NN \@startsection \sect_create_document_section:nnnnnnnnn
\ExplSyntaxOff  
%    \end{macrocode}
%
%
% The standard kernel factory commands, they are real locomotives. To hook into them
% we need to dig deep.
% \begin{docCommand}{@sect}{\marg{name}\marg{level}\marg{beforeskip}\marg{afterskip}\marg{style}\oarg{arg1} \marg{arg2} }
%  There are two such commands. This one is if it has an optional argument! 
% 
%  |#1| name i.e, section\\
%  |#2| level number 2 section\\
%  |#3| indent\\
%  |#4| beforeskip\\
%  |#5| afterskip\\
%  |#6| styling command\\
%  |#7| arg1 \\
%  |#8| arg2 \\
%
% \end{docCommand}

% We first define some formatters to tie up with using |format| in sectioning commands.
%
%    \begin{macrocode}
\ExplSyntaxOn
% 1 number
% 2 title
\cs_set:Npn \format_hang:nn #1#2 {
  \@hangfrom{\hskip #1\relax\@svsec
            \interlinepenalty \@M #2\@@par}%
}
%    \end{macrocode}
%
%  The block format formats its contents as a wrapped paragraph centered.
%  This is useful for centered headings with a background.
%
%    \begin{macrocode}
\cs_set:Npn \format_block:nn #1#2 {
  \begin{tcolorbox}[colback=spot!30, colframe=white, arc=3mm]
    \centering
    \language-1\relax
    \@svsec {#2}
  \end{tcolorbox}
}    
%    \end{macrocode}

% \begin{docCommand}{format_display:nn} {\marg{section name}} { \marg{skip after number} \marg {} }
%   Displays a section similar to Chapters
% \end{docCommand}
%  \#1\\
%  \#2 Title\\
%  \#3 Section name \\
%  svsec number
%    \begin{macrocode}
\cs_set:Npn \format_display:nn #1 #2 #3{
   \leavevmode
   \cs:w #1name\cs_end:\space
   \hskip#2\relax\@svsec\vskip2pt
   #3
}    
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_set_nopar:Npn \@sect #1 #2 #3 #4 #5 #6 [#7] #8 {%
  \ifnum #2>\c@secnumdepth
    \let\@svsec\@empty
  \else
    \refstepcounter{#1}%
%    \end{macrocode}
%
%  We next save the section counter format \refCom{@secctformat} to protect it??? 
%    \begin{macrocode}
    \protected@edef\@svsec{\@seccntformat{#1}\relax}%
  \fi
  \@tempskipa #5\relax
  \ifdim \@tempskipa>\z@
    \begingroup
%    \end{macrocode}
% 
%  The choice here is that we either have hang commands or
%  inline section commands
%  apply styling 
%    \begin{macrocode}
      #6 
    \bgroup%
    \str_case_x:nnTF { \csname#1format@cx\endcsname}  
      {
          { display } { \format_display:nn { #1 } { #3 } { #8 } } 
          { block   } { \format_block:nn   { #3 } { #8 }        } 
          { plain   } { \format_hang:nn    { #3 } { #8 }        } 
          { hang    } { \format_hang:nn    { #3 } { #8 }        }
      }
      {\if@debug~\tiny\csname#1format@cx\endcsname \fi } %true code
      { 
        \if@debug~\tiny\csname#1format@cx\endcsname\fi
        \@hangfrom {\hskip #3\relax\@svsec}%
        \interlinepenalty \@M #8\@@par   
      } %false code 
%      
    \egroup
    \endgroup
%    \end{macrocode}
%
% Next we activate the section mark REVISE!!!!
% \begin{docCommand}{sectionmark} {\meta{heading title}}
%  This command is used by \tex's mark system as modified by \latexe
%  in headings.
% \end{docCommand}
%    \begin{macrocode}   
    \IfValueTF{#7}  
    { \cs:w #1mark\cs_end: {#7} }
    { \cs:w #1mark\cs_end: {#8} }  %
%    
% added to contents note parameter #7 which is the optional argument   
    \addcontentsline{toc}{#1}{%
      \ifnum #2>\c@secnumdepth \else
        \protect\numberline{\csname the#1\endcsname}%
      \fi
      \IfValueTF{#7}
        {#7          }
        {#8}         }
  \else
%    \end{macrocode}
%
%  If the dimension is less or equal to zero make an inline heading
%  Inline sections
%    \begin{macrocode}
   \cs_set:Npn \@svsechd 
     {
        #6
        {
          \hskip #3\relax
          \@svsec #8 \relax
        }
        \IfValueTF{#7}  
          { \cs:w #1mark\cs_end: {#7} }
          { \cs:w #1mark\cs_end: {#8} }  
        \addcontentsline{toc}{#1}{
          \ifnum #2>\c@secnumdepth \else
            \protect\numberline{\csname the#1\endcsname}
          \fi
          \IfValueTF{#7}
           {#7         }
           {#8}         }
     }
  \fi
  \xsect:n{#5}}
\ExplSyntaxOff  
%    \end{macrocode}
%
% \begin{docCommand}{@ssect} { {\meta{indent}} {\meta{beforeskip}} {\meta{afterskip}} \meta{styling commands} \meta{arg1} }
% This is the star verson of the command.  What it means is that we want a heading with
% no numbers and not in the toc. Also it does not add it as a mark! This is very limiting
% as originally programmed in the kernel; probably the thinking was to use it to create
% same style headings, that one would use for purposes other than sectioning. In reality
% many books have unnumbered sections and one might want them to go on the headings.
% We modify it to be able to do both based on a settings command.
% So to summarize star section means unumbered. Will use choices as
% to what must be done with it.
%
%  
%  |#1| indent\\
%  |#2| beforeskip\\
%  |#3| afterskip\\
%  |#4| styling command\\
%  |#5| arg1 follows\\
%
% \end{docCommand} 
%    \begin{macrocode}  
\ExplSyntaxOn  
%  
\cs_set:Npn \@ssect #1 #2 #3 #4 #5 {%
  \@tempskipa #3\relax
  \ifdim \@tempskipa>\z@
  \begingroup
    #4{
    \@hangfrom{\hskip #1}%
    \interlinepenalty \@M (#5)\@@par}%
    \endgroup
  \else
  \def\@svsechd{#4{\hskip #1\relax #5}}%
  \fi
% |\xsect:n{afterskip}| then sets the afteskipping as well as the afterindent.   
  \xsect:n{#3}
}
%   
\ExplSyntaxOff   
   
%    \end{macrocode}
%
% \begin{docCommand}{@xsect:n} {\marg{afterskip}}
%  This command sets handles indentation after a sectioning command. It also handles
%  the printing of the title for inline sections (it is saved as |\@svsechd| earlier. It is common
%  for both the star and unstarred versions of |\section|.
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \xsect:n #1 
  {
  \l_tmpa_skip #1\relax
  \if_dim:w \l_tmpa_skip>0pt 
    \par \nobreak
    \vskip \l_tmpa_skip
    \@afterheading
  \else:
    \@nobreakfalse
    \global\@noskipsectrue
    \tex_everypar:D 
      {
        \if@noskipsec
          \global\@noskipsecfalse
          {\setbox\z@\lastbox}
          \tex_clubpenalty:D\@M
          \group_begin:
            \@svsechd 
          \group_end:
          \tex_unskip:D
          \l_tmpa_skip #1\relax
          \hskip -\l_tmpa_skip
        \else
          \tex_clubpenalty:D \@clubpenalty
          \tex_everypar:D {}
        \fi
      }
  \fi:
  \tex_ignorespaces:D
  }
\ExplSyntaxOff  
%    \end{macrocode}
%
% When LaTeX is typesetting the section number it calls |\@seccntformat|
% to use it when typsetting a section heading number. This is common for
% all the subsectioning commands. We modify it based on code from \pkgname{sectsty} in order
% to generalize it.
% 
% We first check if \meta{section}|@cntformat| is defined and then we redirect
% to specific section level command.
%
% \begin{docCommand} {@seccntformat} {\marg{section name}}
%  This is a \latexe kernel factory command that produces |thesection| etc.
%  In the kernel it only takes a generic value, where we have \refCom{section_number_after_tl}.
%  We modify to enable adjustable values for all sectioning commands. 
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
 \cs_gset:Npn \@seccntformat #1
 {
  \@ifundefined{#1@cntformat}%
  {\csname the#1\endcsname\section_number_after_tl}% default
  {\csname #1@cntformat\endcsname}% individual control
 }
%    \end{macrocode}
%
% \begin{docCommand}{section_number_after_tl} { \meta{void}}
%  This function and its siblings are auxiliary functions.
% \end{docCommand}
%
%    \begin{macrocode}
\tl_set:Nn  \section_number_after_tl{\quad}%default value only space
\tl_set:Nn  \subsection_number_after_tl{\quad}%default value only space
\tl_set:Nn  \subsubsection_number_after_tl{\quad}%default value only space
\tl_set:Nn  \paragraph_number_after_tl{\quad}%default value only space
\tl_set:Nn  \subparagraph_number_after_tl{\quad}%default value only space
%
\cs_set:Npn \section@cntformat{\thesection\section_number_after_tl}
\cs_set:Npn \subsection@cntformat{\thesubsection\subsection_number_after_tl}
\cs_set:Npn \subsubsection@cntformat{\thesubsubsection\subsubsection_number_after_tl}
\cs_set:Npn \paragraph@cntformat {\theparagraph\paragraph_number_after_tl }
\cs_set:Npn \subparagraph@cntformat {\thesubparagraph\subparagraph_number_after_tl }
\ExplSyntaxOff
%    \end{macrocode}
% 
%    \begin{macrocode}
\ExplSyntaxOn
\def\renewsection{%
   \renewcommand\section{%
   \gdef\sectionname{Clause}
    \@startsection{section}%
      {1}%level check this conflicts with source2e
      {\sectionindent@cx}%indent#2
      {\sectionbeforeskip@cx}%before skip#3
      {\sectionafterskip@cx}% after skip#4
      {% 
      \setfont@cx{\sectionfontweight@cx}%
      {\sectionfontfamily@cx}{\sectionfontsize@cx}{\sectionfontshape@cx}%
      \expandafter\setfontparam@cx\sectionalign@cx;%
      \color{\sectioncolor@cx}%5
 }}%
}%
\ExplSyntaxOff
%    \end{macrocode}
%   

% \begin{docCommand}{testsections} {\meta{void}}
%  In honor of Barbara Beeton all testing commands are in lowercase, but we also provide
%  them in mixed case for the rest of the crowd.
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \testsections 
  {
    \section{Sections}
    \lorem\par
    \subsection{Subsections}
    \lorem\par
    \subsubsection{Subsubsections}
    \lorem\par
    \paragraph {Paragraph}
  }
  
\cs_set_eq:NN \TestSections\testsections  
\ExplSyntaxOff
%    \end{macrocode}
%
%
% Next we set the keys to a default style to avoid errors, if the user does not set them.
%
%    \begin{macrocode}
\cxset{
  section font-size= LARGE,
  section font-weight=mdseries,
  section font-family = sffamily,
  section font-shape= upshape,
  section color =spot!50,
  section numbering prefix=,
  section numbering=arabic,
  section indent=0pt,
  section beforeskip=0pt,
  section afterskip=10pt,
  section afterindent=off,
  section align=centering,
  section numbering suffix=,
  section number after=\quad,
}  
\renewsection
%    \end{macrocode}

%     \begin{macrocode}
\def\renewsubsection{%
\renewcommand\subsection{%
 \@startsection{subsection}%
{2}%level
{\subsectionindent@cx}%indent
{\subsectionbeforeskip@cx}%
{\subsectionafterskip@cx}%
{\setfont@cx{\subsectionfontweight@cx}%
    {\subsectionfontfamily@cx}{\subsectionfontsize@cx}{\subsectionfontshape@cx}%
   \expandafter\setfontparam@cx\subsectionalign@cx;%
  \color{\subsectioncolor@cx}%
}%
}%
}
%    \end{macrocode}
%
%  The |subsubsection|  keys need to be activated with a renew command.
%   \begin{macrocode}
\ExplSyntaxOn
  \def\renewsubsubsection{%
    \renewcommand\subsubsection
    {
       \@startsection{subsubsection}%
       {3}%level
       {\subsubsectionindent@cx}%indent
       {\subsubsectionbeforeskip@cx}
       {\subsubsectionafterskip@cx}
       {\setfont@cx{\subsubsectionfontweight@cx }
       {\subsubsectionfontfamily@cx}{\subsubsectionfontsize@cx}
       {\subsubsectionfontshape@cx}
   \expandafter\setfontparam@cx\subsubsectionalign@cx;
  \color{\subsubsectioncolor@cx}
       }
    }
}
\ExplSyntaxOff
%    \end{macrocode}
% 
%    \begin{macrocode}
\cxset{
  subsubsection font-family=tiresias, 
  subsubsection font-size= large,
  subsubsection font-weight=bfseries,
  subsubsection font-family= tiresias,
  subsubsection font-shape= upshape,
  subsubsection color =spot!50,
  subsubsection numbering prefix= ,
  subsubsection numbering = arabic,
  subsubsection indent=0pt,
  subsubsection beforeskip=0pt,
  subsubsection afterskip=10pt,
  subsubsection align=flushleft,
  subsubsection number after=,
}
\renewsubsubsection
%    \end{macrocode}
%
%
% \subsection{Paragraphs and subparagraphs}
%
%  We now deal with paragraphs and subparagraphs, normally termed `runinâ€™ heads, as they produce
%  headings that are inlined with the text that follows. We add hooks, so that later the key mechanism
%  can be used to pick-up values. Although they are termed runins, there is no issue to display
%  them as block.
% 
% {macro}{renewparagraph}
%    \begin{macrocode}
\ExplSyntaxOn
\def\renewparagraph{%
  \renewcommand\paragraph{%
     \@startsection{paragraph}%
     {4}%level
     {\paragraphindent@cx}%indent
     {\paragraphbeforeskip@cx}%
     {\paragraphafterskip@cx}%
     {\setfont@cx{\paragraphfontweight@cx}%
     {\paragraphfontfamily@cx}{\paragraphfontsize@cx}{\paragraphfontshape@cx}%
     \expandafter\setfontparam@cx\paragraphalign@cx;%
         \color{\paragraphcolor@cx}%
     }%
 }
}
\renewparagraph
\ExplSyntaxOff
%    \end{macrocode}
%
% \paragraph{Paragraphs} These are good inline sections \lorem. Don't go mad with numbering though
% they do not look very good. 
%
% \paragraph{Paragraphs} They are a necessary evil if you a lawyer or writing specifications. We need
% more hooking here, for further flexibility.
%
%    \begin{macrocode}
% paragraph
\cxset{
  paragraph font-size    = large,
  paragraph font-weight  = bold,
  paragraph font-family  = rmfamily,
  paragraph font-shape   = upshape,
  paragraph color        = spot!50,
  paragraph numbering    = arabic,
  paragraph align        = flushleft,
  paragraph beforeskip   = 0pt,
  paragraph afterskip    = -10pt,
  paragraph indent       = 0pt,
  paragraph number after =\quad,
}
  
%    \end{macrocode}
%    \begin{macrocode}
\ExplSyntaxOn  
\cs_new:Npn \renewsubparagraph 
  {
    \renewcommand\subparagraph
      {
         \@startsection{subparagraph}
         {5}%level
         {\subparagraphindent@cx}%indent
         {\subparagraphbeforeskip@cx}
         {\subparagraphafterskip@cx}
         {
           \setfont@cx{\subparagraphfontweight@cx}
           {\subparagraphfontfamily@cx}{\subparagraphfontsize@cx}{\subparagraphfontshape@cx}%
           \expandafter\setfontparam@cx\subparagraphalign@cx;
           \color{\subparagraphcolor@cx}
         }
       } 
  }
\renewsubparagraph
\ExplSyntaxOff
%    \end{macrocode}
%
% Setting default values
%
%    \begin{macrocode}    
\cxset{
  subparagraph name         = subparagraph, 
  subparagraph font-size    = large,
  subparagraph font-weight  = bfseries,
  subparagraph font-family  = rmfamily,
  subparagraph font-shape   = upshape,
  subparagraph color        = spot!50,
  subparagraph numbering    = arabic,
  subparagraph align        = flushleft,
  subparagraph beforeskip   = 0pt,
  subparagraph afterskip    = -10pt,
  subparagraph indent       = 0pt,
  subparagraph number after = \quad,
  subparagraph format       = inline,
}
%    \end{macrocode}
% 

%
% \section{Section}
% \subsection{Subsection}
% \subsubsection{Subsubsection}
% \paragraph{Inline Headings} \lorem
% \subparagraph{Subparagraph} \lorem

% \section{Setting up the special chapter head mechanism}
%
% We divide chapter heads in two broad categories, the
%	standard chapter heads that utilize macros similar to
%	the standard classes and the \textit{special} chapter
%	heads that have their own typesetter commands.
%	For example we provide a special type of design for
%	this book called \textit{stewart}. The \cs{stewart}
%	is a template author defined command.
%	Any special design requires, two items. A macro defining
%	the design and setting the custom key to point to this macro.
%
%	 
% begin{macro}{custom}
% begin{macro}{customdesign@cx} 
%	This key holds the name of a macro that is to be
%	trigerred for a custom designed template. 
% 
%    \begin{macrocode}
\cxset{custom/.code=\global\@specialtrue
                \gdef\customdesign@cx{%
                      \csname#1\endcsname},
          fill/.store in=\fill@cx}
%    \end{macrocode}
%  
%
% 
%
% 	This macro  typesets the chapter label i.e., |CHAPTER|. We
%	set the font parameters as defined by the key value system.
%	The label is defined first as |CHAPTER| by the standard
%	class and later on as |Appendix|. 
%	If we need small caps or spaceout we use the |\so| command
%	from the |soul| package.
%    \begin{macrocode}
 \newcommand\inshape[2][fill=sweet,white]{%
% \rightline{\fbox{#2R}}
%\leftline{\fbox{#2}}
  %
        \begin{tikzpicture} 
         \filldraw[gray]  (0,0) circle [radius=1.5pt];%
         \node at (0,0) [%rounded rectangle,
                      trim left, 
                      name=s,
                      %anchor=midway,
                       behind path,
                       circle,
                       drop shadow={opacity=0.5,fill=sweet}, %box shadow in css
                        black,
                       % double=sweet,
                        %text height=1.5ex,
                        %text depth=1ex,
                        %anchor=s.base,
                        draw,
                        outer ysep=0pt, %no outer so that lines can align nicely
                        inner ysep=0pt,
                        inner xsep=0pt,
                        line width=1pt,%#1
                         ]{#2};
             \end{tikzpicture}%
\ignorespaces}%
%             

\def\tikzi{%
    \tikz[remember picture,overlay] 
    \draw[<->] (0,0)--(0,1.5)--++(-.2,0) node[left,fill=blue!15,text=black]%
       {{\ttfamily\footnotesize\string\chaptermarginleft}};%\space%
}%
%
%
\global\newsavebox\chapternamebox
\global\newsavebox\numbernamebox
\global\newsavebox\bothboxes
\global\newsavebox\tempboxa@cx
\global\newsavebox\tempboxb@cx
\global\newsavebox\tempboxc@cx
%    \end{macrocode}
%
%  \begin{docCommand}{set_chapter_font} {\meta{void}}
%    Set the chapter font from global keys.
%  \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn \set_chapter_font {%
  \exp_after:wN \setfontparam@cx\chapter_font_family;%
  \exp_after:wN \setfontparam@cx\chapter_font_size;%
  \exp_after:wN \setfontparam@cx\chapter_font_weight;%
  \exp_after:wN \setfontparam@cx\chapter_font_shape;%
}
\ExplSyntaxOff
%    \end{macrocode}
%

%
%   This is the main rendering routine for a generic block element. The element can either be
%    rendered in-line or as a block.
%
%    \#1  class of the element or id
%    \#2  the contents of the element e.g chapter or number.
%
%    Any element to be used here has to have a series of keys associated with it. They keep a naming
%    convention as for example,
%
%     |chapter border-left-width| \\
%     |chapter font-size|
%       
%    The prefix |chapter|  or |number|  or |title|  then enable to use the generic commands.
%    TeX is not an object orientated language, and future improvements are possible with LuaTeX.
%     
% {saveelementbox}
%    \begin{macrocode}
\def\saveelementbox#1#2#3{%
%    \end{macrocode}
% 
%  
%  Before we save the box, we set all its properties so we can measure it
%  correctly. As this is a generalized routine all properties use the prefix \#2
%  i.e., \meta{chapter}paddingtop etc.
%
%    \begin{macrocode}
   
   \expandafter\fboxseptop\csname#2paddingtop\endcsname
   \expandafter\fboxsepright\csname#2paddingright\endcsname
   \expandafter\fboxsepbottom\csname#2paddingbottom\endcsname
   \expandafter\fboxsepleft\csname#2paddingleft\endcsname
%
  \expandafter\fboxruletop\csname#2_border_top_width\endcsname\relax
  \expandafter\fboxruleright\csname#2_border_right_width\endcsname\relax
  \expandafter\fboxrulebottom\csname#2_border_bottom_width\endcsname\relax
  \expandafter\fboxruleleft\csname#2_border_left_width\endcsname\relax
%
%
%   \let\ruletopcolor\chapterbordertopcolor
%   \let\rulerightcolor\chapterborderrightcolor       
%   \let\rulebottomcolor\chapterborderbottomcolor
%  \let\ruleleftcolor\chapterborderleftcolor
%
%
\cxset{number border-left-width=0.1pt,
          number padding-top=0pt,
          number border-bottom-width=0pt,
%          chapter border-right-color=blue,
%          chapter border-top-color=blue,
          chapter border-width=1pt}%
%          
  \expandafter\savebox\csname#2namebox\endcsname{%
     \fboxrule1pt\fboxsep1pt
       \fbox{#3}
      %\shadowbox{#3}%
       %\Ovalbox{#3}%
    
%       \doublebox{#3}
%      \hspace*{2cm}\tcbox[size=normal,
%         colframe=blue, colback =blue, borderline={2pt}{5pt}{black},
%         frame style={top color=blue, bottom color=black, left color=black, right color=black},
%            borderline west={2pt}{-2pt}{red},
%%        %
%        arc=5pt,outer arc=5pt, %!hyberbola
%        outer arc=3ptpt,rounded corners=all,
%        tikz={shape=star, text=white}]{#3}%
%      %
%        \tcbox[colframe=thelightgray,arc=5pt,%!hyberbola arcs 200
%      outer arc=5pt,rounded corners=all,
%      tikz={rotate=30}]{#3}%
 %         \phd@fbox{#3}%
  }%
}
%    \end{macrocode}
%
% \begin{docCommand} {print_chapter_name} {\marg{element name}} {\marg{element name}}
%   This function is a generalized macro that can be used to set and typeset
%   an element, working out all necessary floats.
% \end{docCommand}
%
%    \begin{macrocode}  
  \newcommand\printchaptername[2][chapter]{%
%    \end{macrocode}
% 
%    \begin{macrocode}
   \saveelementbox{}{#1}{#2}%   
%   if there is a margin on top set it      
%   #0 is inline   #2 block 
%   This decides if the element and subsequent elements are to be floated left or right. If the first element
%    is to be floated right, then all subsequent elements are floated right.
%    If we are on the first element, we set glue at the beginning to float all subsequent elements to the
%    right, if centered we do the same. 
%          <0  first element rendering
%           0    float left no glue
%           1    center inline 
%           2    right  - glue only at first element
%           3   float left and break
%           4   center and break
%           5   center no break 
%    
%     
%\global\setcounter{chapterfloat}{2}
%\global\setcounter{numberfloat}{2}
%  The following is only executed  for the first element, giving a signal as to how the next elements are to be floated
%  The first element is a negative number and hence will only be activated once.
%   
\setcounter{currentelementfloat}{\csname c@#1float\endcsname}%
      \ifcase \@arabic\c@currentelementfloat                      
                 \expandafter\renderleftblock{#1}\or         %0
                 \expandafter\rendercenterblock{#1}\or         %1
                 \expandafter\renderrightblock{#1}  \or         %2
                 \expandafter\renderinline{#1} \or          %3
      \else
                \rendercenterblock{#1}%
      \fi
%  We now can deal with any material that has to be rendered outside the |element| block, possibly material
%  such as horizontal or vertical rules.
   \ifnum\@arabic\c@numberdisplay=0
      %\hrule 
      %\csname#1after@cx\endcsname% 
     \else
     \@@par       
  \fi    
     }
    
%    \end{macrocode}
%
%  We now ready to render the text. If a border width has been defined we need to use
%  the |draw| property of the node to show it. If not we do not draw it. However, we might
%  still need to fill it, if a background color has been specified.  
%
%    
%  For block elements, i.e., elements that are allowed to float, we use a full line to float them. 
%    \begin{macrocode}
\def\rendercenterblock#1{%
       \appendtotoks{heading}{%
       \centerline{%
         \expandafter\unhcopy\csname#1namebox\endcsname
        }%
    }%
  }
%    \end{macrocode}  
% 
%    \begin{macrocode}
 \def\renderleftblock#1{%
   \appendtotoks{heading}{%
     % \leftline{%
         \expandafter\unhcopy\csname#1namebox\endcsname
      %}%
      }%
  }
  %
\def\renderrightblock#1{%
   \appendtotoks{heading}{%
     \rightline{%
         \expandafter\unhcopy\csname#1namebox\endcsname
      }% 
     }%   
}

\def\renderinline#1{%
  \appendtotoks{headingtoks}{%
     \leftline{%
         \expandafter\unhcopy\csname#1namebox\endcsname
      }%    
      }%  
    }

\def\renderboxcontents#1{%
        \drawmaybe{#1}%  
        \edef\tmp{\tempcmd@cx}
       \inshape[\expandafter\csname#1color@cx\endcsname,
                            fill=\expandafter\csname#1bgcolor\endcsname, 
                            ellipse, 
                            \expandafter\csname#1shape\endcsname, 
                            behind path,
                            line width=1pt,  %!fixme
                            \tmp,]{\expandafter\copy%
                                 \expandafter\csname#1namebox\endcsname}%
  }
%    \end{macrocode}
%
%
% \subsection{Author blocks}
% 
% {printauthorblock} 
%	An author author block is  printed for some chapter 
%	designs such as those in multi-author books, hence we provide a macro to typeset it. 
%	
%    \begin{macrocode}
\def\authorblockdebug{
\if@debug
    \tikz[remember picture,overlay] 
       \draw[<->] (0,0)--(0,0.5)--++(-.2,0)% 
              node[left,fill=blue!15,text=black]%
               {{\ttfamily\footnotesize author block=true}};%
  \fi  
}
\ExplSyntaxOn
\cs_new:Npn \print_author_block:
  {%
    \authorblockdebug
    \authorblockformat@cx\authorblock@cx
  }
\ExplSyntaxOff  
%
%    \end{macrocode}
%   
%

%	We also provide a macro to typeset the number with appropriate
%	hooks for key value parameters.
%
%  \begin{docCommand}{setnumberfont}{}
%  sets the font for the number part of a chapter heading
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\def\setnumberfont{%
    \expandafter\setfontparam@cx\number_font_size;%
    \expandafter\setfontparam@cx\number_font_family;%
    \expandafter\setfontparam@cx\number_font_weight;%
    \expandafter\setfontparam@cx\number_font_shape;%
  }%
\ExplSyntaxOff  
%    \end{macrocode}
% 
% 
% begin{macro}{printnumber@cx}
%    \begin{macrocode}
% {printnumber@cx}
\def\printnumber@cx{%
     \bgroup%
       % \kern\numberpaddingleft\relax
       \@debugtrue
         \numberbefore@cx%
         \if@debug%
         \begin{tikzpicture}[remember picture,overlay]%
         \draw[<->] (0,0)--(-.2,1.0)--++(-.2,0) node[right, text=black]%
          {\footnotesize\string\numberbefore@cx};%
         \end{tikzpicture}%
         \fi%
         \if@chapterspaceout
           \if@soulspaceout
               \SetTracking
							 [ no ligatures = {f},
							 spacing = {600*,-100*, },
							 outer spacing = {450,250,150},
							 outer kerning = {*,*} ]
							 { encoding = * }
							 { 160 }
                \def\x{\thechapter}%
                \def\soxx{\textls\x\strutbox}%
                 %
          \fi       
          \else%
             \def\soxx{\thechapter}%
        \fi%
% We measure the width of the number box before we
% insert any padding and borders          
          \savebox\numberbox{%
                   \color{blue}%
                   \setnumberfont%
                    \soxx}%
%                    
            \colorbox{thegray}{\hbox to \dimexpr(\wd\numberbox%
                               +\numberborderleftwidth
                               +\numberborderrightwidth
                               +\numberpaddingright
                               +\numberpaddingleft){%
                 \vbox{%
                %toprule
                \hrule width\dimexpr(
                                 \wd\numberbox
                                +\numberpaddingright +\numberpaddingleft
                                +\numberborderleftwidth
                               +\numberborderrightwidth
                                 )
                  height\numberbordertopwidth\relax%
              % left rule takes care of padding  
               \vrule height\dimexpr(
                                   \ht\numberbox 
                                  + \numberpaddingtop)% 
                          width\numberborderleftwidth
                          depth\expandafter\dimexpr(
                                   +\numberpaddingbottom-\dp\numberbox)% 
              \kern\numberpaddingleft%
             % \copy\numberbox%\@chapapp
             \drawmaybe{number}%
              \inshape[\temp]{\copy\numberbox}%
              %right rule
              \kern\numberpaddingright%
              \def\sideborderrule{%
                    \vrule height\dimexpr(
                                   \ht\numberbox 
                                  +\numberpaddingtop)% 
                          width\numberborderrightwidth
                          depth\expandafter\dimexpr(-\dp\numberbox
                                   +\numberpaddingbottom)\relax}
               \sideborderrule\hskip1pt\sideborderrule 
               %                      
%               \def\bottomrule{% 
%                  \bgroup
                   \@tempdima\dimexpr(\wd\numberbox
                                    +\numberpaddingright +\numberpaddingleft
                                    +\numberborderleftwidth
                                    +\numberborderrightwidth)
                   \expandafter\@tempdimb\numberborderbottomwidth\relax                 
                  % \drawrule{\@tempdima}{\@tempdimb}%
                   %\egroup
               %}%
               %
               %\ifnum\numberborderstyle@cx>0 %
                      \drawrule{\@tempdima}{\@tempdimb}%
                      % \ifnum\numberborderstyle@cx>1 %
                           \drawrule{\@tempdima}{\@tempdimb}%
                           % \drawdoublerule{\@tempdima}{\@tempdimb}%
                      % \fi
               %\fi
             %
            %
          }}}%
          \numberafter@cx%
          %\aftergroup\offinterlineskip
   \egroup         
}% 
%    \end{macrocode}


% begin{macro}{setchaptertitlefont}
%    \begin{macrocode}
\newif\if@runinhead \@runinheadfalse
\newif\if@titleborderleft \@titleborderlefttrue
\newif\if@titleborderright \@titleborderrighttrue
\def\afteralignhook@cx{\par}


\ExplSyntaxOn
\box_new:N \chapter_title_box

\ExplSyntaxOn
\cs_new:Npn \set_chapter_title_font
  {  \expandafter\setfontparam@cx\title_font_face;
     \expandafter\setfontparam@cx\title_font_weight;
      \expandafter\setfontparam@cx\title_font_family;
      \expandafter\setfontparam@cx\titlefontshape@cx;
      \expandafter\setfontparam@cx\titlefontsize@cx;
      \color{\titlefontcolor@cx}%
  }
\ExplSyntaxOff
%    \end{macrocode}
%
% Provide inerface to expl3 dimensions
% and other variables 
%
%    \begin{macrocode}
\ExplSyntaxOn
  \dim_new:N \chaptertitleboxwidth
  \dim_new:N \offset_for_center
  \dim_new:N \offset_for_right
  \dim_new:N \total_title_width
  \dim_new:N \title_bounding_box_width 
  \dim_set_eq:Nc \chaptertitleboxwidth {chapter_title_text_width}
\ExplSyntaxOff
%
%    \end{macrocode}
%
%
%   \begin{docCommand} {print_chapter_title} { \meta{contents} }
%   This function is responsible to make the chapter title. It receives one parameter
%   which comes from the |\chapter|  command and is the contents of the title.
%   \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn

\cs_new:Npn \print_chapter_title #1 {%
%    \parindent0pt
%     \if@lefttitle%
%       \beforenumber@cx%
%       \counterdisplay\c@chapter\afternumber@cx%
%     \fi%
%% If the title is letter spaced we define a macro to expand it.
      \if@titlespaceout
         \long\def\SSS{{\so{#1}}}
      \else
         \long\def\SSS{#1}
      \fi%
       \if@runinhead% for runin heads
            \def\afternumber@cx{\space\textbar\space}%
            \thechapter\afternumber@cx\space\SSS\par%
       \fi
%%    \end{macrocode}      
%%
%% We save the contents in order to measure the height. 
%% We also calculate the total width of the box with borders, padding and
%% the like.
%%    \begin{macrocode}
			\dim_gset:Nn \total_title_width %including padding+borders
			    {
			        \chapter_title_text_width % text width
			       +\title_border_left_width
			       +\title_border_right_width
			       +\title_padding_left_width
			       +\title_padding_right_width
			     }
%	   
%     \savebox \chapter_title_box {% 
%     \begin{minipage}[t]{\chapter_title_text_width}%
%       \begin{tcolorbox}[width=\chapter_title_text_width, boxrule=.4pt,boxsep=0pt,
%         left=50pt,right=0pt,middle=0pt,arc=0pt,toptitle=0pt,bottomtitle=0pt,
%            % before={\vskip1pt},
%             %after={\vskip10pt}
%             ]
%            Before
%         \end{tcolorbox}      
%         \begin{tcolorbox}[width=\chapter_title_text_width,boxrule=.4pt,boxsep=0pt,
%         left=0pt,right=0pt,middle=0pt,arc=0pt,toptitle=0pt,bottomtitle=0pt,beforeafter~skip=1pt]
%         \set_chapter_title_font 
%           \chapter_title_text_align%
%           \language-1
%           \SSS\par %NEW NEW CHECK
%          \end{tcolorbox} 
%       \end{minipage}%
%      } 
%%    \end{macrocode}
%%
%%   Having measured the title block, we now typeset it. Before we typeset it
%%   we will provide borders all around if required and also allow for padding. 
%%   We will not repeat the browser wars here, so we will provide the borders
%%   outside the block and the padding inside.
%%   
%%   Once we done we append everything to the heading toks.
%%  
%%    \begin{macrocode}

\appendtotoks{heading}{%
%%    \end{macrocode}
%%  We first add the before hook
%%  This is normally used to put ornaments or rules before the title text
%%  block.
%%    \begin{macrocode}
% 
%  \dim_gset:Nn \offset_for_center { ( (\textwidth - \total_title_width)/2) }
%  \dim_gset:Nn \offset_for_right {(\textwidth-\total_title_width)}
%  \dim_gset:Nn \l_tmpa_dim {0pt}
%  \dim_gset:Nn \l_tmpb_dim {0pt}
%  
%
  \dim_gset:Nn \title_bounding_box_width %width defined by kernel!strange error here
    {
      \chapter_title_text_width
      +\title_border_left_width
      +\title_border_right_width
      + \title_padding_left_width
      + \title_padding_right_width  
    }
%    
%  \@debugtrue
%    \if@debug
%       \vbox to 0pt {\tiny titlewidth: \dim_use:N \total_title_width -- 
%                                  texwidth: \dim_use:N \textwidth}
%    \fi
%   \titlebefore@cx% 
%   \begin{tcolorbox}[draft,size=minimal]
%        \centering\includegraphics[width=0.8\linewidth]{babel}
%   \end{tcolorbox}
%  
%%% \tikzrule
%  
%%
%% We save the contents in order to measure the height. 
%% We also calculate the total width of the box with borders, padding and
%% the like.
%%    \begin{macrocode}
%			\dim_gset:Nn \total_title_width %including padding+borders
%			    {
%			         \chapter_title_text_width % text width
%			       +\title_border_left_width
%			       +\title_border_right_width
%			       +\title_padding_left_width
%			       +\title_padding_right_width
%			     }
%	   
%     \savebox \chapter_title_box {% 
%    % \begin{minipage}[t]{\chapter_title_text_width}%
%       \begin{tcolorbox}[width=\chapter_title_text_width, boxrule=.4pt,boxsep=0pt,
%         left=50pt,right=0pt,middle=0pt,arc=0pt,toptitle=0pt,bottomtitle=0pt,
%             before={\vskip1pt},
%             after={\vskip10pt}]
%            Before
%         \end{tcolorbox}      
%         \begin{tcolorbox}[width=\chapter_title_text_width,boxrule=.4pt,boxsep=0pt,
%         left=0pt,right=0pt,middle=0pt,arc=0pt,toptitle=0pt,bottomtitle=0pt,beforeafter~skip=1pt]
%         \set_chapter_title_font 
%           \chapter_title_text_align%
%           \language-1
%           \SSS\par %NEW NEW CHECK
%          \end{tcolorbox} 
%     %  \end{minipage}%
%      } 
%%    \end{macrocode}
%%
%%   Having measured the title block, we now typeset it. Before we typeset it
%%   we will provide borders all around if required and also allow for padding. 
%%   We will not repeat the browser wars here, so we will provide the borders
%%   outside the block and the padding inside.
%%   
%%   Once we done we append everything to the heading toks.
%%  
%%    \begin{macrocode}
%
%\appendtotoks{heading}{%
%%    \end{macrocode}
%%  We first add the before hook
%%  This is normally used to put ornaments or rules before the title text
%%  block.
%%    \begin{macrocode}
% 
  \dim_gset:Nn \offset_for_center { ( (\linewidth - \chapter_title_text_width)/2) }
  \dim_gset:Nn \offset_for_right {(\linewidth-\chapter_title_text_width)}
  \dim_gset:Nn \l_tmpa_dim {0pt}
  \dim_gset:Nn \l_tmpb_dim {0pt}
  \tcbset{centered/.style={
             width=\chapter_title_text_width, 
             boxrule=.4pt,boxsep=0pt,
             left=0pt,right=0pt,
             leftright~skip=0pt,
             middle=0pt,arc=0pt,toptitle=0pt,bottomtitle=0pt,
             before={\vskip1pt},
             after={\vskip1pt}}
                }
                
   \tcbset{floatright/.style={
             width=\chapter_title_text_width, 
             boxrule=.4pt,boxsep=0pt,
             left=0pt,right=0pt,top=0pt,bottom=0pt,
             left~skip=-\offset_for_right-\offset_for_right,
            % right~skip=0pt,
%             leftright~skip=0cm,
             %middle=0pt,arc=0pt,toptitle=0pt,bottomtitle=0pt,
             before={\vskip1pt},
             after={\vskip1pt}}
                }             
%  
%
%  \dim_gset:Nn \title_bounding_box_width %width defined by kernel!strange error here
%    {
%      \chapter_title_text_width
%      +\title_border_left_width
%      +\title_border_right_width
%      + \title_padding_left_width
%      + \title_padding_right_width  
%    }
%    
%  \@debugtrue
%    \if@debug
%       \vbox to 0pt {\tiny titlewidth: \dim_use:N \total_title_width -- 
%                                  texwidth: \dim_use:N \textwidth}
%    \fi
%   \titlebefore@cx% 
%   \begin{tcolorbox}[draft,size=minimal]
%        \centering\includegraphics[width=0.8\linewidth]{babel}
%   \end{tcolorbox}
%  
%%    \end{macrocode}
%%
%% We now need to decide if the title element can be floated or not. The description 
%% is a bit Knuthian with lot of ifs and buts, but here is a simple explanation 
%% behind the rules.
%%
%% If a \docAuxCommand{title_margin_left} has been specified it means that we need
%% to position the block exactly so many units from the left, hence we cannot float
%% and ignore any settings to that effect.
%%
%% To float the display property must be set to block and the float property
%% to right, left or center. 
%%
%% We add the title top margin only for block displays. This is questionable
%% inline blocks might also need it.
%%
%%    \begin{macrocode}
%\str_case_x:nnTF {\chapter_title_display_tl}
%		  {
%		    {block        }   {\dim_gset_eq:NN \l_tmpb_dim \title_margin_top
%		                      
%		                      }
%		    {inline       }   {\dim_gset:Nn  \l_tmpb_dim {0pt} }
%		    {inline-block }   {\dim_gset:Nn \l_tmpb_dim {0pt}}
%		    {none         }   {\dim_gset:Nn \l_tmpb_dim {0pt}}
%		  }
%		  {}
%		  {} 
%%
% \if@debug {\tiny ~top-margin \dim_use:N 
%            \title_margin_top~\dim_use:N \l_tmpb_dim\relax 
%             ~~title-display:~\tl_use:N \chapter_title_display_tl}
% \fi		  
% 
% \vskip\dim_eval:n\l_tmpb_dim		  
%% Check for left margin
%  \if_dim:w \title_margin_left>0pt
%     \dim_gset:Nn  \l_tmpa_dim {\title_margin_left}
%  \else:
%    \str_if_eq_x:nnTF {\chapter_title_display_tl}{block}
%	  { 
%%    \end{macrocode}
%%
%%    \begin{macrocode}	    
%	    \vskip\dim_eval:n \title_margin_top
%	   	\str_case_x:nnTF { \chapter_title_float_tl }
%		  {
%		    {none  }   {\dim_gset:Nn  \l_tmpa_dim {0pt}}
%		    {left  }   {\dim_gset:Nn  \l_tmpa_dim {0pt} }
%		    {center}   {\dim_gset_eq:NN \l_tmpa_dim \offset_for_center}
%		    {right }   {\dim_gset_eq:NN \l_tmpa_dim \offset_for_right}
%		  }
%		  {}
%		  {}  
%	 }
%	 {\dim_gset:Nn \l_tmpa_dim {0pt}}	  
%\fi:    
%  \if@debug
%   \hrule width \dim_eval:n \l_tmpa_dim height.2pt depth0pt\relax
%  \fi
%  \hskip\dim_eval:n \l_tmpa_dim \relax
%  \mbox{%
%    \parindent0pt
%    \hbox_to_wd:nn {\chapter_title_text_width
%                                    +\title_border_left_width
%                                    +\title_border_right_width
%                                    + \title_padding_left_width
%                                    + \title_padding_right_width
%                                    }
%      {
%         \vbox:n {%
%         \color{\title_border_top_color}%              
%         \vskip0pt
%         \nointerlineskip 
%%  draw horizontal rule   
%%          
%          \vrule width
%              \expandafter\dimexpr(\chapter_title_text_width
%               +\dim_eval:n \title_border_left_width %checked ok
%               +\dim_eval:n \title_border_right_width
%               +\dim_eval:n \title_padding_left_width
%               +\dim_eval:n \title_padding_right_width) 
%                height   \dim_eval:n \title_border_top_width \relax
%                 %
%                \vskip0pt\nointerlineskip
%%    \end{macrocode}
%%  
%%   Next we draw the left border.  
%%    \begin{macrocode}
%%        
%                   \color{\title_border_left_color}%
%                   \vrule width \dim_eval:n \title_border_left_width  
%                             height\expandafter\dimexpr(\ht\chapter_title_box
%                             +\title_padding_top_width)\relax
%                             depth\dimexpr(\title_padding_bottom_width+\dp\chapter_title_box)
%%    \end{macrocode}
%%
%%  Kern for any pading left before we put the contents.
%%    \begin{macrocode}    
%                \kern\title_padding_left_width
%%    \end{macrocode}
%%
%%  we typeset the text which is now in the minipage and we go on
%%  and also add the right padding and border if required.
%%  We copy instead of |\usebox| as we do not wanr to go into paragraph mode
%%  Unsure about this item will need to revisit. Gives issues with some of the templates. 
%%
%%    \begin{macrocode} 
%%    
%%        \begin{minipage}[t]{\chapter_title_text_width}%
%%       \vskip1pt 
         \par\rule{\linewidth}{2pt}\vskip0pt
        \begin{tcolorbox}[centered,width=\offset_for_right]
            Before
         \end{tcolorbox}      
        \hspace*{3cm}\begin{tcolorbox}[floatright,]
         \set_chapter_title_font 
           \chapter_title_text_align%
           \language-1
           \SSS\par %NEW NEW CHECK
          \end{tcolorbox} 
% %          
% %      \end{minipage}% \copy\titlebox% 
% %       
%%       
%%      \par
%       \offinterlineskip     
%%    \end{macrocode}
%%   next we typeset the right border. 
%%    \begin{macrocode}             
%             \ifdim\title_border_right_width>0pt
%                    \color{\title_border_right_color}% 
%                    \kern\title_padding_right_width
%                     \vrule width \dim_eval:n \title_border_right_width
%                              height\expandafter\dimexpr(
%                              \ht\chapter_title_box+\title_padding_top_width)
%                              depth\dimexpr(\title_padding_bottom_width+\dp\chapter_title_box)
%              \fi
%%    \end{macrocode}
%%
%%  next we skip to the bottom and draw a bottom rule
%%  if it is specified. We are still in paragraph mode
%%    \begin{macrocode}
%%%      
%             \color{\title_border_bottom_color}%     
%             \vskip0pt
%             \nointerlineskip 
%             \vrule width
%                      \expandafter\dimexpr(
%                       \chapter_title_text_width
%                      +\expandafter\title_border_left_width
%                      +\dim_eval:n \title_border_right_width
%                      +\title_padding_left_width + \title_padding_right_width
%                ) 
%             height \dim_eval:n \title_border_bottom_width\relax
%             % hook for aligning normally par, unless there is more material  
%              %
%%Hook before skips
%      \if@righttitle%
%         \afternumber@cx%
%         \counterdisplay\c@chapter\afternumber@cx%
%      \fi%
%      %
%      %\titleafterskip@cx 
%%    \end{macrocode}
%%  
%%  The final bottom margin will be added later we just draw a debug rule
%%    \begin{macrocode}       
%      \@debugtrue
%      \if@debug%
%          %\par\leavevmode%
%          \vbox to 0pt{%
%              \offinterlineskip
%               \tex_vrule:D width.4pt depth0pt height% 
%                \dim_eval:n \title_margin_bottom\relax% 
%                \tex_kern:D 2pt\raisebox{3pt}{
%                    \hbox_to_zero:n 
%                        { \tiny\dim_use:N \title_margin_bottom }
%                   }     
%            }%
%     \fi%
%     %
   }%heading   
% }
% }
%}
%%\hb
%}%\afteralignhook@cx
%%    \end{macrocode}
%% We finally add the titleafter@cx hook. This takes care of any material added at the end of the
%% text block. Also here we inject the end of paragraph marker and return to vertical mode. 
%% 
%%    \begin{macrocode}
% %    \titlemarginbottom@cx%   CHECK!!!
%  %   \titleafter@cx%introduces space if par???  
}
\ExplSyntaxOff
%  end macro here
%    \end{macrocode}

% 
%
% \begin{docCommand}{make_chapter_head} {\marg{optional part of chapter}}{\marg{title}}
%	 The macro calls the main typesetting activities of the chaper head
%	 We begin our typesetting by checking, if the macro has a special
%	 design which we then call.
%  This is a replacement macro for \latexe |\@make_chapter_head|. We get it here
%  with two parameters in order to set also the chaptermark

%  \end{docCommand}
%    \begin{macrocode}
%    \newif\if@mainmatter \@mainmatterfalse CHECK THIS NOT NECESSARY
%
%
%    \end{macrocode}
% 
%  \begin{docCommand}{appendtotoks} { \marg{toks name} \marg{contents}}  
%   The command \cmd{\appendtotoks} is just a helper macro to append tokens to a
%   token register, defined as \meta{element name}|toks|. 
%  \end{docCommand}
%
%  \begin{docCommand}{prependtotoks} { \marg{toks name} \marg{contents}}    
%   The command \cmd{\prependtotoks} is just a helper macro to prepend tokens to a
%   token register, defined as \meta{element name}|toks|. 
%  \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \appendtotoks #1#2
  {
    \expandafter\expandafter\expandafter\csname#1toks\endcsname\expandafter{
      \the\csname#1toks\endcsname #2}
  }
\cs_new:Npn \prependtotoks #1#2
  {
    \expandafter\expandafter\expandafter\csname#1toks\endcsname\expandafter{
      #2 \the\csname#1toks\endcsname }
  }  
\ExplSyntaxOff
%    \end{macrocode}
% 
%
%    \begin{macrocode}
\ExplSyntaxOn
\def\set_number: {
  \appendtotoks{number}{\numberbefore@cx}%
  \appendtotoks{number}{\color{\numbercolor@cx}}%
  \appendtotoks{number}{\setnumberfont}%     
  \if@chapterspaceout
     \if@soulspaceout
         \expandafter\appendtotoks{number}{\so\thechapter}%
      \fi
   \else
      \expandafter\appendtotoks{number}{\thechapter}%   
   \fi   
   \appendtotoks{number}{\numberafter@cx}%
}
\ExplSyntaxOff
%    \end{macrocode}
%  
%   \begin{docCommand}{@makechapterhead}{\oarg{contents}\marg{contents}}
%     This is where everything happens. If the design is special
%     it is by-passed and send to the custom layout renderer.
%
%     The engine first assembles all the elements that make up the
%     the chapter head and inserts them into a sequence list.
%     The macros are then expanded by the typesetting section of the 
%     layout engine.
%
%   \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
%
\cs_gset:Npn \make_chapter_head #1 #2
  {%
%  \if@special
%    \customdesign@cx{#2}%needs to go different 
%  \else
%    \end{macrocode}
%
% 	We now ready to typeset the chapter heading, we run everything 
% 	within a group and
% 	activate the chapter only if the |thesecumdepth>-1| and if only we are 
% 	within mainmatter. 
%
%    \begin{macrocode}
    \tex_parindent:D 0pt 
      %\offinterlineskip
      %
    \normalfont%
%  \ifnum \c@secnumdepth>\m@ne%
%    \if@mainmatter%
%    \end{macrocode}
%
% We first check if we need to print anything before the chapter head, as for
% example an image or a graphic, we then check if the number is to the left of
% the right of the image and typeset it. We follow it by printing any chapter
% 
%    \begin{macrocode}
    \tex_lineskip:D 0pt% 
    \tex_topskip:D 0pt%check this out
    %\chaptermargintop@cx%
    \leavevmode% 
%    \if@runinhead%
%    \else%
%      \if@leftname%
%         \printnumber@cx% Will use patterns
%      \fi%
%    \end{macrocode}
%
%  The typesetting of the chapter and number combination and as a matter of fact
%  any generalized string of element blocks depends if the value of the property |display|
%  is inline, inline block or block. A block can float freely, whereas the others restrict the
%  typesetting to a linear mode.
%
%  Both token registers have a common part and a unique part
%    \begin{macrocode}
      \set_number:
%    \end{macrocode}
%
%    In terms of the language semantics, I am not too sure, what should happen, if the
%    heading does not have a name (should all its properties be nullified and be taken 
%    over by the next element? Needs thought and I will revisit this.
%
%    \begin{macrocode}  
       \xdef\xtemp{\chaptername}%
       \xdef\ytemp{}%         
       \ifx\xtemp\ytemp%
          \printchaptername[number]{\the\numbertoks}%               
       \else
%    \end{macrocode}   
%  
%  We collect all the commands in a token register. We start with the color and font
%  settings which we add in a group.
%             
%  Any before property means vertical mode by definition, we do this by means of a |vskip0pt|
%    \begin{macrocode}
       \appendtotoks{chapterprelim}{\leavevmode \chapter_before\vskip0pt}
       \appendtotoks{chapter}
         {
           \leavevmode\noindent
           \color\chaptercolor@cx
           \set_chapter_font
         }
       \appendtotoks{chapter}{\chapter_before_content}  
                 
           %\if@chapterspaceout
               \expandafter
  %               \so{\chaptername}}%PROBLEMS FIX
                                             
%           \else
              \appendtotoks{chapter}{\chaptername}%
 %          \fi   
         
%
%    \end{macrocode}
%
%  Next we need to add the tokens for decorating the number. We expect all headings to ne
%  numbered if the word `chapterâ€™ is prefixed to the heading. 
%    
%
%    \begin{macrocode} 
        \ifnum\thenumberdisplay=0 %                    
          \appendtotoks{chapter}{\kern0.5em}%
          \appendtotoks{chapter}{\the\numbertoks\numberaftercontent@cx}%
%    \end{macrocode}
%
%   We are done with inline headings and we can typeset them.
%    \begin{macrocode}
%   
              \the\chapterprelimtoks                 
              \printchaptername[chapter]{\the\chaptertoks}%
                 %
%    \end{macrocode}
%
%  If both the chapter name as well as the number are displayed as blocks
%  we typeset them in two operations.
%
%    \begin{macrocode}                  
          \else
                %\the\chapterprelimtoks%
                \expandafter\printchaptername[chapter]{\the\chaptertoks}%
                \expandafter\printchaptername[chapter]{\the\numbertoks}%
        \fi%ifnum  
%      \fi
%     \fi%runin
%    \fi% mainmatter
%   \fi%secnum
% \fi% We close the main conditional @special   removed went to __chapter
%    
%   
% Next we compose the title block using \refCom{set_chapter_title:nn}.  The actual printing will
% be done a bit later on.
\set_chapter_title:nn {#1}{#2} 
\appendtotoks{heading}{\begin{tcolorbox}[centered,left=0pt,right=0pt]{after~title}\end{tcolorbox}}
 \typeset_heading:   
 }      
%    \end{macrocode}
%

% \begin{docCommand}{set_chapter_title:nn} {\marg{arg1}}{\marg{arg2}}
%   sets all the parameters for the chapter title block.
% \end{docCommand}

%    \begin{macrocode}
\cs_new:Npn \set_chapter_title:nn #1#2{
% 	We typeset the title block and if there is an author block we print it.  
%	and print it.
%    \begin{macrocode}
    \if@chaptertitlespecial%
       \csname ethics\endcsname{#2}%
    \else%
       \print_chapter_title { #2 }
     \fi
}     
%    \end{macrocode}       
% Now we ready to add the contents in an outer box or vbox will see 
%    \begin{macrocode} 
   
%   
% Add any margin at the bottom of the title block    
%
\cs_new:Npn \author_block_aux: {
   \skip_vertical:n \title_margin_bottom
      \if@authorblock 
           \print_author_block:
           \authorblockafterskip@cx
      \fi%
    \tex_par:D
    \nobreak%
   %
}%

\tcbset{centered/.style={
             width=\linewidth, 
             boxrule=.4pt,boxsep=0pt,left=0pt,right=0pt,
             leftright~skip=0cm,middle=0pt,arc=0pt,toptitle=0pt,bottomtitle=0pt,
             before={\vskip1pt},
             after={\vskip1pt}}
                }
                
\cs_new:Npn \typeset_heading: {
\bgroup
  \parindent0pt
       \begin{tcolorbox}[
         width=\textwidth, 
         boxrule=.4pt,
         boxsep=0pt,
         leftright~skip=0cm,
         middle=0pt,
         arc=0pt,
         toptitle=0pt,
         bottomtitle=0pt,
         left=0pt,
         right=0pt,
         before={\vskip1pt},
         after={\vskip1pt},
         oversize=0cm,]
        %\parindent1em       
        \the\headingtoks
       \end{tcolorbox}
\egroup
% Need to empty the toks after we typeset them!!! Or use them in a group
% Add to notes for pittraps of heading management!       
  \headingtoks{}  
  %\headingstoks{} 
  \numbertoks{}
  \chaptertoks{}
  \chapterprelimtoks {}  
  \author_block_aux:     
  }   
\ExplSyntaxOff
%    \end{macrocode}
% 
%
%
% {chapter} The \cs{chapter} is modified to
% 	add hooks for openings and headers. 
% 	The |book| standard class states that a chapter should
% 	always start on a new page. In reality many book styles
%	allow the chapter heading to be continuous i.e., more
%	like a section. \label{code:chapterafterindent} 
%    \begin{macrocode}
\global\newif\if@chapterafterindent@cx \@chapterafterindent@cxtrue
%    \end{macrocode}
%
%  We set keys for |\afterindent| to enable it via the key value interface
%  
%    \begin{macrocode}
\cxset{chapter afterindent/.is choice,
           chapter afterindent/true/.code=\gdef\chapterafterindent@cx{%
                                                            \global\@chapterafterindent@cxtrue},
           chapter afterindent/false/.code=\gdef\chapterafterindent@cx{%
            \global\@chapterafterindent@cxfalse},
}           
% We set this to false by default
\cxset{chapter afterindent=true}
% call it after a heading
%    \end{macrocode}
% \begin{docCommand}{chapter_after_heading:}{ \meta{void} }
%   This is a hook, that is called after the chapter heading is typeset in
%   order to control the indentation of the first paragraph.
%   It is based on similar code from \latexe and we explorify it.
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn \chapter_after_heading:
  {
    \@nobreaktrue
    \everypar
      {
         \if@nobreak
           \@nobreakfalse
           \clubpenalty \@M
           \if@chapterafterindent@cx \else
             {\setbox\z@\lastbox}
           \fi
         \else
         \clubpenalty \@clubpenalty
         \everypar {}
         \fi
      }
  }
\ExplSyntaxOff  
%    \end{macrocode} 
% 
%  \begin{docCommand}{chapter} {\oarg{short title}\marg{contents}}
%  We renew |\chapter| after we save its old definition
%  \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\let\ltxchapter\chapter
%
% \begin{docCommand}{}{}
\NewDocumentCommand \Chapter {s o m }
{
  % star version
  \IfBooleanTF {#1} {} {}   
  % optional etc
  \ifValueTF {#2}
    {\chapter{[#2]}{#3}} {}
}


\renewcommand\chapter
  {
    \if@openright\cleardoublepage\fi
    \if@openleft\cleartoevenpage\fi
    \if@openany\clearpage\fi
%    \end{macrocode}
%  
%	Floats are prevented from floating at the top of chapter
%	opening pages as they look out of place.
% 	|\headerstyle@cx| defaults to empty.
%    Then we suppress the indentation of the first paragraph by
%    setting the switch |\@afterindent| to |false|. We use |\secdef|
%    to specify the macros to use for actually setting the chapter
%    title.
%
%    \begin{macrocode}
    \thispagestyle{empty}
    \global\@topnum\z@~%
%    \end{macrocode}
%
% We provide a hook to handle indentation after a chapter. This would 
% also necessitate to change the afterheading macro and make it specific 
% to a chapter head.
%    \begin{macrocode}  
      \@chapterafterindent@cxfalse
   % \@afterindentfalse
%    \end{macrocode}
% 
%
% 	Everything is now ready to call |secdef|, which is defined in the
% 	kernel. This command takes two arguments and calls the auxiliary
% 	macros for starred and unstarred commands. 
%
%    \begin{macrocode}
      \secdef\__chapter\@schapter
   }%[optional]{title} follows
\ExplSyntaxOff
%    \end{macrocode}
%
% We first define the unstarred version of the command.
% This is modified to include
% our hooks.
%%    \begin{macrocode}
\newif\if@tocspecial\@tocfalse
\def\formattoctitle{}
% 
%    \end{macrocode}
%
% \begin{docCommand}{__chapter} {\marg{}\marg{}}
%    This macro is called when we have a numbered chapter. When
%    |secnumdepth| is larger than $-1$ and, in the book
%    class, |\@mainmatter| is true, we display the chapter
%    number. We also inform the user that a new chapter is about to be
%    typeset by writing a message to the terminal. We hook
%	 here to add a number of typesetting key value macros.
%	
%    \#1 what to write in toc if has optional argument
%    \#2 title
% 
%   
%   The non-star form of the command.
%  
%   \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn \__chapter [#1]#2 
  {
  %\refstepcounter{chapter}%
    \ifnum \c@secnumdepth >\m@ne%
      \if@mainmatter
        \if@toc% added extra if
          \refstepcounter{chapter}%
          \typeout{\@chapapp\space\thechapter.}%
          \def\tocchapternumber@cx{\@arabic\c@chapter}%to move over
          \phantomsection
          \addcontentsline{toc}{chapter}
            {
              \protect\numberline{Chapter~\tocchapternumber@cx~}{#1}
         %\protect\chapternumberline{\tocchapternumber@cx}{#1}{\tocimage@cx}
            }
        \fi%
            %\fi%
      \else
          \addcontentsline{toc}{chapter}{#1APAPAP}%for prelims???
      \fi%
    \else%
      \addcontentsline{toc}{chapter}{#1PPP}%????? for part
    \fi%secnumdepth
%    \end{macrocode}
%
%	After having written the entry to the table of contents we
%	store the alternative title of this chapter with |\chaptermark|
%	and add some white space to the lists of figures and tables.
%    In one column mode we call \refCom{chapter_after_heading:} which takes care 
%	of supressing the indentation after a chapter heading. Then
% we hand over the typesetting to \refCom{make_chapter_head}, which
% is the work-horse of the package. 
%
%    \begin{macrocode}
  \chaptermark{#1}%
  \addtocontents{lof}{\protect\addvspace{10\p@}}%
  \addtocontents{lot}{\protect\addvspace{10\p@}}%
     \if@twocolumn
         \@topnewpage[\make_chapter_head {#1} {#2}]%
      \else%
         \if@special
            \customdesign@cx{#2}%needs to go different 
         \else
           \make_chapter_head {#1} {#2}%
         \fi
%    \end{macrocode}
%
% Next we call \refCom{chapter_after_heading:} to set the indentation
% after the heading is typeset.
%    \begin{macrocode}         
          \chapter_after_heading:
      \fi
   }
\ExplSyntaxOff   
%    \end{macrocode}
% 
%    \begin{macrocode}
\cxset{toc image/.store in = \tocimage@cx}
\cxset{toc image ={}}
%
% 
\gdef\setdefaults{%
\cxset{%
  chapter toc=true,
  toc image={},
  chapter name=none,
  title font-family=rmfamily,
  title font-weight=bfseries,
  title font-size=Huge,
  title font-color=purple,
  title margin-bottom=20pt,
  numbering=arabic,
  number dot=,
  number before=,
  number after=,
  %chapter name
 chapter display=block,
 chapter float=left,
 chapter shape=ellipse,
 chapter color=black,
 chapter background-color=sweet,
 chapter font-size= Huge,
 chapter font-weight=bfseries,
 chapter font-family=itshape,
 chapter before=,
 chapter spaceout=none,
 chapter after=,
 chapter margin-left=0cm,
 chapter margin-top=0pt,
 %
 chapter border-width=2pt,
 chapter border-top-width=1pt,
 chapter border-right-width=1pt,
 chapter border-bottom-width=1pt,
 chapter border-left-width=4pt,
% 
 chapter padding-left=20pt,
 chapter padding-right=20pt,
 chapter padding-top=20pt,
 chapter padding-bottom=10pt,
% 
 number display=block,
 number float=right,
 number shape=starburst,
 numbering=Words,
 number spaceout=soul,
 number font-size=huge,
 number font-weight=bold,
 number font-family=rmfamily,
 number font-shape=itshape,
 number before=,
 number display=inline,
 number float=none,
% 
 number border-top-width=1pt,
 number border-right-width=0pt,
 number border-bottom-width=0pt,
 number border-left-width=0pt,
 number border-width=0pt,
%  
 number padding-left=0em,
 number padding-right=0.5em,
 number padding-top=0em,
 number padding-bottom=0pt,
  %number margin-top=, to do
 %number margin-left=0pt,  to create
 %
 number after=\par,
 number dot=,
 number position=rightname,
 number color=sweet,
 number background-color=white,
 title before=,
 title after=,
 title afterskip={\vskip24pt},
 title beforeskip=,
 title font=rmfamily,
 chapter title width=\columnwidth,
 header style=plain,
 section font-weight=bfseries,
 section font-family=sffamily,
 section font-size=Large,
 section font-shape=upshape,
 section align= left,
 section numbering suffix=,
 title font-shape=upshape,
 chapter title align=left,
 chapter title text-align=left,
 chapter title width=0.8\textwidth,
 title before=,
 title after=,
 title display=block,
 title beforeskip=1pt,
 title afterskip=1pt,
 author block=false,
 section font-family=rmfamily,
 section font-size=LARGE,
 section font-weight=bfseries,
 section indent=0pt,
  section font-weight=mdseries,
 section align=left,
% epigraph width=\dimexpr(\textwidth-2cm)\relax,
% epigraph align=center,
 epigraph text align=center,
 epigraph rule width=0pt,
 header style=plain
 % blank page text=,
}
}
\cxset{rule color/.store in={\rulecolor@cx},
          block color/.store in={\blockcolor@cx}}
\cxset{rule color=blue, block color=teal}
\cxset{style87/.style={
 chapter opening=any,
 chapter numbering=arabic,
 chapter name= Chapter,
 % positioning and float - inline is 0
 %  float right is 2
 number display=block,
 number float=right,
 number shape=starburst,
 %numbering=Words,
 number spaceout=soul,
 number font-size=huge,
 number font-weight=bold,
 number font-family=rmfamily,
 number font-shape=normal,
 number before=,
 number display=inline,
 number float=none,
% 
 number border-top-width=0pt,
 number border-right-width=0pt,
 number border-bottom-width=0pt,
 number border-left-width=0pt,
 number border-width=0pt,
%  
 number padding-left=0em,
 number padding-right=0.5em,
 number padding-top=0em,
 number padding-bottom=0pt,
  %number margin-top=, to do
 %number margin-left=0pt,  to create
 %
 number after=\par,
 number dot=,
 number position=rightname,
 number color=sweet,
 number background-color=white,
 %chapter name
 chapter display=block,
 chapter float=left,
 chapter shape=ellipse,
 chapter color=black,
 chapter background-color=sweet,
 chapter font-size= Huge,
 chapter font-weight=bfseries,
 chapter font-family=itshape,
 chapter before=,
 chapter spaceout=none,
 chapter after=,
 chapter margin-left=0cm,
 chapter margin-top=0pt,
 %
 chapter border-width=2pt,
 chapter border-top-width=1pt,
 chapter border-right-width=1pt,
 chapter border-bottom-width=1pt,
 chapter border-left-width=4pt,
% 
 chapter padding-left=20pt,
 chapter padding-right=20pt,
 chapter padding-top=20pt,
 chapter padding-bottom=10pt,
  %chapter title
 title font-family=rmfamily,
 title font-color=black!80,
 title font-weight=bfseries,
 title font-size=huge,
 chapter title align=none,
 title margin-left=0cm,
 title margin-bottom=1.3cm,
 title margin-top=30pt,
 % title borders
 title border-width=0pt,
 title padding=0pt,
 title border-color=black!80,
% title border-top-color=spot!50,
% title border-top-width=20pt,
 title border-left-color=black!80,
 title border-left-width=2pt,
 title border-color=black!80,
 title padding-top=10pt,
 title padding-bottom=10pt,
 title padding-left=10pt,
 title padding-right=0pt,
% title border-right-color=spot!50,
% title border-right-width=20pt,
% title border-bottom-color=spot!50,
% title border-bottom-width=20pt,
 %
 chapter title align=left,
 chapter title text-align=left,
 chapter title width=0.8\textwidth,
 title before=,
 title after=,
 title display=block,
 title beforeskip=12pt,
 title afterskip=12pt,
 author block=false,
 section font-family=sffamily,
 section font-size=LARGE,
 section font-weight=bfseries,
 section indent=0pt,
  section font-weight=mdseries,
 section align=left,
 section font-family=tiresias,
       subsection font-family=tiresias,
       subsubsection font-family=tiresias,
       subsubsection indent=0pt,
       subsubsection font-size=large,
 %epigraph width=\dimexpr(\textwidth-2cm)\relax,
 %epigraph align=center,
 %epigraph text align=center,
 %epigraph rule width=0pt,
 header style=plain,
 chapter toc=true,
 }}
 
\cxset{section align=left}
\cxset{section font-weight=bold}
\cxset{section font-family=sffamily}
\cxset{subsection beforeskip=10pt} 
\cxset{subsection afterskip=10pt,
       subsection font-weight=bfseries,
       subsection font-family=sffamily,
       subsection font-size=Large,
       subsection font-shape=upshape,
       subsection align=flushleft,%don't say left
       subsection color=spot!50,
       subsection indent=0pt,
       %subsection afterindent=false,
       subsection numbering prefix=\thesection.,
       subsubsection indent=0pt,
       section font-family=tiresias,
       subsection font-family=tiresias,
       subsubsection font-family=tiresias,
       subsubsection indent=0pt,
       subsubsection font-size=large,
       subsection afterskip=10pt,
       subsection font-weight=bfseries,
       subsection font-family=tiresias,
       subsection font-size=Large,
       subsection font-shape=upshape,
       subsection align=flushleft,%don't say left
       subsection color=spot!50,
       subsection indent=0pt,
       %subsection afterindent=false,
       subsection numbering prefix=\thesection.,
       }
\cxset{section align=left}
\cxset{section font-weight=bold}
\cxset{section font-family=sffamily}
\cxset{subsection beforeskip=10pt} 
\cxset{subsection afterskip=10pt,
       subsection font-weight=bfseries,
       subsection font-family=tiresias,
       subsection font-size=Large,
       subsection font-shape=upshape,
       subsection align=flushleft,%don't say left
       subsection color=spot!50,
       subsection indent=0pt,
       %subsection afterindent=false,
       subsection numbering prefix=\thesection.,
       }

\cxset{style87}
\renewsection
\renewsubsection
%    \end{macrocode}
%    
%
% \chapter{List Management}
% 
% Lists like tables, have always been difficult to devise a syntax for setting them. 
% We first start from enumerated lists.
%
% \section{Current status}
%
% Most journals develped their own lists and hard-wired them. Current packages are:
% \pkgname{enumitem} , \pkgname{enumerate}, \pkgname{paralist}.
%
% \subsection{enumerate}
% This package gives the \refEnv{enumerate} an optional argument which determines
% the style in which the counter is printed. An occurence of one of the tokens 
% \textbf{A a I i } or \textbf{1} produces the value of the counter printed with
% (respectively) \cmd{\Alph} \cmd{\alph} \cmd{\Roman} \cmd{\roman} or \cmd{\arabic}. 
% These letters may be surrounded by any string involving any other \tex expressions, 
% however the tokens \textbf{A a I i 1} must be inside a \{\} group if they are
% not to be taken as special.
%
%    \begin{macrocode}
% \begin{enumerate}[EX i.]
%   \item one one one one one one one
%         one one one one\label{LA}
%   \item two
%      \begin{enumerate}[{example} a)]
%        \item one of two one of two
%          one of two\label{LB}
%        \item two of two
%       \end{enumerate}
%   \item two of two
% \end{enumerate}
% 

% \begin{enumerate}[{A}-1]
% \item one\label{LC}
% \item two
% \end{enumerate}
%    \end{macrocode}
%
% This package minimally changes the original \latexe definitions. It is very convenient when you
% want now and then to change labels in a document.
%
% The enumerate environment uses four counters: \docCounter{enumi}, \docCounter{enumii}, 
% \docCounter{enumiii}, \docCounter{enumiv}. These control the numbering of the $n^{th}$ level
% enumeration.
%
% \section{User Level}
%
% At the user level we want to simplify things as much as possible. Since we are going to provide
% styles, we can provide some very flexible environments, including a |newlist| environment.
%
% \subsection{Requirements}
%
% The keys will be set at two levels. At the User Level we will provide an optional argument to
% the standard or non-standard environments to enable them to be redefined on the fly. Once they
% are redefined they will stay in force until another directive is used.
%
% \subsubsection {Vertical spacing}
%
%  The options |topsep, partopsep, parsep, itemsep| will be offered.\footnote{This will be inline with
%   the enumitem, so users familiar with its syntax can continue using it.}
%
% \subsubsection {Horizontal spacing}
%
% The options |leftmargin|, |rightmargin|, |listparindent|, |labelwidth|, |labelsep|, |itemindent| will
% also be offered.   
% 
% \subsection{Labels}
%
% The labels in the enumerate environment are mostly the numbering labels. Bezos's package allows for
% a set of commands to go here.
%
% |label=\emph{\alph*})|
%
% It also offers |label*=\meta{commands}| that emulates the enumerate package style.
%
% Options we need to offer |font|, |format| |align| |before|
%
% \subsubsection{Commands to start and resume the numbering of the list}
%
% Bezos offers this also as a key. This is very useful and has its uses.
%
% The |CSS| model that we try to follow, is more suitable for exensions for languages and others.
% This uses the |list-style-property|, which is common both for |<ul>| or |<ol>|. The
% |<ul>| and |<ol>| can be thought of as environments. 
%
% 
%    \begin{macrocode}
\RequirePackage{enumerate}
\ExplSyntaxOn
\cxset 
  {
    enumerate~numberingi/.is~choice,
    enumerate~numberingi/arabic/.code = \cs_gset:Npn \theenumi {\@arabic\c@enumi}\relax,
    enumerate~numberingi/alpha/.code  = \cs_gset:Npn 
                                                \theenumi {\@alph\c@enumi}\relax,
    enumerate~numberingi/alph/.code  =  \cs_gset:Npn 
                                                \theenumi {\@alph\c@enumi}\relax,                                              
    enumerate~numberingi/Alpha/.code  = \cs_gset:Npn \theenumi 
                                                {\@Alph\c@enumi}\relax,
    enumerate~numberingi/roman/.code  = \cs_gset:Npn 
                                                \theenumi {\@roman\c@enumi}\relax,
    enumerate~numberingi/Roman/.code  = \cs_gset:Npn 
                                                 \theenumi {\@Roman\c@enumi}\relax,
    enumerate~numberingi/none/.code  =  \cs_gset:Npn 
                                                 \theenumi {}\relax,
}                                                 
%
\cxset{                                                 
    enumerate~list-style-type/.is~choice,
    enumerate~list-style-type/decimal/.code = \cs_gset:Npn \theenumi {\@arabic\c@enumi},                                                   
    enumerate~list-style-type/upper-roman/.code = \cs_gset:Npn 
                                                 \theenumi {\@Roman\c@enumi}\relax,
    enumerate~list-style-type/lower-roman/.code = \cs_gset:Npn 
                                                 \theenumi {\@roman\c@enumi}\relax,                                             
    enumerate~list-style-type/lower-alpha/.code = \cs_gset:Npn 
                                                 \theenumi {\@alph\c@enumi}\relax,                                                                                          
    enumerate~list-style-type/uper-alpha/.code = \cs_gset:Npn 
                                                 \theenumi {\@Alph\c@enumi}\relax,                                                                                                                                       
    enumerate~list-style-type/Diamond/.code = \cs_gset:Npn 
                                                 \theenumi {\Diamond},                                                                                                                                                                                        
    enumerate~list-style-type/.unknown/.code =  \cs_gset:Npn 
                                                 \theenumi {\@Alph\c@enumi},                                                                                                                                                                                                                                        
                                                 
  }
\cxset  
  {
    enumerate~numberingii/.is~choice,
    enumerate~numberingii/arabic/.code = \cs_gset:Npn \theenumii 
                                                 {\@arabic\c@enumii}\relax,
    enumerate~numberingii/alpha/.code  = \cs_gset:Npn 
                                                \theenumii {\@alph\c@enumii}\relax,
    enumerate~numberingii/Alpha/.code  = \cs_gset:Npn \theenumii 
                                                {\@Alph\c@enumii}\relax,
    enumerate~numberingii/roman/.code  = \cs_gset:Npn 
                                                \theenumii {\@roman\c@enumii}\relax,
    enumerate~numberingii/Roman/.code  = \cs_gset:Npn 
                                                 \theenumii {\@Roman\c@enumii}\relax,
    enumerate~numberingii/none/.code  =  \cs_gset:Npn 
                                                 \theenumii {}\relax,
  }
 \cxset  
  {
    enumerate~numberingiii/.is~choice,
    enumerate~numberingiii/arabic/.code = \cs_gset:Npn \theenumiii 
                                                 {\@arabic\c@enumiii}\relax,
    enumerate~numberingiii/alpha/.code  = \cs_gset:Npn 
                                                \theenumiii {\@alph\c@enumiii}\relax,
    enumerate~numberingiii/Alpha/.code  = \cs_gset:Npn \theenumii 
                                                {\@Alph\c@enumiii}\relax,
    enumerate~numberingiii/roman/.code  = \cs_gset:Npn 
                                                \theenumiii {\@roman\c@enumiii}\relax,
    enumerate~numberingiii/Roman/.code  = \cs_gset:Npn 
                                                 \theenumiii {\@Roman\c@enumiii}\relax,
    enumerate~numberingiii/none/.code  =  \cs_gset:Npn 
                                                 \theenumiii {}\relax,
  } 
  \cxset  
  {
    enumerate~numberingiv/.is~choice,
    enumerate~numberingiv/arabic/.code = \cs_gset:Npn \theenumiv 
                                                 {\@arabic\c@enumiv},
    enumerate~numberingiv/alpha/.code  = \cs_gset:Npn 
                                                \theenumiv {\@alph\c@enumiv},
    enumerate~numberingiv/Alpha/.code  = \cs_gset:Npn \theenumiv 
                                                {\@Alph\c@enumiv},
    enumerate~numberingiv/roman/.code  = \cs_gset:Npn 
                                                \theenumiv {\@roman\c@enumiv},
    enumerate~numberingiv/Roman/.code  = \cs_gset:Npn 
                                                 \theenumiv {\@Roman\c@enumiv},
    enumerate~numberingiv/none/.code  =  \cs_gset:Npn 
                                                 \theenumiv{},
  } 
%    \end{macrocode}
% 
%  The left and right margin are \docAuxCommand{leftskip} and \docAuxCommand{rightskip} and is 
%  the distance from the current margin.
% 
%    \begin{macrocode}  
\cxset
  {
    enumerate~leftmargini/.code={\setlength\leftmargini{#1}},
    enumerate~leftmarginii/.code={\setlength\leftmarginii{#1}},
    enumerate~leftmarginiii/.code={\setlength\leftmarginiii{#1}},
    enumerate~leftmarginiv/.code={\setlength\leftmarginiv{#1}},
  }
\cxset
  {    
    listi~topsep/.store~in=\listitopsep@cx,
    listi~partopsep/.store~in=\listipartopsep@cx,
    listi~itemsep/.store~in=\listiitemsep@cx,
    listi~parsep/.store~in=\listiparsep@cx,
  }
%      
\cxset
  {
    listii~topsep/.store~in=\listiitopsep@cx,
    listii~partopsep/.store~in=\listiipartopsep@cx,
    listii~itemsep/.store~in=\listiiitemsep@cx,
    listii~parsep/.store~in=\listiiparsep@cx,
  }
%
\cxset
  {    
    listiii~topsep/.store~in=\listiiitopsep@cx,
    listiii~partopsep/.store~in=\listiiipartopsep@cx,
    listiii~itemsep/.store~in=\listiiiitemsep@cx,
    listiii~parsep/.store~in=\listiiiparsep@cx,
  }  
%  
\cxset
  {    
    listiv~topsep/.store~in=\listivtopsep@cx,
    listiv~partopsep/.store~in=\listivpartopsep@cx,
    listiv~itemsep/.store~in=\listivitemsep@cx,
    listiv~parsep/.store~in=\listivparsep@cx,
  }    
\ExplSyntaxOff
%    \end{macrocode}
%
% \cxset{enumerate list-style-type = Rain,
%        enumerate numberingii=alpha,
%        enumerate numberingiii=Roman,
%        enumerate numberingiv=roman}
%
%   
% \lorem 
% \begin{enumerate}
%  \item This is the first level
%   \begin{enumerate} 
%     \item This is the second level
%         \begin{enumerate}
%            \item{third list}
%               \begin{enumerate}
%                 \item {fourth list}
%               \end{enumerate}
%          \end{enumerate}
%   \end{enumerate}
%  \end{enumerate}
% 
% \subsection{enumitem}
% This package by Bezos has very much superceded the \pkgname{enumerate}. It pr
%
%    \begin{macrocode}
\cxset{  
  enumerate labeli punctuation/.store in=\enumeratepunctuationi@cx,
  enumerate labeli/.is choice,
  enumerate labeli/brackets/.code={\renewcommand\labelenumi{(\theenumi\enumeratepunctuationi@cx)}},
  enumerate labeli/square brackets/.code={\renewcommand\labelenumi{[\theenumi\enumeratepunctuationi@cx]}},
  enumerate labeli/right bracket/.code={\renewcommand\labelenumi{\theenumi\enumeratepunctuationi@cx)}},
  enumerate label left/.store in=\enumeratelabelleft@cx,
  enumerate label right/.code=\renewcommand\labelenumi{\enumeratelabelleft@cx\theenumi\enumeratepunctuationi@cx#1},
%  
}
\cxset{compact1/.style={%
  enumerate numberingi=arabic,
  enumerate numberingii=alpha,
  enumerate numberingiii=alpha,
  enumerate numberingiv=roman,
  enumerate labeli punctuation=.,
  enumerate label left=,
  enumerate label right=,
  enumerate leftmargini=2.2em,
  enumerate leftmarginii=2.1em,
  enumerate leftmarginiii=1.5em,
  enumerate leftmarginiv=2em,
  listi topsep=0\p@ \@plus2\p@ \@minus\p@,
  listi itemsep=0\p@ \@plus2\p@ \@minus\p@,
  listi parsep=0\p@ \@plus2\p@ \@minus\p@,
%  
  listii topsep=0\p@ \@plus2\p@ \@minus\p@,
  listii itemsep=0\p@ \@plus2\p@ \@minus\p@,
  listii parsep=0\p@ \@plus2\p@ \@minus\p@,
%  
  listiii topsep=0\p@ \@plus2\p@ \@minus\p@,
  listiii itemsep=0\p@ \@plus2\p@ \@minus\p@,
  listiii parsep=0\p@ \@plus2\p@ \@minus\p@,
}}
\cxset{compact2/.style={%
  enumerate numberingi=alpha,
  enumerate numberingii=roman,
  enumerate numberingiii=alph,
  enumerate numberingiv=roman,
  enumerate labeli punctuation=,
  enumerate label left=(,
  enumerate label right=),
  enumerate leftmargini=2.2em,
  enumerate leftmarginii=2.1em,
  enumerate leftmarginiii=1.5em,
  enumerate leftmarginiv=0em,
  listi topsep   = 8\p@ \@plus2\p@ \@minus\p@,
  listi itemsep = 0\p@ \@plus2\p@ \@minus\p@,
  listi parsep   = 0\p@ \@plus2\p@ \@minus\p@,
  listii topsep  = 0\p@ \@plus2\p@ \@minus\p@,
  listii itemsep= 0\p@ \@plus2\p@ \@minus\p@,
  listii parsep  = 0\p@ \@plus2\p@ \@minus\p@,
  listiii topsep = 0\p@ \@plus2\p@ \@minus\p@,
  listiii itemsep= 0\p@ \@plus2\p@ \@minus\p@,
  listiii parsep  = 0\p@ \@plus2\p@ \@minus\p@,
}}


\ExplSyntaxOn
\def\setenumerate#1{
\cxset{#1}
\def\@listi{%
           \leftmargin\leftmargini
            \parsep\listiparsep@cx
            \topsep\listitopsep@cx\relax
            \itemsep\listiitemsep@cx}
            
\def\@listii{\leftmargin\leftmarginii
            \parsep\listiiparsep@cx
            \topsep\listiitopsep@cx\relax
            \itemsep\listiiitemsep@cx}
            
\def\@listiii{\leftmargin\leftmarginiii
            \parsep\listiiiparsep@cx
            \topsep\listiiitopsep@cx\relax
            \itemsep\listiiiitemsep@cx}
}


\setenumerate{compact1}
\ExplSyntaxOff

%
%    \end{macrocode}
% \cxset{enumerate numberingi=Roman}
% 
%
% \begin{enumerate}
%  \item This is the first level\par
%         \begin{enumerate}
%            \item{third list}
%            \item {fourth list}
%          \end{enumerate}
%  \end{enumerate}
% 
%
% \begin{enumerate}
%  \item This is the first level\par
%         \begin{enumerate}
%            \item{third list}
%            \item {fourth list}
%          \end{enumerate}
%  \end{enumerate}

% \section{The Itemize environment}
%
% The standard \latexe defined itemize environment, is much easier to 
% to parameterize, since there are no counters to worry about. However,
% we still need to worry about syntactic sugar for a better user interface.
% 
%    \begin{macrocode}
\ExplSyntaxOn
\cxset{
 labelitemi/.code=\def\labelitemi{#1},
 labelitemii/.code=\def\labelitemii{#1},
 labelitemiii/.code=\def\labelitemiii{#1},
 labelitemiv/.code=\def\labelitemiv{#1},
}
\ExplSyntaxOff
%    \end{macrocode}
%    \begin{macrocode}
\def\dingpoint{\ding{217}}
\def\dingpointi{\ding{226}}
\def\dingpointii{\ding{229}}
\def\dingpointiii{\ding{110}}


\cxset{
 labelitemi    = \FIRE,
 labelitemii   = \RainCloud,
 labelitemiii  = \dingpointi,
 labelitemiv   = \textbullet,
}
%    \end{macrocode}

% \dingpointiii \dingpointii
% 
%  \begin{itemize}
%   \item First Item
%   \item Second Item
%      \begin{itemize}
%         \item Second level
%         \item Second level
%           \begin{itemize}
%              \item Third Level
%              \item Third Level
%                \begin{itemize}
%                  \item Fourth Level
%                    \meaning\labelitemiv 
%                \end{itemize}    
%           \end{itemize}
%      \end{itemize} 
%  \end{itemize}

% \meaning\labelitemiv 
%
% \section{Stewart Special Design}
%
%	We provide a number of predefined \textit{special designs} 
%    to illustrate the
%	technique. This special opening chapter page has been used in this document.
%	In order to typeset it we need a number of additional fields. We need an
%	image name and the text for two text blocks. We create fields for them.
%
%    The special designs, require that you define a new set
%    of keys, if required and to create a command to typeset
%	these.
%
%    \begin{macrocode}
\cxset{steward/.style={
  custom = stewart,
  offsety/.store in = \soffsety,
  image/.store in = \image@cx,
  texti/.store in = \texti@cx,
  textii/.store in=\textii@cx,
}}
%
\newcommand\stewart[2][]{%
   \fancypagestyle{fancy}{%
   \lhead{}\rhead{}%
   \chead{}%
   \cfoot{}%
   \lfoot{}%
   \rfoot{\thepage}%
   \def\footrule#1{{\color{blue}%
   \hrule width\paperwidth}\vskip3pt
}

\renewcommand{\headrulewidth}{0pt}
\renewcommand{\footrulewidth}{0.4pt}}

\clearpage

\begin{tikzpicture}[remember picture,overlay]
\node [xshift=5cm,yshift=-\paperheight] at (current page.north west)
[text width=0.98\textwidth,text height=\paperheight, fill=thecream!30,rounded corners,above right]
{};
\node [xshift=6.5cm,yshift=-1.5cm-\soffsety] at (current page.north west)
[text width=0.9\textwidth,below right]{\sffamily \bfseries \huge #2};

\node [xshift=3cm,yshift=-1.5cm] at (current page.north west)
[text width=3cm,align=center,minimum height=2.5cm, fill=blue,below right]
{\[\text{\HHUGE\bfseries\sffamily\color{white}\thechapter}\]
\par\vspace*{3pt}
};

\node [xshift=-0.2cm,yshift=-21.5cm] at (current page.north west)
[text width=3cm,above right]%
{\includegraphics[width=1.0\paperwidth,height=\textheight,keepaspectratio]{\image@cx}};
\node [xshift=3cm,yshift=-19.5cm] at (current page.north west)
[text width=9cm,minimum height=2.5cm,inner sep=0.5em, fill=blue,below right]
{\color{white}
  \bfseries\sffamily\texti@cx
};
\node [xshift=6.5cm,yshift=-26cm] at (current page.north west)
[text width=12cm,above right]
{\textii@cx
};
\end{tikzpicture}
\par
\clearpage
}
%    \end{macrocode}
%
% \subsection{tikzspecials}
%    \begin{macrocode}
\cxset{band height/.store in=\bandheight@cx}
\cxset{band height=5cm}

\newcommand{\tikzspecials}[2][]{%
\@specialtrue
\clearpage
\ExplSyntaxOn
\let\titlefontfamily@cx\title_font_family
\let\titlefontweight@cx\title_font_weight
\ExplyntaxOff
\begin{tikzpicture}[remember picture,overlay]
    \node[yshift=-\bandheight@cx] at (current page.north west)
      {\begin{tikzpicture}[remember picture, overlay]
        \draw[fill=\fill@cx, draw=none] (0,0) rectangle (\paperwidth,\bandheight@cx);
        \node[anchor=east,xshift=.9\paperwidth,rectangle,
              rounded corners=10pt,inner sep=11pt,
              fill=\fill@cx]{%
        \titlefontcolor@cx
        \titlefontsize@cx\bfseries
        \titlefontfamily@cx
        \thechapter\
        \textsc{#2}};
      \draw [fill=\fill@cx] (0,10cm) -- (5cm,10cm);
       \end{tikzpicture}
      };
\end{tikzpicture}
\mbox{}
\vspace*{\bandheight@cx}\par
}
%    \end{macrocode}
%
% \subsection{The genetics special design}
%
%    \begin{macrocode}
\cxset{image/.store in=\image@cx,
       image caption/.store in=\caption@cx,
       textiii/.store in=\textiii@cx}
%    \end{macrocode}
%
% 
%	This macro is a special template that requires settings via
%	a |\cxset| command. 
%    \begin{macrocode}
\newcommand\genetics[2][]{%
  %    \end{macrocode}
% 
%
%	We set everything in a minipage to ensure that no breaks will
%	occur. If the user added too much text it will just overflow and it
%	will have to be adjusted.
%    \begin{macrocode}
\begin{minipage}[b][\textheight][t]{\textwidth}%
\hbox{}%
%    \end{macrocode}
%	We first draw the rules.
%    \begin{macrocode}
      \vbox to 0pt {%
      \color{teal}%
      \hbox{\rule{\textwidth}{0.4pt}}%
      \hbox{\rule{0.4pt}{\textheight}\rule{4cm}{0.4pt}}%
    }%
\vspace*{10pt}%
%    \end{macrocode}
%	The next two parboxes, place the subtitle and the image.
% 	they are aligned at the bottom and a rule can be used to adjust the 
%	subtitle.
%
%    \begin{macrocode} 
\begin{minipage}[b]{\linewidth}%
\fboxsep0pt%
\fboxrule0pt%
\fbox{\begin{minipage}[b]{0.25\linewidth}%
\lineskip0pt\topskip0pt%
\leftskip0.5cm%
\leavevmode%
\bfseries\color{teal}\Large\sffamily%
\caption@cx%
\vspace*{2cm}%

\includegraphics[width=\dimexpr\linewidth-0.5cm\relax,totalheight=3.8cm]{./images/chapterconcept-01.jpg}\llap{\raise20pt\hbox to \linewidth{\HHUGE \hskip1cm\color{lightgray!40}\thechapter}\hfill}%
\end{minipage}%
}%
%
\fbox{\begin{minipage}[b]{0.75\linewidth}%
\lineskip0pt%
\leavevmode
\includegraphics[width=1\linewidth]{\image@cx}%

\includegraphics[width=\linewidth]{./images/chapterconcept-02.jpg}.%
\end{minipage}}%
\end{minipage}%
%    \end{macrocode}
%    \begin{macrocode}
\ExplSyntaxOn
\let\titlefontfamily@cx\title_font_family
\let\titlefontweight@cx\title_font_weight
\ExplSyntaxOff
\par
\vspace{1.5cm  plus25pt minus25pt}
\parbox[t]{0.3\linewidth}{%
  \titlefontsize@cx
  \titlefontweight@cx
  \titlefontfamily@cx
  \leftskip0.5em 
  \color{teal}#2%
}%
\begin{minipage}[t]{0.6\linewidth}%
\vspace{-2\baselineskip}
\textiii@cx
\end{minipage}

\end{minipage}
}


%    \end{macrocode}


% \section{Epigraphs}
%
% This section deals with epigraphs.\index{epigraph}\index{epigraph!rule}
% We first get the \pkgname{epigraph}. As the memoir class defines the epigraph 
% we first check if it has been defined and bale out of the package.
%    \begin{macrocode}
\ExplSyntaxOn
\@ifundefined{epigraph}
  {%
    \RequirePackage{epigraph}
   %% Set up the epigraph to be a bit wider
    \setlength{\epigraphwidth}{8cm} 
    \setlength{\epigraphrule}{0pt}
    \newcommand{\theepigraph}[2]{\epigraphhead[30]{\epigraph{#1}{\textit{#2}}}}
  }
  {
   \setlength{\epigraphwidth}{8cm} 
   \setlength{\epigraphrule}{0pt}
   \newcommand{\theepigraph}[2]{\epigraphhead[30]{\epigraph{#1}{\textit{#2}}}}%
  }
\ExplSyntaxOff
%    \end{macrocode}
%
%    \begin{macrocode}

\cxset{
  epigraph width/.code               = {\setlength\epigraphwidth{#1}},
  epigraph font-size/.code           = {\renewcommand{\epigraphsize}{#1}},
  epigraph beforeskip/.code          = {\setlength\beforeepigraphskip{#1}},
  epigraph afterskip/.code           = {\setlength\afterepigraphskip{#1}},
  epigraph align/.is choice,
  epigraph align/center/.code        = {\renewcommand{\epigraphflush}{center}},
  epigraph align/left/.code          = {\renewcommand{\epigraphflush}{flushleft}},
  epigraph align/right/.code         = {\renewcommand{\epigraphflush}{flushright}},
  epigraph source align/.is choice,
  epigraph source align/left/.code   = {\renewcommand{\sourceflush}{flushleft}},
  epigraph source align/right/.code  = {\renewcommand{\sourceflush}{flushright}},
  epigraph source align/center/.code = {\renewcommand{\sourceflush}{center}},
  epigraph text align/.is choice,
  epigraph text align/left/.code     = {\renewcommand{\textflush}{flushleft}},
  epigraph text align/right/.code    = {\renewcommand{\textflush}{flushright}},
  epigraph text align/center/.code   = {\renewcommand{\textflush}{center}},
  epigraph rule width/.code          = {\setlength\epigraphrule{#1}},
  epigraph rule color/.store in      = \epigraphrulecolor@cx,
  epigraph rule/.code={
 \renewcommand{\@epirule}{\color{\epigraphrulecolor@cx}\rule[.5ex]{\epigraphwidth}{\epigraphrule}}
},
}

\cxset{epigraph width=0.5\linewidth,
    epigraph font-size=\small,
    epigraph rule width=0.4pt,
    epigraph align=right,
    epigraph source align=right,
    epigraph text align=right,
    epigraph rule color=black,
    epigraph rule}
\newif\if@headertoprule
\newif\if@headerbottomrule
%    \end{macrocode}
%
% \section{Marks and pagestyles}
% 
% We first define a number of commonly used headings and then we add some keys
% to make them more flexible. The package happily coexists with \pkgname{fancyhdr}
% so you can define your own if you want.
% 
%    \begin{macrocode}
\cxset{
   chaptermark name color/.store in=\chaptermarknamecolor@cx,
   chaptermark title color/.store in=\chaptermarktitlecolor@cx,
   chaptermark title before/.store in=\chaptermarktitlebefore@cx,
   chaptermark after number/.store in=\chaptermarkafternumber@cx,
   chaptermark name/.store in=\chaptermarkname@cx,
   chaptermark numbering/.is choice,
   leftmark before/.store in=\leftmarkbefore@cx,
   leftmark after/.store in=\leftmarkafter@cx,
   rightmark before/.store in=\rightmarkbefore@cx,
   rightmark after/.store in=\rightmarkafter@cx,
   chaptermark numbering/none/.code=\def\chaptermarknumber{},
}

\cxset{   
   sectionmark name/.is choice,
   sectionmark name/none/.code=\def\sectionmarkname@cx{},
   sectionmark name custom/.code=\def\sectionmarkname@cx{#1},
   sectionmark number/.is choice,
   sectionmark number/none/.code=\def\sectionmarknumber@cx{},
   sectionmark after number/.store in=\sectionmarkafternumber@cx,
   sectionmark name color/.store in=\sectionmarkcolor@cx,
   sectionmark title font/.store in=\sectionmarktitlefont@cx,
   sectionmark title color/.store in=\sectionmarktitlecolor@cx,
   sectionmark before title/.store in=\sectionmarkbeforetitle@cx,
   sectionmark after title/.store in=\sectionmarkaftertitle@cx,
   header offset even/.store in=\headeroffseteven@cx,
   header offset odd/.store in=\headeroffsetodd@cx,
  %
   header top rule/.is if    = @headertoprule,
   header bottom rule/.is if = @headerbottomrule,
}
%    \end{macrocode}
%
%    \begin{macrocode}
\cxset{header offset even=0pt,
       header offset odd=0pt,
       rightmark before=,
       rightmark after=,
       chaptermark title before=,}
%    \end{macrocode}
%
% Set the pagestyles to a default
%
%    \begin{macrocode}
\cxset{pagestyle/.code=\pagestyle{#1}}
\cxset{pagestyle=plain}
%
%
\cxset{headings ruled-01/.style={pagestyle=headings,
          header style=headings,
          chaptermark name color=theblue,
          chaptermark after number={\thinspace:\space },
          chaptermark name=,
          chaptermark title color=black!80,
          leftmark before=\thepage\hfill, 
          leftmark after=,
          sectionmark name color=theblue,
          sectionmark title color=black!80,
          header offset even=0pt,
          header offset odd=0pt,
          header top rule=false,
          header bottom rule=true}}
%
\cxset{headings ruled-02/.style={pagestyle=headings,
          header style=headings,
          chaptermark name color=theblue,
          chaptermark after number=,
          chaptermark name=,%\@chapapp,
          chaptermark numbering=none,
          chaptermark title color=black!80,
          sectionmark name=none,
          sectionmark number=none,
          leftmark before=,
          leftmark after=\qquad\quad\thepage,
          rightmark before=\thepage,
          rightmark after=\hfill\hfill,
          sectionmark name color=theblue,
          sectionmark title color=black!80,
          sectionmark after title=,
          sectionmark after number=\qquad,
          header top rule=false,
          header bottom rule=true,
          header offset even=1.5cm,
          header offset odd=-1.5cm,
          header bottom rule=false}}
%
\cxset{%
          header style=headings,
          chaptermark name=,
          chaptermark name color=black,
          chaptermark after number={\thinspace:\space },
          chaptermark title color=black!80,
          sectionmark name color=black,
          sectionmark title color=black!80,
          sectionmark after title=,
          sectionmark after number,
          header top rule=false,
          header bottom rule=true} 
          
\newif\ifphd@multisty \phd@multistyfalse
\newcommand\copyrightline[1]{%
  \def\@copyrightline{#1}}

\edef\@copyrightline{\copyright Y Lazarides\relax}

\newcommand\c@pyrightline[1]{%
  \gdef\@c@pyrightline{#1}}

\gdef\@c@pyrightline{%
  \vbox to 5.5\p@{\noindent
  \parbox[t]{\textwidth}{\normalfont\footnotesize\baselineskip 9\p@
  \@copyrightline
  }%
  \vss}%
}
%    \end{macrocode}
%    
% \section{Plain headings}
%  Provides a simple plain heading.
%    \begin{macrocode}
\def\ps@plain{\leftskip\z@\let\@mkboth\@gobbletwo\vfuzz=5\p@
    \def\@oddhead{}%
    \def\@evenhead{}%
  \def\@oddfoot{\verbatimsize
    \vbox{\vspace{15pt}%
      \global\hoffset=0pc%
      \noindent\hbox to\textwidth{\mbox{}\hfill{\rm\thepage}}
      \makebox[\z@][l]{\@c@pyrightline}%
%     \noindent\hspace*{-9pc}\rule{37pc}{0.25pt}%
    }%
  }%
  \def\@evenfoot{\verbatimsize
    \vbox{\vspace{15pt}%
    \global\hoffset=6pc%
    \noindent\hbox to\textwidth{{\rmfamily\thepage}\hfill\mbox{}}
    \makebox[\z@][l]{\@c@pyrightline}%
%   \noindent\rule{37pc}{0.25pt}%
    }%
  }%
  \def\sectionmark##1{}%
  \def\subsectionmark##1{}%
 }
%    \end{macrocode} 
%    
%\section{A vertical rule heading}
%
% Provides a vertical rule (for style 22)
% 
%    \begin{macrocode}
\def\ps@verticalrule{\leftskip\z@\let\@mkboth\@gobbletwo\vfuzz=5\p@
    \def\@oddhead{}%
    \def\@evenhead{}%
    
\def\@oddfoot{\verbatimsize
    \vbox{\vspace{15pt}%
      \global\hoffset=0pc%
      \noindent\hbox to\textwidth{\hbox to 0pt{\rule{1pt}{\textheight}\color{blue}\thepage}}
      \makebox[\z@][l]{\@c@pyrightline}%
%     \noindent\hspace*{-9pc}\rule{37pc}{0.25pt}%
    }%
  }%
  \def\@evenfoot{\verbatimsize
    \vbox{\vspace{15pt}%
    \global\hoffset=6pc%
    \noindent\hbox to\textwidth{{\color{blue}\rmfamily
    \thepage}\hfill\makebox[0pt][l]{\rule{1pt}{30pt}}}
    \makebox[\z@][l]{\@c@pyrightline}%
%   \noindent\rule{37pc}{0.25pt}%
    }%
  }%
  \def\sectionmark##1{}%
  \def\subsectionmark##1{}%
%
%
%  
 }
 %    \end{macrocode}
 %
 %
 %
 % \section{The pagestyle headings}
 % This is one of the most common headings. We provide a full |ps@| function for
 % speed utilizing only some parameters. The \refCom{sectionmark} is inserted
 % by \tex's inserts mechanism, during the section typesetting.
 %    \begin{macrocode}
 \tcbset{thepage/.style = 
   {
    top=0pt,right=0pt,bottom=0pt,left=0pt,
    colframe=white,colback=spot!1,arc=1mm,
   }
 }
\ExplSyntaxOn
%
\def\ps@headings{%
  \let\@mkboth=\markboth
  \def\@evenfoot{}
  \def\@oddfoot {}
  \cs_set:Npn \@evenhead 
    {
      
      \vbox
        {\verbatimsize
          \global\hoffset=6pc\noindent
          \makebox[\z@][l]{\rmfamily 
          {\protect\tcbox[colframe=red]{-\thepage}}}%
          \itshape\strut\hfill\leftmark\hbox{}%\par\vbox to 13pt{}%
%     \noindent\rule{37pc}{0.25pt}%
        }%
    }%
  \def\@oddhead
    {
       %\protect\tcbox[thepage]
       {\vbox{ %replacetcbox vbox
       \verbatimsize
       \global\hoffset=0pc\noindent
        \mbox{}\itshape \strut\rightmark\hfill\hbox{}
        \makebox[\z@][r]{
        \upshape\rmfamily
        \thepage
         }%\par\vbox to 13pt{}%
%    \noindent\hspace*{-9pc}\rule{37pc}{0.25pt}%
       }}%
    }%
  \def\chaptermark##1{\markboth{##1}{##1}}
  \def\sectionmark##1
    {
    \markright{\ifnum \c@secnumdepth >\z@
    \thesection\enskip\fi ##1}}%
    
%   \def\chaptermark##1{\markboth{##1}{##1}}
%   \def\sectionmark##1{\markright{\ifnum \c@secnumdepth >\z@
%   \thesection\hspace{0.5em}\fi ##1}}%
  
}
%
\ExplSyntaxOff
%    \end{macrocode}
%    
% \section{Centered headings}
% 
%    \begin{macrocode}
\def\ps@centerheadings{%
 \let\@mkboth=\markboth
 \def\@evenfoot{}
  \def\@oddfoot {}
  \def\@evenhead{\verbatimsize
    \vbox{\global\hoffset=6pc\noindent
    \makebox[\z@][l]{\rm \thepage}%
      \it \strut\hfill\leftmark\hfill\hbox{}%\par\vbox to 13pt{}%
%    \noindent\rule{37pc}{0.25pt}%
    }%
  }%
  \def\@oddhead{\verbatimsize
    \vbox{\global\hoffset=0pc\noindent\hfill
    \mbox{}\it \strut\rightmark\hfill\hbox{}\makebox[\z@][r]{\rm
      \thepage}%\par\vbox to 13pt{}%
%    \noindent\hspace*{-9pc}\rule{37pc}{0.25pt}%
    }%
  }%
  \def\chaptermark##1{\markboth{##1}{##1}}
  \def\sectionmark##1{\markright{\ifnum \c@secnumdepth >\z@
    \thesection\enskip\fi ##1}}%
  \ifphd@multisty
    \def\chaptermark##1{}
    \def\sectionmark##1{}
  \else
    \def\chaptermark##1{\markboth{##1}{##1}}
    \def\sectionmark##1{\markright{\ifnum \c@secnumdepth >\z@
      \thesection\hspace{0.5em}\fi ##1}}%
  \fi
}
%    \end{macrocode}
%    
% \section{Chaperstyle heading}    
% 
%  This style provides a special heading to be used on chapter opening pages only.
%  \tcbdocmarginnote{U 20-6-2015}
%  
%    \begin{macrocode}
\def\ps@chapterstyle{%
    \let\@oddfoot\@empty\let\@evenfoot\@empty
    \def\@evenhead{\thepage\hfil\slshape\leftmark}%
    \def\@oddhead{{\slshape\rightmark}\hfil\thepage}%
    \let\@mkboth\@gobbletwo
    \let\chaptermark\@gobble
    \let\sectionmark\@gobble}
%    \end{macrocode}
%
%
% 
% \section{Myheadings}
%
% \begin{docCommand}{ps@myheadings} {\meta{void}}
%   The classic myheadings macro, with some parameters!
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \ps@myheadings 
  {
    \let\@mkboth=\@gobbletwo
    \def\@evenfoot{Revision 1}
    \def\@oddfoot {Revision 1}
    
    \def\@evenhead{\verbatimsize
    \vbox
      {  \global\hoffset=6pc\noindent
       \makebox[\z@][l]{\rm \thepage}%
       \upshape \strut\hfill\leftmark\hbox{}%\par\vbox to 13pt{}%
%    \noindent\rule{37pc}{0.25pt}%
      }%
    }%
    
  \def\@oddhead{\verbatimsize
    \vbox 
      {
        \global\hoffset=0pc\noindent
        \mbox{}\upshape\strut\rightmark\hfill\hbox{}\makebox[\z@][r]{\rm
        \thepage}%\par\vbox to 13pt{}%
%    \noindent\hspace*{-9pc}\rule{37pc}{0.25pt}%
      }%
  }%
%
  \def\chaptermark##1{}
  \def\sectionmark##1{}
  \def\subsectionmark##1{}
 
}
\ExplSyntaxOff 
%    \end{macrocode}
%
% \section{Watermarks}

% Some special styles
%    \begin{macrocode}
\IfFileExists{changepage.sty}{\RequirePackage{changepage}}{}
\IfFileExists{rotating.sty}{\RequirePackage{rotating}}{}
%    \end{macrocode}
%
% {even@samplepage}
% {odd@samplepage}
%    \begin{macrocode}
\def\even@samplepage{%
 \begin{picture}(0,0)
   \put(\Xeven,\Yeven){\turnbox{90}{\Huge \textcolor{\watermark@textcolor}{\watermark@text}}}
\end{picture}
}
%% Define a macro to print SAMPLE PAGE IN THE MARGIN
\def\odd@samplepage{%
 \begin{picture}(0,0)
   \put(\Xodd,\Yodd){\turnbox{90}{\Huge \textcolor{\watermark@textcolor}{\watermark@text}}}
 \end{picture}
}
%    \end{macrocode}
% 
% 

% \section{watermarktext}
%  Define the watermark words
%    \begin{macrocode}
\gdef\watermarktext#1{\gdef\watermark@text{\fontfamily{phv}\selectfont#1}}
\def\watermarktextcolor#1{\gdef\watermark@textcolor{#1}}
\watermarktext{SAMPLE PAGE}
\watermarktextcolor{black!50}
%    \end{macrocode}
% 
%    \begin{macrocode}
\def\ps@samplepage{\let\@mkboth\@gobbletwo
 \let\@oddhead\odd@samplepage\def\@oddfoot{\reset@font\hfil\thepage}
 \let\@evenhead\even@samplepage\def\@evenfoot{\reset@font\thepage\hfil}}
%
% We define two macros to position the watermark on the page
\def\Xodd{480}
\def\Xeven{-15}\def\Yeven{-810}
\def\Yeven{-\expandafter\strip@pt\textheight}
\let\Yodd\Yeven


\cxset{blank page text/.store in=\blankpagetext@cx{#1}}
\cxset{blank page text={}}

\def\cleardoublepage{\clearpage\if@twoside\ifodd\c@page\else
  \hbox{}
  \vspace*{\fill}
  \begin{center}
     \blankpagetext@cx      
  \end{center}
  \vspace{\fill}
  \thispagestyle{empty}
  \newpage
  \if@twocolumn\hbox{}\newpage\fi\fi\fi}
%    \end{macrocode}
%
% \section{Front Matter Commands}
% 
%	We define author commands for coverpages and
%	second pages. If they have been defined by the
%	author we do nothing, otherwise we provide some
%	defaults as examples.
% begin{macro}{coverpage}
%    \begin{macrocode}
\@ifundefined{coverpage}{%
  \newcommand\coverpage[3]{%
  \vspace*{2cm}
  \vbox{%
      \vspace*{-8\baselineskip} %-1
      \hskip-3.8cm\includegraphics[width=\paperwidth]{hine02.jpg}\par %hine-02
      \vspace*{1\baselineskip} %3
      \hbox to \hsize{%
         \Huge \hfill\hfill{\MakeUppercase{\bfseries  
         \textsf{WATER HAMMER}}}}%
      \vspace*{0.3cm}
      \hbox to \hsize{\Huge \hfill\hfill{\MakeUppercase{\bfseries   \textsf{ARRESTORS}}}}
      \vspace*{2\baselineskip}
      \hbox to \hsize{\huge \hfill\hfill\textsf{\hbox{#2}}}
      \vspace*{1.35cm}
      \hbox to \hsize{\huge \hfill\hfill\textsf{\hbox{#3}}}
}
}}{}
%    \end{macrocode}
% end{macro}
% 
% begin{macro}{secondpage}
%	This macro typesets what a copyright page. It is not a general
%	command, but rather a command that you will need to redefine. It is included
%	here as an example and to typeset the second page of this publication.
%	\begin{macrocode}
\newcommand\secondpage{\clearpage\null\vfill\vfill
  \begin{minipage}[b]{0.9\textwidth}
  \includegraphics[width=3cm]{./images/zha.jpg}\par
  \raggedright
  \textit{Cover image: }
    The cover image shows Jo Bodeon, a back-roper in the mule room at 
    Chace Cotton Mill. Burlington, Vermont. This and other similar images 
    in this book were taken by Lewis W. Hine, in the period between 
    1908-1912. These images as well as social campaigns by many including 
    Hine, helped to formulate America's anti-child labour laws.
  \end{minipage}\par
  \vspace*{\baselineskip}
  \begin{minipage}[b]{0.9\textwidth}
  \RaggedRight
  \setlength{\parskip}{0.5\baselineskip}
  Copyright \copyright 2012  Dr Yiannis Lazarides\par
  Permission is granted to copy, distribute and\slash or modify this document 
  under the terms of the GNU Free Documentation License, version 1.2, with no 
  invariant sections, no front-cover texts, and no back-cover texts.\par
  A copy of the license is included in the appendix.\par
  This document is distributed in the hope that it will be useful, but without 
  any warranty; without even the implied warranty of merchantability or 
  fitness for a particular purpose.
  \end{minipage}
  \vspace*{2\baselineskip}
  \clearpage
}
%    \end{macrocode}
% 
%
% \chapter{Table of Contents}
%
%	Most of the macros here are a re-write the LaTeX macros in a way that 
%	we can add appropriate hooks for styling. In writing this section
%	we had inspiration and used liberally code from Peter Wilson's 
%	\pkg{tocloft}., including the code for the image.
%
% \newcommand{\maxx}{120}       ^^A picture width
% \newcommand{\maxxm}{118}      ^^A \maxx - 2\
% \newcommand{\maxy}{55}        ^^A picture height
% \newcommand{\maxym}{53}       ^^A \maxy - 2
% \newcommand{\findent}{20}     ^^A indent
% \newcommand{\findentp}{22}    ^^A \findent + 2
% \newcommand{\fnumwidth}{10}   ^^A numwidth
% \newcommand{\ftocrmarg}{30}   ^^A \@tocrmarg
% \newcommand{\fpnumwidth}{20}  ^^A \@pnumwidth
% \newcommand{\fipn}{30}        ^^A \findent + \fnumwidth
% \newcommand{\frmarg}{90}      ^^A \maxx - \ftocrmarg
% \newcommand{\frnum}{100}      ^^A \maxx - \fpnumwidth
% \newcommand{\fyi}{10}         ^^A 1st y height
% \newcommand{\fyim}{8}         ^^A \fyi - 2
% \newcommand{\fyii}{20}        ^^A 2nd y height
% \newcommand{\fyiii}{25}       ^^A 3rd y height
% \newcommand{\fyiv}{30}        ^^A 4th y height
% \newcommand{\fyv}{40}         ^^A 5th y height
% \newcommand{\fyvp}{42}        ^^A \fyv + 2
% \newcommand{\flin}{4}         ^^A length of leader lines
% \newcommand{\frmargm}{89}     ^^A \frmarg (90) - a little bit
% 
% \providecommand{\bs}{\textbackslash}
% \begin{figure}
% \centering
% \setlength{\unitlength}{1mm}
% \begin{picture}(\maxx,\maxy)
%     ^^A side lines and linewidth
%   \put(0,0){\line(0,1){\maxy}}
%   \put(\maxx,0){\line(0,1){\maxy}}
%   \put(0,\maxy){\vector(1,0){\maxx}}
%   \put(2,\maxym){\makebox(0,0)[tl]{\texttt{\bs linewidth}}}
%     ^^A \@pnumwidth
%   \put(\maxx,\fyi){\vector(-1,0){\fpnumwidth}}
%   \put(\maxxm,\fyim){\makebox(0,0)[tr]{\texttt{\bs @pnumwidth}}}
%   \put(\frnum,\fyi){\line(0,1){\flin}}
%     ^^A \@tocrmarg
%   \put(\maxx,\fyv){\vector(-1,0){\ftocrmarg}}
%   \put(\maxxm,\fyvp){\makebox(0,0)[br]{\texttt{\bs @tocrmarg}}}
%   \put(\frmarg,\fyv){\line(0,-1){\flin}}
%     ^^A indent
%   \put(0,\fyv){\vector(1,0){\findent}}
%   \put(2,\fyvp){\makebox(0,0)[bl]{\textit{toc margin-left}}}
%   \put(\findent,\fyv){\line(0,-1){\flin}}
%     ^^A numwidth
%   \put(\findent,\fyv){\vector(1,0){\fnumwidth}}
%   \put(\findentp,\fyvp){\makebox(0,0)[bl]{\textit{numwidth}}}
%   \put(\fipn,\fyv){\line(0,-1){\flin}}
%     ^^A last title line
%   \put(\maxx,\fyii){\makebox(0,0)[br]{487}}
%   \put(\fipn,\fyii){title end}
%     ^^A second title line
%   \put(\fipn,\fyiii){continue\ldots}
%   \put(\frmarg,\fyiii){\makebox(0,0)[br]{\ldots title}}
%     ^^A first title line
%   \put(\findent,\fyiv){\textbf{3.5}}
%   \put(\fipn,\fyiv){Heading\ldots}
%   \put(\frmarg,\fyiv){\makebox(0,0)[br]{\ldots title}}
%     ^^A dotted leader
%   \multiput(\frmargm,\fyii)(-\flin,0){12}{.}
%   \multiput(\frmarg,\fyi)(-\flin,0){2}{\line(0,1){\flin}}
%   \put(\frmarg,\fyi){\vector(-1,0){\flin}}
%   \put(\frmarg,\fyi){\vector(1,0){0}}
%   \put(\frmarg,\fyim){\makebox(0,0)[tr]{\texttt{\bs @dotsep}}}
% 
% \end{picture}
% \setlength{\unitlength}{1pt}
% \caption{Standard Layout of a ToC (LoF, LoT) entry} \label{fig:ltoc}
% \end{figure}
%
% 
% {if@haschapter@cx}
% We will be using either chapter or section type headings for the ToC, etc.,
% so we need to know which of these the document class supports.
%
%    \begin{macrocode}
\ExplSyntaxOn
\newcommand{\quit@cx}{}
\newif\if@haschapter@cx\@haschapter@cxtrue
\int_new:N \toc_depth
\int_gset:Nn \toc_depth {\c@tocdepth}

\bool_new:N \haschapter_bool \bool_gset_true:N \has_chapter_bool
\bool_new:N \haspart_bool \bool_gset_true:N \haspart_bool

\cs_if_exist:cTF {part} 
   { \bool_gset_true:N \haspart_bool   } 
   { \bool_gset_false:N \haspart_bool  }
   
\ExplSyntaxOff
%    \end{macrocode}
% 
% 
% {if@koma@cx}
% The \pkg{koma} classes have different defaults than the standard classes,
% so we need to know if a \pkg{koma} class has been loaded.
%    \begin{macrocode}
\newif\if@koma@cx  \@koma@cxfalse
\@ifclassloaded{scrartcl}{\@koma@cxtrue}{}
\@ifclassloaded{scrreprt}{\@koma@cxtrue}{}
\@ifclassloaded{scrbook}{\@koma@cxtrue}{}
%    \end{macrocode}
% 
%
% {if@memoir@cx}
%    \begin{macrocode}
\newif\if@memoir@cx  \@memoir@cxfalse
\@ifclassloaded{memoir}{\@memoir@cxtrue}{}
%    \end{macrocode}
% 
%
% Issue a warning if there are no recognised sectional divisions 
% and then skip the rest of the package code.
%    \begin{macrocode}
\@ifundefined{chapter}{%
  \@haschapter@cxfalse
  \@ifundefined{section}{%
    \PackageWarning{phd}%
      {I don't recognize any sectional divisions so I'll do very little and many things can break}
    \renewcommand{\quit@cx}{\endinput}
    }{\PackageInfo{phd}{The document has section divisions}}
  }{\@haschapter@cxtrue
    \PackageInfo{phd}{The document has chapter divisions}}
%    \end{macrocode}
% bailing out or continue.
%
% {settocpagestyle}
% {tocpagestyle@cx}
%	We define a user macro and to be used in keys
%   a pagestyle for the first page of the ToC.
%   The default is the |plain| pagestyle. CHECK THIS.
%    \begin{macrocode}
\newcommand{\settocpagestyle}[1]{%
  \def\tocpagestyle@cx{\thispagestyle{#1}}}
 
%    \end{macrocode}
% 
% 
%
% {tocparskip@cx}
% The |\parskip| local to the ToC, etc., is set to the length |\tocparskip@cx|.
%
%    \begin{macrocode}
\newlength{\tocparskip@cx}
\setlength{\tocparskip@cx}{0pt}
%    \end{macrocode}
% 
%
% \section{General Formatters}
%
% In order to provide maximum flexibility and to re-use code, we provide general
% formatting code. These in general start with the prefix \emph{format}. They take
% as input the basic parameters, required to format. The decoration parameters come
% from the key value interface.
%  
% \begin{docCommand}{format_toc_name:n} { \marg{name} }
%   Formats and typesets the conents name, in a ToC. 
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn \format_toc_name:n #1 
  {
 \begin{tcolorbox}[colback=spot!15,arc=3mm,colframe=white,]
  \contents_name_before
     \setfont@cx {\contents_name_font_weight}
                 {\contents_name_font_family}
                 {\contents_name_font_size}
                 {\contents_name_font_shape}
                 \color{\toc_name_color}
      \start_align
      \contents_name_indent 
      \exp_after:wN \cs:w \exp_after:wN
           \toc_name_case\cs_end:
        #1
      \end_align
    \end{tcolorbox} 
 \contents_name_after%
 }
\ExplSyntaxOff
%    \end{macrocode}

%
%
% 
%  \begin{docCommand} {phd_toc_start} { \meta{void}}
%    Typesets any material before the toc, for example a rule or image. This
%    can also be used to typeset a two column or three column toc.
%  \end{docCommand}
%
%  \begin{docCommand}{phd_toc_finish} { \meta{void}}
%    Typesets any material after the toc, for example a rule or image. This
%    can also be used to typeset end a two column or three column layout.
%  \end{docCommand} 
%
%    \begin{macrocode}
\let\ltxtableofcontents\tableofcontents
%
\ExplSyntaxOn
\cs_new:Npn \phd_toc_start:  {\hrule }
\cs_new:Npn \phd_toc_finish: {\hrule } 
\ExplSyntaxOff
%    \end{macrocode} 
% 
% \begin{docCommand}{tableofcontents} {\meta{void}}
%  This is a parameterised version of the default |\tableofcontents| command.
%  Each class has its own definition, but we have to cater for all classes
%  in one definition, hence some of the checks. The definition is
%  modified after all packages have been loaded. The normal LaTeX way is to use
%  the chapter to set it in the book class and the section in others. Here we opted to
%  leave it up to the user.
%	 Consider more checks here
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
 \renewcommand{\tableofcontents}{%
    \phd_toc_start:
%    \end{macrocode}
% Ensure that any previous paragraph has been finished. 
%	within a group set
% the local paragraphing style and typeset the title. \label{code:tableofcontents}
%    \begin{macrocode}
    \par
    \begingroup
      \parindent\z@ 
      \parskip\tocparskip@cx
      \make_toc_title:
%    \end{macrocode}
%
% Finally, start reading the \docfile{.toc} file and finish up.
%    \begin{macrocode}
    \start_toc:n {toc}%
    \endgroup
    \phd_toc_finish:
}%
\ExplSyntaxOff
%    \end{macrocode}
%
%  \begin{docCommand} {start_toc} { \meta {void}}
%    Reads the file |.toc|. Write to the file conditionally. This was
%    originally provided in the source2e class |lsect|, which we redefine.\FIRE
%  \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
 \cs_new:Npn \start_toc:n #1 
   {
     \group_begin:
     \makeatletter
     \@input{\jobname.#1}%
     \if@filesw
       \expandafter\newwrite\csname tf@#1\endcsname
       \immediate\openout \csname tf@#1\endcsname \jobname.#1\relax
     \fi
     \@nobreakfalse
     \group_end:
  }
\ExplSyntaxOff 
%    \end{macrocode}
% 
% \begin{docCommand} {numberline} { \meta {the number} }
%  The purpose of the |\numberline{|\meta{secnum}|}| command is to typeset
%  \meta{secnum} left justified in a box of width |\@tempdima|. I redefine
%  it to add three additional parameters, namely |\toc_number_before|, 
%  |\toc_number_after| and |\toc_number_after_box| 
%  (see \docfile{ltsect.dtx} for the original definition).\FIRE
%
% \begin{verbatim}
%   \contentsline {section}
%      {\numberline {4}Language Manager}
%      {10}{section.1.4}
% \end{verbatim} 
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \toc_number_before_box {}
\cs_set:Npn \toc_number_before {}
\cs_set:Npn \toc_number_after {}
\cs_set:Npn \toc_number_after_box {}
%    \end{macrocode}
%
% This is the most important part of all. It is saved in the .toc
% and when we use l@\meta{chapter} etc it is used for formatting. No
% separation of concerns here~
% We might even need to add more hooks! What happens if we want
% a full tcolorbox box?
%    \begin{macrocode}  
\dim_new:N \numberlineboxwidth  
\cs_gset:Npn \numberline #1
  {
   \toc_number_before_box
   \hbox_to_wd:nn \numberlineboxwidth                   %\numberlineboxwidth  
     { 
       \toc_number_before\relax #1 \toc_number_after \hfil 
     }
   \toc_number_after_box
  }
\ExplSyntaxOff
%    \end{macrocode}
% 
% \section{ToC Name Parameters}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cxset 
  {
    toc~name/.code                                    = 
        \cs_gset:Npn \contentsname { #1 },
    toc~name~before/.store~in                         = \contents_name_before,
    toc~name~after/.store~in                          = \contents_name_after,
    toc~name~font-size/.store~in                      = \contents_name_font_size,
    toc~name~font-weight/.store~in                    = \contents_name_font_weight,
    toc~name~font-family/.store~in                    = \contents_name_font_family,
    toc~name~font-shape/.store~in                     = \contents_name_font_shape,
    toc~name~color/.store~in                          = \toc_name_color,
    toc~name~afterskip/.store~in                      = \contents_name_after_skip,
    toc~name~align/.is~choice,
    toc~name~align/center/.code                       =
      \cs_set:Npn \start_align { \bgroup \centering }
      \cs_set:Npn \end_align {\par \egroup },
    toc~name~align/right/.code                        =
      \cs_set:Npn \start_align { \flushright }
      \cs_set:Npn \end_align { \endflushright },
    toc~name~align/left/.code                         =
      \cs_set:Npn \start_align{\@empty}
      \cs_set:Npn \end_align{\@empty},
    toc~name~align/none/.code                         =
      \cs_set:Npn \start_align{\@empty}
      \cs_set:Npn \end_align{\@empty},
    toc~name~indent/.store~in                         = \contents_name_indent,
    toc~name~case/.case~in                            = \toc_name_case,
    toc~pagestyle/.code                               =
      \gdef\contentspagestyle@cx{\thispagestyle{#1}},
}
\ExplSyntaxOff     
     %    \end{macrocode}      
%
% The contents page is enabled to have its own pagestyle. We default this later on
% to plain.
% This needs also a bit of a thought, if we require to enable it further down the line.
%
%    \begin{macrocode}
\cxset{toc name= Contents,
       toc name before = ,
       toc name after =, 
       toc name color = black,
       toc name font-weight=bold,
       toc name font-family=sffamily,
       toc name font-shape=upshape,
       toc name font-size=LARGE,
       toc name afterskip=10pt, %set as 40pt in LaTeX
       toc name after=\par,
       toc name align=none,
       toc name indent=\hspace*{0cm},
       toc name case=upper,
       toc pagestyle=headings,
  }%
  
%    \end{macrocode}
%
% \begin{docCommand}{make_toc_title:} {\meta{void}}
%	Typesets the heading that goes on top of the |ToC| page.
%	We cater for a few hooks, so the code is rather longish. 
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn


\cs_gset:Npn \make_toc_title: {
  \addpenalty\@secpenalty
  \if@haschapter@cx
    \vspace*{10pt}
    \pdfbookmark[0]{\contentsname}{toc}
  \else
    \vspace{10pt}
  \fi
  \markboth{\contentsname}{\contentsname}%
  \contentspagestyle@cx
  \interlinepenalty\@M
%    \end{macrocode}
% Following the way we developed section headings we
% can call formatters at this stage to format the heading.
% For the time being instead of emulating a 'chapter' we give
% it its own style in a colorbox.  
%    \begin{macrocode}  
  \format_toc_name:n { \contentsname}
%    \end{macrocode}
%    \begin{macrocode}  
    \par\nobreak
    \vskip\contents_name_after_skip\relax
    \@afterheading%
 }%
 %
 \let\sampletoctitle\make_toc_title:
\ExplSyntaxOff 
%    \end{macrocode}
% 
%
% {setpnumwidth@cx}
% {setocmarg@cx}
%  Users commands for setting |\@pnumwidth| and |\@tocrmarg|.
%    \begin{macrocode}
\newcommand{\setpnumwidth@cx}[1]{\renewcommand{\@pnumwidth}{#1}}
\newcommand{\settocmarg@cx}[1]{\renewcommand{\@tocrmarg}{#1}}
\setpnumwidth@cx{25pt}
\settocmarg@cx{20pt}
%    \end{macrocode}
% 
% 
%
% \section{Styling the dot leaders}
%  	Here we will allow the user to either have dotfills and
%    be	able to specify the type and spacing of the dots.
%	We also provide a key to disable dotfills.
%
% \begin{docCommand} {dot@cx} { \meta{void}}
%   Stores the leaders pattern. In the standard classes this
%   is normally a dot.
% \end{docCommand}
%
% \begin{docCommand} {dotfill@cx} { \meta{void}}
%   Typesets the leaders based on the pattern stored in \#1
% \end{docCommand}
%
%   In the default |ToC|, a dotted line can be used to provide a leader between
%   a title and the page number. As Peter Wilson wrote and I found at my
%   distress the definition of the leader is buried
%   in the \cs{@dottedtocline} command. The 
%	\cs{dotfill@cx}\marg{sep}
%   command provides a parameterised version of the leader code, where
%   \marg{sep} is the seperation between the dots in mu units.
%   The symbol used for the `dots' in the leader is given by the 
%   value  of |\dot@cx|. 
% 
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn \dot@cx { - }
\cs_gset:Npn \dot_fill #1 
  {
    \leaders\hbox{$\m@th\mkern #1 mu\hbox{\dot@cx}\mkern #1 mu$}\hfill
  }
\ExplSyntaxOff  
%    \end{macrocode}
% 
% 
%
%    \begin{macrocode}
\def\nodotfill@cx{}
\cxset{toc dotfill/.is choice,
       toc dotfill/none/.code = \nodotfill@cx,
       toc dotfill symbol/.code= \renewcommand{\dot@cx}{#1},
       toc dotfill sep/.store in=\dotfillsep@cx,
}
\cxset{toc dotfill symbol=.,
       toc dotfill sep=4.5}
%    \end{macrocode}
%
% ^^A{parfillskip@CX}
% The |\l@kind| commands modify (locally) the value of |\parfillskip|.
% |\parfillskip@CX| is a copy of the default \texbook\ 
% |\parfillskip| definition.
%    \begin{macrocode}
\newcommand{\parfillskip@CX}{\parfillskip=0pt plus1fil}
%    \end{macrocode}
% 
%
 
%
% \begin{docCommand}{format_toc_entry} { {section name} {title} {page number} }
%  General formatter for all sections. This is the standard template
%  that typesets a ToC entry with leaders.
% \end{docCommand}
% \tcbdocmarginnote{U 01-07-2015}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \format_toc_entry:nn #1 #2 #3
  {
   \group_begin:

      \cs_set:Npn \font_weight_aux
        {
          \exp_after:wN \cs:w toc_#1_font_weight\cs_end:
        }
  
      \cs_set:Npn \font_weight
        {
          \exp_after:wN \cs:w \font_weight_aux\exp_after:wN\endcsname
        }   
%      
     \cs_set:Npn \font_color
        {          
          %\cs_gset:Npn \__acolor {
          \expandafter\color{\csname toc_#1_color\endcsname}
          %\__acolor
          %\fontaii
        }
% font shape          
    \cs_set:Npn \fontbi
      {
        \exp_after:wN \cs:w toc_#1_font_shape\cs_end:
      }     
    \cs_set:Npn \font_shape
      {
        \exp_after:wN \cs:w \fontbi \exp_after:wN \cs_end:
      }
             
     %\cs_set:Npn \fontb {\fontbii}   

% font size
     \cs_set:Npn \font_size_aux
       {
         \exp_after:wN \cs:w toc_#1_font_size \cs_end:
       }     
     \cs_set:Npn \font_size 
       {
         \exp_after:wN \cs:w \font_size_aux \exp_after:wN \cs_end:
       }    
% font-family     
     \cs_set:Npn \font_family_aux
       {
         \exp_after:wN \cs:w toc_#1_font_family \cs_end:
       }     
     \cs_set:Npn \font_family
       {
         \exp_after:wN \cs:w \font_family_aux \exp_after:wN \cs_end:
       }  
% text case     
     \cs_set:Npn \text_case_aux
       {
         \exp_after:wN \cs:w toc_#1_case \cs_end:
       }     
     \cs_set:Npn \text_case
       {
         \exp_after:wN \cs:w \text_case_aux \exp_after:wN \cs_end:
       }          
% section indent 
     \cs_set:Npn \tocindent {
         \exp_after:wN \cs:w toc_#1_indent \cs_end: 
       }
%                        
     \expandafter\leftskip\tocindent\relax
%     
     \dim_set_eq:NN \tex_rightskip:D \@tocrmarg
     \parfillskip -\rightskip
     \dim_set_eq:NN \parindent\tocindent
%     
     
     \interlinepenalty\@M
     \leavevmode
     \numberlineboxwidth \toc_section_number_width\relax
     \let\toc_number_before \cftsecpresnum
     \advance\leftskip \numberlineboxwidth
     \null\nobreak\hskip -\leftskip
%    \end{macrocode}
%  These are the generic templates
%    \begin{macrocode}
     
     %\begin{tcolorbox}
       \tcbox[size=minimal,
         nobeforeafter,
         before=\hspace{0em},
         colback=white,
        ]
         {
           \font_color\font_weight\font_shape\font_size\font_family 
             \hspace{1em}\text_case{#2}
         }
       %\hfill 
       \csname toc#1leader@cx\endcsname
       % page number box this must be pnumwidth?
       \begin{tcolorbox}
        [
          size=minimal,
          width=\toc_section_number_width-1em,
          nobeforeafter
         ]
         ( \hfill #3 )
       \end{tcolorbox}  
       \vskip0pt
     %\end{tcolorbox}  
     \group_end:
     \@afterindentfalse
     \nobreak
 }
  \ExplSyntaxOff
%    \end{macrocode}
%
% \section{Styling Part in the Toc}


%  |\l@part{|\meta{title}|}{|\meta{page}|}| typesets the ToC entry for
% a |part| heading. It is a parameterised copy of the default |\l@part|
% (see \docfile{classes.dtx} for the original definition and the code
%  below for |\l@part| for an explanation of most of this
%  code). 
%
% By default, Parts
% (and Chapters) do not have dotted leaders. This package provides
% for all entries to have the ability to have dotted leaders, as some styles treat the part in a similar manner.
%
% In article class, Part level is 0 not -1 and hence the conditional below.
%	
%	We start by defining a number of keys and macros to store parameters.
%	An entry to the ToC consists always of a number, the title and 
%	a page number. For each part there are different styling keys.
%
%	{tocpartindent@cx}	 
%    \begin{macrocode}
\ExplSyntaxOn
\dim_new:N  \toc_part_indent
\dim_new:N  \toc_part_number_width_dim
\skip_new:N \toc_part_before_skip_dim
\cxset
  {
    toc~part~indent/.code                     = \dim_gset:Nn\toc_part_indent { #1 },
    toc~part~numwidth/.code                   = 
      \dim_gset:Nn\toc_part_number_width_dim { #1 },
    toc~part~before~number/.store~in          = \tocpartbeforenumber@cx,
    toc~part~after~number/.store~in           = \partafterpnum@cx,
    toc~part~beforeskip/.code                 = 
      \skip_gset:Nn \toc_part_before_skip_dim {#1},
    toc~part~font-family/.font-family~in      = \toc_part_font_family,   
    toc~part~font-weight/.font-weight~in      = \toc_part_font_weight,
    toc~part~font-size/.store~in              = \toc_part_font_size,
    toc~part~font-shape/.font-style~in        = \toc_part_font_shape,
    toc~part~color/.store~in                  = \toc_part_color,
    toc~part~case/.is~choice,
    toc~part~case/lower/.code                 = 
      \cs_gset:Npn \toc_part_case 
        {
          MakeTextLowercase
        },
    toc~part~case/upper/.code                 =
      \cs_gset:Npn \toc_part_case
        {
          MakeTextUppercase
        },
    toc~part~case/none/.code                  =
      \cs_set_eq:NN \toc_part_case\empty,    
%         
    toc~part~page~font-size/.store~in         = \tocpartpagefontsize@cx,
}
\ExplSyntaxOff
%    \end{macrocode}
%

%    \begin{macrocode}
\cxset
  {
    toc part indent=0pt,
    toc part numwidth=4.2em,
    toc part after number=,
    toc part font-size= LARGE,
    toc part font-weight = bold,
    toc part font-family = rmfamily,
    toc part font-shape  = upshape,
    toc part before number={\kern0pt},
    toc part page font-size= \bfseries,
    toc part beforeskip = 2.25em plus0.5pt minus0.5pt,
    toc part case       = upper,
    toc part color      = sweet,
   }
  %    \end{macrocode}
% 
%
% \begin{docCommand} {l@part} { \meta{title} \meta{pagenumber} }
% We now renew the command, in order to allow for hooks. 
% This might be cloberred by hyperref if too many changes
% are carried out. It takes two parameters (one for the caption and another for the title if different).
% \end{docCommand}
%
% We need first to define conditionals to switch from
% printing the part or not.
%
%  We allow for any document type to have parts, as long as the control sequence |\part|
%  is defined.
%  The part |toc_level = -1|
%    \begin{macrocode}
\ExplSyntaxOn
\newif\if@dopart@cx
\newif\if@haspart@cx
  \@ifundefined{part}{\@haspart@cxfalse}{\@haspart@cxtrue}
\if@haspart@cx

\cs_gset:Npn \l@part #1 #2
  {
    \bool_if:NT \haspart_bool
      {
        \bool_if:NTF \has_chapter_bool 
          {
            \addpenalty{-\@highpenalty}
          }
          { 
            \addpenalty\@secpenalty 
          }
% add any skip before using addvspace          
          \addvspace{\toc_part_before_skip_dim}%
%% set margins in a group          
%          \group_begin:
%          \tex_leftskip:D \toc_part_indent\relax       
%          \tex_rightskip:D \@tocrmarg % need to check this for conflics\@tocrmarg
%          \tex_parfillskip:D -\tex_rightskip:D
%          \parindent \toc_part_indent\relax
%          \@afterindenttrue
%          \interlinepenalty\@M
%% start paragraph          
%          \leavevmode    
%% set leftmargin          
%          \dim_set_eq:NN \l_tmpa_dim \toc_part_number_width_dim
%%          
%          \dim_add:Nn \leftskip \toc_part_number_width_dim
%          \null\nobreak\hskip -\leftskip
%
%          \toc_part_font_size 
%          \tocpartbeforenumber@cx \tocpartcase {#1}
%          \partfillnum@cx{#2}%
           \format_toc_entry:nn {part} {#1} {#2}
           \nobreak
           \bool_if:NT \has_chapter_bool
             {
               \global\@nobreaktrue
               \tex_everypar:D { \global\@nobreakfalse\tex_everypar:D {} }%
 	           }
           %\group_end:
    }
  } %end l@part

\ExplSyntaxOff
%    \end{macrocode}
% 
%
%  These are the user commands to control the typesetting of Part entries.
%  They are initialised to give the standard appearance.
%    \begin{macrocode}
\ExplSyntaxOn
  \newcommand{\partpresnum@cx}{}
  \newcommand{\partaftersnum@cx}{..}
  % defined in parameters \newcommand{\partaftersnumb@cx}{}
%
% 
  \def\cftnodots{2.7}
  \newcommand{\partdotsep@cx}{\cftnodots}
  \newcommand{\tocpartleader@cx}{\large\bfseries\dot_fill{\partdotsep@cx}}

%\newcommand{\tocsectionleader@cx}  {\normalfont\dot_fill{\tocsecdotsep@cx}}
%
  
  \newcommand{\cftpartpagefont}{\large\bfseries}
  %\newcommand{\partafterpnum@cx}{}
  
  
  \newcommand{\partfillnum@cx}[1]{%
    {\tocpartleader@cx}%
    {\hb@xt@\@pnumwidth{\hss {%
       \tocpartpagefontsize@cx #1}}}\partafterpnum@cx\par}%
\ExplSyntaxOff       
%    \end{macrocode}


% \section{Handling of chapters in ToC.}
%

%  These are the user commands to control the typesetting of Chapter entries.
%  They are initialised to give the standard appearance.
%    \begin{macrocode}
\ExplSyntaxOn
\if@debug
      \fboxsep1pt
      \fboxrule-1pt
\else
      \fboxsep0pt
      \fboxrule0pt
\fi
\if@haschapter@cx
  \newlength{\beforetocchapterskip@cx}
  \setlength{\beforetocchapterskip@cx}{1.0em \@plus\p@}
  \newlength{\cftchapindent}
  \setlength{\cftchapindent}{0em}
  \newlength{\cftchapnumwidth}\setlength{\cftchapnumwidth}{1.5em}
  \newcommand{\cftchapfont}{\bfseries}
  \newcommand{\cftchappresnum}{}
  \newcommand{\cftchapaftersnum}{}
  \newcommand{\cftchapaftersnumb}{}
  \newcommand{\cftchapleader}{\bfseries\dot_fill{\cftchapdotsep}}
\ExplSyntaxOff  
%    \end{macrocode}
%
%	The following code determines the spacing of the dots.
%    \begin{macrocode}
  \newcommand{\cftchapdotsep}{\toc_chapter_dot_sep} 
  \newcommand{\cftchappagefont}{\sffamily\bfseries\color{teal}}
  \newcommand{\cftchapafterpnum}{}
%
 %    \end{macrocode}
%    \begin{macrocode}
%
% \pkgname{koma} classes have different chapter settings.
%    \begin{macrocode}
%  \if@cftkoma
%    \renewcommand{\cftchapfont}{\sectfont}
%  \fi
\fi

%    \end{macrocode}
%
% \subsection{l@chapter}
%
% \begin{docCommand} {l@chapter} { }
%  \cs{l@chapter}\marg{title}\marg{page} typesets the ToC entry for
% a |chapter| heading. It is a parameterised copy of the default |\l@chapter|
%  (see \docfile{classes.dtx} for the original definition). This only applies
%  to chaptered documents.
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cxset
  {
    toc~chapter~indent/.store~in             = \toc_chapter_indent,
    toc~chapter~beforeskip/.store~in         = \toc_chapter_beforeskip,
    toc~chapter~afterskip/.store~in          = \toc_chapter_after_skip,
    toc~chapter~dotsep/.store~in             = \toc_chapter_dot_sep,
    toc~chapter~no~dots/.code                = \def\toc_chapter_dot_sep{10000},
    toc~chapter~numberwidth/.store~in        = \toc_chapter_number_width,
    toc~chapter~font-size/.font-size~in      = \toc_chapter_font_size, 
    toc~chapter~font-family/.font-family~in  = \toc_chapter_font_family, 
    toc~chapter~font-shape/.store~in         = \toc_chapter_font_shape, 
    toc~chapter~font-weight/.store~in        = \toc_chapter_font_weight, 
    toc~chapter~color/.store~in              = \toc_chapter_color,
    toc~chapter~numwidth/.store~in           = \toc_chapter_number_width,
    toc~chapter~case/.case~in                = \toc_chapter_case,
    toc~chapter~font/.store~in               = \tocchapterfont@cx,
    toc~chapter~title~width/.store~in        = \tocchaptertitlewidth@cx,
    toc~chapter~page~font-size/.store~in     = \toc_chapter_page_font_size,
    toc~chapter~page~font-family/.store~in   = \toc_chapter_page_font_family,
    toc~chapter~page~font-shape/.store~in    = \toc_chapter_page_font_shape,
    toc~chapter~page~font-weight/.store~in   = \toc_chapter_page_font_weight,
    toc~chapter~page~color/.store~in         = \toc_chapter_page_color,
    toc~chapter~page~before/.store~in        = \toc_chapter_page_before,
    toc~chapter~page~after/.store~in         = \toc_chapter_page_after,
    toc~chapter~page~pnumwidth/.store~in     = \toc_chapter_page_number_width
  }
\ExplSyntaxOff  
%
\cxset
  {
    toc chapter indent                       = 0pt,
    toc chapter beforeskip                   = 15pt plus0.5pt minus0.5pt,
    toc chapter afterskip                    = 15pt plus0.5pt minus0.5pt,
    toc chapter dotsep                       = 4.5,
    toc chapter no dots,
    toc  chapter numberwidth                 = 7.25em,
    toc chapter font                         = \bfseries\sffamily\large,
    toc chapter title width                  = 0.6\textwidth,
    toc chapter page pnumwidth               = 2.35em,
    toc chapter page before                  = [,
    toc chapter page after                   = ],
    toc chapter case                         = upper,
  }
%    \end{macrocode}

%
% \begin{docCommand} {l@chapter} { \meta{title}  \meta{page number} }
%   Controls the toc entry for chapters.  \FIRE
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
  \renewcommand*{\l@chapter}[2]{%
     \ifnum \c@tocdepth >\m@ne
       \addpenalty{-\@highpenalty}%
       \vskip \toc_chapter_beforeskip\relax 
        {
        \format_toc_chapter_leaders:nn {#1} {#2}
        }%
       \vskip \toc_chapter_after_skip 
    \fi
 }%
\ExplSyntaxOff 
%    \end{macrocode}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \format_toc_chapter_leaders:nn #1 #2
  {
   \leftskip\toc_chapter_indent\relax
   \rightskip \@tocrmarg
   \parfillskip -\rightskip
   \parindent \toc_chapter_indent\relax%
   \@afterindenttrue
   \interlinepenalty\@M
   \leavevmode
   \begin{tcolorbox}[colback=spot!30,arc=3mm,colframe=white]
   \numberlineboxwidth\toc_chapter_number_width\relax
        %\let\toc_number_before \cftchappresnum
        %\let\toc_number_after \cftchapaftersnum
        %\let\toc_number_after_box \cftchapaftersnumb
    \advance\leftskip\numberlineboxwidth
    \null\nobreak\hskip -\leftskip
    {
      \tocchapterfont@cx 
      \exp_after:wN \cs:w \toc_chapter_case \cs_end:
      {#1}
    }
    {\lotleader}\nobreak 
     \toc_chapter_page_before\makebox[\toc_chapter_page_number_width][r]
    {
        \exp_after:wN \cs:w \exp_after:wN \lot_page_font_size \cs_end:
        \exp_after:wN \cs:w \exp_after:wN \lot_page_font_weight \cs_end: 
        \exp_after:wN \cs:w \exp_after:wN \lot_page_font_family \cs_end:
        \exp_after:wN \cs:w \exp_after:wN \lot_page_font_shape \cs_end:
       \hss#2
    }\toc_chapter_page_after
   \end{tcolorbox}
          
  }          
\ExplSyntaxOff  

    
%    \end{macrocode}
% 
% 
% We define a macro for mocking sample toc chapters for the documentation
% 
% \begin{docCommand} {sampletocchapter} {\meta{void}}
%   Typesets  a sample based on l@chapter
% \end{docCommand}
%    \begin{macrocode}
\let\sampletocchapter\l@chapter
%    \end{macrocode}
% 
%
% \section{ToC section styling}
%
%  |\l@section{|\meta{title}|}{|\meta{page}|}| typesets the ToC entry for
% a |section| heading. It is a parameterised copy of the default |\l@section|
% (see \docfile{classes.dtx} for the original definition). 
% 	We start by defining all our parameters and variables.
%
%     \begin{macrocode}
\ExplSyntaxOn 
\cxset
  {
    toc~section~beforeskip/.store~in=\tocsectionbeforeskip@cx,
    toc~section~beforeskip/.default={0pt plus.2pt},
%  This is the left margin! indent might be a misnomer we provide for
%  both        
    toc~section~indent/.store~in            = \toc_section_indent,
    toc~section~margin-left/.style          = {toc section indent=#1},
%      fonts for title &num
    toc~section~font-size/.font-size~in     = \toc_section_font_size, 
    toc~section~font-family/.font-family~in = \toc_section_font_family, 
    toc~section~font-shape/.store~in        = \toc_section_font_shape, 
    toc~section~font-weight/.store~in       = \toc_section_font_weight, 
    toc~section~color/.store~in             = \toc_section_color,
    toc~section~numwidth/.store~in          = \toc_section_number_width,
    toc~section~case/.case~in               = \toc_section_case,
    toc~section~page~font-size/.store~in    = \tocsectionpagefontsize@cx,
    toc~section~page~font-family/.store~in  = \tocsectionpagefontfamily@cx,
    toc~section~page~font-shape/.store~in   = \tocsectionpagefontshape@cx,
    toc~section~page~font-weight/.store~in  = \tocsectionpagefonteight@cx,
    toc~section~page~color/.store~in        = \tocsectionpagecolor@cx,
%      leaders template only
	  toc~section~dotsep/.store~in            = \tocsecdotsep@cx,
%      before and after page number
    toc~section~page~before/.store~in       = \tocsectionpagebefore@cx,
    toc~section~page~after/.store~in        = \tocsectionpageafter@cx,
}
\ExplSyntaxOff
%
\cxset{%
  toc section beforeskip=\z@ \@plus.2\p@,
  toc section indent=0em,
  toc section font-family= sffamily,
  toc section font-weight = bfseries,
  toc section font-shape = upshape,
  toc section color= sweet,
  toc section case = none,
  toc section font-size= normal,
  toc section numwidth = 4.2em,
  toc section page font-size=normal,
  toc section page font-shape= upshape,  
  toc section page font-weight=,  
  toc section page font-family= sffamily,
  toc section page color = sweet, 
  toc section page before =,
  toc section page after =,
  toc section dotsep = 2.7,
}
%    \end{macrocode}
%
%
% \begin{docCommand} {format_toc_entry} { \meta{section title} {\meta {page number}} }
%   Responsible for decorating one entry in the toc. It is a generic
%   template for all levels.
%
%    \#1 section name i.e, section or subsection\\
%    \#2 section title\\
%    \#3 section page number\\
%
% \end{docCommand}
%

%
% \begin{docCommand} { l@section } { \meta{title} } { page number }
% 	 This macro is called when the \cs{tableofcontents}
%	 is read from the |.toc| file and it typesets
%	 the title and the page number. It is called in a |csname| by |\contentsline|
% 
%    \#1 section title\\
%    \#2 page number\\
%    \#3 added by Hyperref
%      
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn \l@section #1 #2
  {
  \ifnum \c@tocdepth >\z@
    \if@haschapter@cx
      \skip_vertical:n \tocsectionbeforeskip@cx
    \else
      \addpenalty \@secpenalty
      \addvspace{\tocsectionbeforeskip@cx}%
    \fi
    \format_toc_entry:nn {section} {#1} {#2}
  \fi
  }
\ExplSyntaxOff  
%    \end{macrocode}
% 
%
%  These are the user commands to control the typesetting 
%	 of Section entries.
%    They are initialised to give the standard appearance.
%	 These are hooks to \cs{numberline}.
%    \begin{macrocode}
\ExplSyntaxOn
\newcommand{\cftsecpresnum}{}
\newcommand{\cftsecaftersnum}{}
\newcommand{\cftsecaftersnumb}{}
%
%
\newcommand{\tocsectionleader@cx}  {\normalfont\dot_fill{\tocsecdotsep@cx}}
%^^A\newcommand{\cftsecdotsep}{\cftdotsep}
%    \end{macrocode}
%    We can now define the command \cmd{\tocsectionfillnum@cx}. 
%    will print the 
%	leaders if any and the page number \#1. 
%    \begin{macrocode}
%\newcommand{\tocsectionfillnum@cx}[1]{%
%  {\tocsectionleader@cx}\nobreak
%  \hb@xt@\@pnumwidth{\hfil\tocsectionpagefont@cx
%   \tocsectionpagebefore@cx #1}%
%   \tocsectionpageafter@cx\par}%
\ExplSyntaxOff
%    \end{macrocode}
%
%
% \section{Toc subsection styling}
%
% 
%  \refCom{l@subsection} typesets the ToC entry for
% a |section| heading. It is similar to   \refCom{l@section}
% (see \docfile{classes.dtx} for the original definition). 
% 	We start by defining all our parameters and variables.
%
%    \begin{macrocode}
\ExplSyntaxOn
\newif\if@lowercasesubsection
\cxset{
  toc~subsection~beforeskip/.store~in             = \toc_subsection_before_skip,
  toc~subsection~indent/.store~in                 = \toc_subsection_indent,
  toc~subsection~font-size/.font-size~in          = \toc_subsection_font_size, 
  toc~subsection~font-family/.font-family~in      = \toc_subsection_font_family, 
  toc~subsection~font-shape/.font-style~in        = \toc_subsection_font_shape, 
  toc~subsection~font-weight/.font-weight~in      = \toc_subsection_font_weight, 
  toc~subsection~color/.store~in                  = \toc_subsection_color,
  toc~subsection~case/.case~in                    = \toc_subsection_case,
  toc~subsection~numwidth/.store~in               = \tocsubsectionnumwidth@cx,
  toc~subsection~page~font-size/.font-size~in     = \toc_subsection_page_font_size,
  toc~subsection~page~font-family/.font-family~in = \toc_subsection_page_font_family,
  toc~subsection~page~font-shape/.font-style~in   = \toc_subsection_page_font_shape,
  toc~subsection~page~font-weight/.font-weight~in = \toc_subsection_page_font_weight,
  toc~subsection~page~color/.store~in             = \toc_subsection_page_color,
  toc~subsection~dotsep/.store~in                 = \toc_subsection_dot_sep,
  toc~subsection~page~before/.store~in            = \toc_subsection_page_before,
  toc~subsection~page~after/.store~in             = \toc_subsection_page_after,
}
\ExplSyntaxOff 
%    \end{macrocode}
% Settings
%    \begin{macrocode} 
\cxset{toc subsection beforeskip      = \z@ \@plus.2\p@,
       toc subsection indent=0em,
       toc subsection font-family     = sffamily,
       toc subsection font-weight     = normal,
       toc subsection font-size       = normal,
       toc subsection font-shape      = upshape,
       toc subsection case            = none,
       toc subsection color= sweet,
       toc subsection numwidth = 4.2em,
       toc subsection page font-size=normal,
       toc subsection page font-shape= upshape,  
       toc subsection page font-weight=, 
       toc subsection page font-family= sffamily,
       toc subsection page color = yellow, 
       toc subsection page before =,% \{,
       toc subsection page after =,% \},
       toc subsection dotsep = 2.7,
}%
%    \end{macrocode}
%
%    For convenience we define font setting commands for
%    the page number. We use \cs{setfont@cx}, which we have
%	defined earlier.
%    
%    \begin{macrocode}
\newcommand\tocsubsectionpagefont@cx{%
	\setfont@cx{\toc_subsection_page_font_weight}%
       {\toc_subsection_page_font_family}{\toc_subsection_page_font_size}%
       {\toc_subsection_page_font_shape}\color{\toc_subsection_page_color}
}%
%    \end{macrocode}
%
% \begin{docCommand}{l@subsection} { \meta{title} \meta{page number} }
%  Similar to \refCom{l@section} function.
% \end{docCommand}
%
%    \begin{macrocode}        
\ExplSyntaxOn
\cs_gset:Npn \l@subsection #1 #2 
  {%
    \ifnum \c@tocdepth >\z@
      \if@haschapter@cx
        \skip_vertical:N \toc_subsection_before_skip
      \else
        \addpenalty \@secpenalty
        \addvspace{\toc_subsection_before_skip}%
    \fi
      \format_toc_entry:nn {subsection} {#1} {#2}
  \fi
}
 \ExplSyntaxOff 
%    \end{macrocode}
% 
%

%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \tocsubsectionleader@cx 
  {
  \normalfont\dot_fill{\toc_subsection_dot_sep}
  }
\ExplSyntaxOff    
%    \end{macrocode}
%
% \section{Toc subsubsection styling}
%  Next the toc subsubsection properties. 
%    \begin{macrocode}
\ExplSyntaxOn
\cxset
  {
    toc~subsubsection~beforeskip/.store~in        = \toc_subsubsection_before_skip,
    toc~subsubsection~indent/.store~in            = \toc_subsubsection_indent,
%      fonts for title &num
    toc~subsubsection~font-size/.store~in         = \toc_subsubsection_font_size, 
    toc~subsubsection~font-family/.store~in       = \toc_subsubsection_font_family, 
    toc~subsubsection~font-shape/.store~in        = \toc_subsubsection_font_shape, 
    toc~subsubsection~font-weight/.store~in       = \toc_subsubsection_font_weight, 
    toc~subsubsection~color/.store~in             = \toc_subsubsection_color,
    toc~subsubsection~case/.case~in               = \toc_subsubsection_case,
    toc~subsubsection~numwidth/.store~in          = \tocsubsubsectionnumwidth@cx,
%	  fonts etc for page number
    toc~subsubsection~page~font-size/.store~in    = \toc_subsubsection_page_font_size,
    toc~subsubsection~page~font-family/.store~in  = \toc_subsubsection_page_font_family,
    toc~subsubsection~page~font-shape/.store~in   = \toc_subsubsection_page_font_shape,
    toc~subsubsection~page~font-weight/.store~in  = \toc_subsubsection_page_font_weight,
    toc~subsubsection~page~color/.store~in        = \toc_subsubsection_page_color,
%      leaders
	  toc~subsubsection~dotsep/.store~in            = \toc_subsubsection_dot_sep,
%      before and after page number
    toc~subsubsection~page~before/.store~in       = \toc_subsubsection_page_before,
    toc~subsubsection~page~after/.store~in        = \toc_subsubsection_page_after,
}
\ExplSyntaxOff
%
%    \end{macrocode}
%
% We set the subsubsecton fields.
%    \begin{macrocode}
\cxset{
  toc subsubsection beforeskip         = \z@ \@plus.2\p@,
  toc subsubsection indent=0em,
  toc subsubsection font-family        = sffamily,
  toc subsubsection font-weight        = mdseries,
  toc subsubsection font-shape         = upshape,
  toc subsubsection case               = none, 
  toc subsubsection color              = sweet,
  toc subsubsection font-size          = normal,
  toc subsubsection numwidth           = 4.2em,
  toc subsubsection page font-size     =,
  toc subsubsection page font-shape    = upshape,  
  toc subsubsection page font-weight   =, 
  toc subsubsection page font-family   = sffamily,
  toc subsubsection page color         = teal, %ineffective as it gets color from hyper
  toc subsubsection page before        =,% \{,
  toc subsubsection page after         =,% \},
  toc subsubsection dotsep             = 1000,%2.7
}
%    \end{macrocode}
%
%    For convenience we define font setting commands for
%    the page number. We use \cs{setfont@cx}, which we have
%	defined earlier. Note this might be clobbered if 
%  hyperref is to provide a page link.
%    
%    \begin{macrocode}
\newcommand\tocsubsubsectionpagefont@cx{%
	\setfont@cx{\toc_subsubsection_page_font_weight}%
       {\toc_subsubsection_page_font_family}{\toc_subsubsection_page_font_size}%
       {\toc_subsubsection_page_font_shape}\color{\toc_subsubsection_page_color}
}%
%    \end{macrocode}
%
% \begin{docCommand} {l@subsubsection} { \meta{title} \meta{page number}} 
%  typesets the ToC entry for
% a |subsubsection| heading. It is a parameterised copy of the default |\l@subsubsection|
%	We start by defining all our parameters and variables.
% \end{docCommand} 
%       
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn \l@subsubsection #1 #2
{%
  \ifnum \c@tocdepth >\z@
    \if@haschapter@cx
      \vskip \toc_subsection_before_skip
    \else
      \addpenalty \@secpenalty
      \addvspace{\toc_subsection_before_skip}%
    \fi
%    {\leftskip \toc_subsection_indent\relax
%     \rightskip \@tocrmarg
%     \parfillskip -\rightskip
%     \parindent \toc_subsection_indent\relax\@afterindenttrue
%     \interlinepenalty\@M
%     \leavevmode
%     \@tempdima \tocsubsubsectionnumwidth@cx\relax
%     \let\toc_number_before \cftsecpresnum
%     \let\toc_number_after \cftsecaftersnum
%     \let\toc_number_after_box \cftsecaftersnumb
%     \advance\leftskip \@tempdima \null\nobreak\hskip -\leftskip

  \format_toc_entry:nn {subsubsection} {#1} {#2}
  \fi
}
\ExplSyntaxOff
%    \end{macrocode}
%
% 
%    \begin{macrocode}
\ExplSyntaxOn
 \cs_new:Npn \tocsubsubsectionleader@cx 
   {
     \normalfont\dot_fill{\toc_subsubsection_dot_sep}
   }
\ExplSyntaxOff
%\newcommand{\cftsecdotsep}{\cftdotsep}
%    \end{macrocode}
%    We can now define the command \cmd{\tocsectionfillnum}. It will print the 
%	leaders if any and the page number \#1. TODO IS par necessary??
%    \begin{macrocode}
\newcommand{\tocsubsubsectionfillnum}[1]{%
  {\tocsubsubsectionleader}\nobreak
  \hb@xt@\@pnumwidth{\hfil\toc_subsubsection_page_font
   \toc_subsubsection_page_before #1}%
   \toc_subsubsection_page_after\par}%
%    \end{macrocode}
%
% \section{Toc paragraph styling}
%
% 
% Similarly to the higher headings \refCom{l@subsubsection} typesets the ToC entry for
% a \emph{paragraph} heading.	We start by defining  parameters and variables.
%
%    \begin{macrocode}
\ExplSyntaxOn
\newif\if@lowercaseparagraph
\cxset
  {
    toc~paragraph~beforeskip/.store~in              = \toc_paragraph_before_skip,
    toc~paragraph~indent/.store~in                  = \toc_paragraph_indent,
%      fonts for title &num
    toc~paragraph~font-size/.font-size~in           = \toc_paragraph_font_size, 
    toc~paragraph~font-family/.font-family~in       = \toc_paragraph_font_family, 
    toc~paragraph~font-shape/.font-style~in         = \toc_paragraph_font_shape, 
    toc~paragraph~font-weight/.font-weight~in       = \toc_paragraph_font_weight, 
    toc~paragraph~color/.store~in                   = \toc_paragraph_color,
    toc~paragraph~case/.case~in                     = \toc_paragraph_case,
    toc~paragraph~numwidth/.store~in                = \tocparagraphnumwidth@cx,
%	  fonts etc for page number
    toc~paragraph~page~font-size/.font-size~in      = \tocparagraphpagefontsize@cx,
    toc~paragraph~page~font-family/.font-family~in  = \tocparagraphpagefontfamily@cx,
    toc~paragraph~page~font-shape/.font-style~in    = \tocparagraphpagefontshape@cx,
    toc~paragraph~page~font-weight/.font-weight~in  = \tocparagraphpagefonteight@cx,
    toc~paragraph~page~color/.store~in              = \tocparagraphpagecolor@cx,
%      leaders
	  toc~paragraph~dotsep/.store~in                  = \tocparagraphdotsep@cx,
%      before and after page number
    toc~paragraph~page~before/.store~in=\tocparagraphpagebefore@cx,
    toc~paragraph~page~after/.store~in=\tocparagraphpageafter@cx,
}
\ExplSyntaxOff
%    \end{macrocode}
% We set default values.
%    \begin{macrocode}
\cxset{toc paragraph beforeskip=\z@ \@plus.2\p@,
       toc paragraph indent=0em,
       toc paragraph font-family= sffamily,
       toc paragraph font-weight = bfseries,
       toc paragraph font-shape = slshape,
       toc paragraph color= sweet,
       toc paragraph font-size=normal,
       toc paragraph case = none,
       toc paragraph numwidth = 4.2em,
       toc paragraph page font-size=normal,
       toc paragraph page font-shape= upshape,  
       toc paragraph page font-weight=normal, 
       toc paragraph page font-family= sffamily,
       toc paragraph page color = spot!50, 
       toc paragraph page before =,% \{,
       toc paragraph page after =,% \},
       toc paragraph dotsep = 1000,%2.7
}
%    \end{macrocode}
%
%    For convenience we define font setting commands for
%    the page number. We use \cs{setfont@cx}, which we have
%	defined earlier.
%    
%    \begin{macrocode}
\newcommand\tocparagraphpagefont@cx{%
	\setfont@cx{\tocparagraphpagefonteight@cx}%
       {\tocparagraphpagefontfamily@cx}{\tocparagraphpagefontsize@cx}%
       {\tocparagraphpagefontshape@cx}\color{\tocparagraphpagecolor@cx}
}%
%    \end{macrocode}     
%
% \begin{docCommand} {l@paragraph} { \meta{title} \meta{page number}}
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn    
\renewcommand*{\l@paragraph}[2]{%
  \ifnum \c@tocdepth >\z@
    \bool_if:NTF \has_chapter_bool
      {
        \skip_vertical:N \toc_paragraph_before_skip
      }
      {
        \addpenalty \@secpenalty
        \addvspace{\toc_paragraph_before_skip}%
      }
%    {\leftskip \tocparagraphindent@cx\relax
%     \rightskip \@tocrmarg
%     \parfillskip -\rightskip
%     \parindent \tocparagraphindent@cx\relax\@afterindenttrue
%     \interlinepenalty\@M
%     \leavevmode
%     \@tempdima \tocparagraphnumwidth@cx\relax
%     \let\toc_number_before \cftsecpresnum
%     \let\toc_number_after \cftsecaftersnum
%     \let\toc_number_after_box \cftsecaftersnumb
%     \advance\leftskip \@tempdima \null\nobreak\hskip -\leftskip
     \format_toc_entry:nn {paragraph} {#1} {#2}
  \fi
  }
\ExplSyntaxOff  
%    \end{macrocode}
%
%
%    \begin{macrocode}
\ExplSyntaxOn
\newcommand{\tocparagraphleader@cx}{\normalfont\dot_fill{\tocparagraphdotsep@cx}}
\ExplSyntaxOff
%\newcommand{\cftsecdotsep}{\cftdotsep}
%    \end{macrocode}
%%    We can now define the command \cmd{\tocsectionfillnum}. It will print the 
%%	leaders if any and the page number \#1. TODO IS par necessary??
%%    \begin{macrocode}
%\newcommand{\tocparagraphfillnum}[1]{%
%  {\tocparagraphleader}\nobreak
%  \hb@xt@\@pnumwidth{\hfil\tocparagraphpagefont@cx
%   \tocparagraphpagebefore@cx #1}%
%   \tocparagraphpageafter@cx\par}%
%    \end{macrocode}
%
% \section{Toc subparagraph styling}
%
% \tcbdocmarginnote{U 20-6-2015}
% 
% 
% 
% Similarly to the higher headings \refCom{l@subsubsection} typesets the ToC entry for
% a \emph{subparagraph} heading.	We start by defining  parameters and variables.
%
%    \begin{macrocode}
\newif\if@lowercasesubparagraph
\ExplSyntaxOn
\cxset
  {
    toc~subparagraph~beforeskip/.store~in              = \toc_subparagraph_before_skip,
    toc~subparagraph~indent/.store~in                  = \toc_subparagraph_indent,
    toc~subparagraph~font-size/.font-size~in           = \toc_subparagraph_font_size, 
    toc~subparagraph~font-family/.font-family~in       = \toc_subparagraph_font_family, 
    toc~subparagraph~font-shape/.font-style~in         = \toc_subparagraph_font_shape, 
    toc~subparagraph~font-weight/.font-weight~in       = \toc_subparagraph_font_weight, 
    toc~subparagraph~color/.store~in                   = \toc_subparagraph_color,
 }

\cxset
  {
    toc~subparagraph~case/.case~in                     = \toc_subparagraph_case,
%    toc~subparagraph~case/lower/.code                  =
%     \def\toc_subparagraph_case@cx{
%       MakeTextLowercase\
%          },
%    toc~subparagraph~case/upper/.code=
%      \def\toc_subparagraph_case{
%       MakeTextUppercase},
%    toc~subparagraph~case/none/.code=
%    \def\toc_subparagraph_case{@empty},
    toc~subparagraph~numwidth/.store~in                 =
    \tocsubparagraphnumwidth@cx,
%    
    toc~subparagraph~page~font-size/.store~in           =
      \toc_subparagraph_page_font_size,
    toc~subparagraph~page~font-family/.font-family~in   = \toc_subparagraph_page_fontfamily,
    toc~subparagraph~page~font-shape/.font-style~in     = \toc_subparagraph_page_fontshapex,
    toc~subparagraph~page~font-weight/.font-weight~in   =\toc_subparagraph_page_font_weight@cx,
    toc~subparagraph~page~color/.store~in               = \toc_subparagraph_page_color,
%     leaders
	  toc~subparagraph~dotsep/.store~in                   = \toc_subparagraph_dotsep,
%      before and after page number
    toc~subparagraph~page~before/.store~in              = \toc_subparagraph_page_before,
    toc~subparagraph~page~after/.store~in               = \toc_subparagraph_page_after,
}

\ExplSyntaxOff 
%    \end{macrocode}
% Next we set the keys
%    \begin{macrocode}
\cxset{
  toc subparagraph beforeskip         = \z@ \@plus.2\p@,
  toc subparagraph indent=0em,
  toc subparagraph font-family             = sffamily,
  toc subparagraph font-weight             = normal,
  toc subparagraph font-shape              = slshape,
  toc subparagraph color                   = sweet ,
  toc subparagraph font-size               = normal,
  toc subparagraph case                    = none,
  toc subparagraph numwidth                = 4.2em,
  toc subparagraph page font-size          = normal,
  toc subparagraph page font-shape         = upshape,  
  toc subparagraph page font-weight        = , 
  toc subparagraph page font-family        = sffamily,
  toc subparagraph page color              = teal, 
  toc subparagraph page before             =,% \{,
  toc subparagraph page after              =,% \},
  toc subparagraph dotsep                  = 1000,
%           
}
%    \end{macrocode}
%
% \begin{docCommand} {l@subparagraph} { \meta{title} \meta{page number}}
% \end{docCommand}
%
% \paragraph{Testing paragraph}
% \subparagraph{Testing subparagraph}
%
%    \begin{macrocode} 
\ExplSyntaxOn   
\renewcommand*{\l@subparagraph}[2]{%
  \ifnum \c@tocdepth >\z@
    \if@haschapter@cx
      \vskip \toc_subparagraph_before_skip
    \else
      \addpenalty \@secpenalty
      \addvspace{\toc_subparagraph_before_skip}%
    \fi
    \format_toc_entry:nn {subparagraph} {#1} {#2}
  \fi
  }
\ExplSyntaxOff  
%    \end{macrocode}
%
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \tocsubparagraphleader@cx
  {
    \normalfont\dot_fill{\toc_subparagraph_dotsep}
  }
\ExplSyntaxOff
%    \end{macrocode}
%
% This brings us, dear reader to a long and arduous 
% path. Surely there must be an easier way. we have 
% added parameters in all sectioning commands, down to 
% paragraph level and we can even lower if you want
% for the legal guys and for construction specs. But
% we also need to do the other lists, list of figure
% and list of tables and maybe others.
%
% \section{List of Figures}
% \tcbdocmarginnote{U 30-06-2015}

% The standard list of figures follows the same patterns
% for the ToC. We need to redefine the standard macros
% with adequate hooks for parameters. The parameters are
% simpler than the ToC, as we do not have to care
% about different heading levels.
%
%    \begin{macrocode}
%\ExplSyntaxOn
% \renewcommand{\tableofcontents}{%
%    \phd_toc_start:
%%    \end{macrocode}
%% Ensure that any previous paragraph has been finished. 
%%	within a group set
%% the local paragraphing style and typeset the title. \label{code:tableofcontents}
%%    \begin{macrocode}
%    \par
%    \begingroup
%      \parindent\z@ 
%      \parskip\tocparskip@cx
%      \make_toc_title:
%%    \end{macrocode}
%%
%% Finally, start reading the \docfile{.toc} file and finish up.
%%    \begin{macrocode}
%    \start_toc:n {toc}%
%    \endgroup
%    \phd_toc_finish:
%}%
%\ExplSyntaxOff
%    \end{macrocode}
% \begin{docCommand}{format_lof_name:n} { \marg{name} }
%   Formats and typesets the contents name part, in a LoF. 
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn \format_lof_name:n #1 
  {
 \begin{tcolorbox}[colback=spot!30,arc=3mm,colframe=white,]
  \contents_name_before
     \setfont@cx {\lof_name_font_weight}
                 {\lof_name_font_family}
                 {\lof_name_font_size}
                 {\lof_name_font_shape}
                 \color{\lof_name_color}
      \start_align
      \lof_name_indent 
      \exp_after:wN \cs:w \exp_after:wN
           \lof_name_case\cs_end:
        #1
      \end_align
    \end{tcolorbox} 
 \contents_name_after%
 }
\ExplSyntaxOff
%    \end{macrocode}
%
% \begin{docCommand}{listoffigures} { \meta{void} }
%  Start by redefining the list of figures.
%  This will call its own function to format the heading
%  of the LoF and then either write to the file or read a
%  a file using \refCom{start_toc:n}
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\renewcommand\listoffigures{%
    \if@twocolumn
      \@restonecoltrue\onecolumn
    \else
      \@restonecolfalse
    \fi
    \make_lof_title
    \start_toc:n {lof}%
    \if@restonecol
      \twocolumn
    \fi
    }
\ExplSyntaxOff    
%    \end{macrocode}
% 
% \subsection{Keys for LoF}
% Next we define all the properties we need to add for the LoF heading. In
% the standard classes it just uses |\chapter*|, but many books have a totally
% different style for this.
% 
%    \begin{macrocode}
\ExplSyntaxOn
\cxset 
  {
    lof~name/.code                                    = 
        \cs_gset:Npn \listfigurename { #1 },
    lof~name~before/.store~in                         = \lof_name_before,
    lof~name~after/.store~in                          = \lof_name_after,
    lof~name~font-size/.store~in                      = \lof_name_font_size,
    lof~name~font-weight/.store~in                    = \lof_name_font_weight,
    lof~name~font-family/.store~in                    = \lof_name_font_family,
    lof~name~font-shape/.store~in                     = \lof_name_font_shape,
    lof~name~color/.store~in                          = \lof_name_color,
    lof~name~afterskip/.store~in                      = \lof_name_after_skip,
    lof~name~align/.is~choice,
    lof~name~align/center/.code                       =
      \cs_set:Npn \start_align { \bgroup \centering }
      \cs_set:Npn \end_align {\par \egroup },
    lof~name~align/right/.code                        =
      \cs_set:Npn \start_align { \flushright }
      \cs_set:Npn \end_align { \endflushright },
    lof~name~align/left/.code                         =
      \cs_set:Npn \start_align{\@empty}
      \cs_set:Npn \end_align{\@empty},
    lof~name~align/none/.code                         =
      \cs_set:Npn \start_align{\@empty}
      \cs_set:Npn \end_align{\@empty},
    lof~name~indent/.store~in                         = \lof_name_indent,
    lof~name~case/.case~in                            = \lof_name_case,
    lof~pagestyle/.code                               =
    \gdef\contentspagestyle@cx{\thispagestyle{#1}},
}
\ExplSyntaxOff     
%    \end{macrocode}
%
%    \begin{macrocode}
\cxset{lof name= Illustrations,
       lof name before = ,
       lof name after =, 
       lof name color = black,
       lof name font-weight=bold,
       lof name font-family=sffamily,
       lof name font-shape=upshape,
       lof name font-size=LARGE,
       lof name afterskip=10pt, %set as 40pt in LaTeX
       lof name after=\par,
       lof name align=none,
       lof name indent=\hspace*{0cm},
       lof name case=upper,
       lof pagestyle=headings,
  }%
  
%    \end{macrocode}    
% 
%    \begin{macrocode}    
\ExplSyntaxOn
\def\phd_lof_start{}
\def\phd_lof_end {}
\cs_new:Npn \make_lof_title
  {
    \newpage
    \phd_lof_start
    \format_lof_name:n {\listfigurename}%
    \@mkboth{\MakeUppercase\listfigurename}%
            {\MakeUppercase\listfigurename}%
    \phd_lof_end         
  }        
\ExplSyntaxOff    
%    \end{macrocode}    
%
% The |l@figure| is a much simpler operation and it only
% needs to adjust a much smaller set of parameters. The \emph{entry}
% refers to the whole block of a LoF entry. The \emph{page} only
% at the page number of the entry. 
% 
%    \begin{macrocode}
\ExplSyntaxOn 
\cxset
  {
    lof~entry~beforeskip/.store~in              = \lof_before_skip,
    lof~entry~indent/.store~in                  = \lof_indent,
    lof~entry~margin-left/.style                = {lof indent=#1},
    lof~entry~font-size/.font-size~in           = \lof_font_size, 
    lof~entry~font-family/.font-family~in       = \lof_font_family, 
    lof~entry~font-shape/.store~in              = \lof_font_shape, 
    lof~entry~font-weight/.store~in             = \lof_font_weight, 
    lof~entry~color/.store~in                   = \lof_color,
    lof~numwidth/.store~in                      = \lof_number_width,
    lof~pnumwidth/.store~in                     = \lof_page_number_width,
    lof~rmargin/.store~in                       = \lof_rmargin,
    lof~case/.case~in                           = \lof_case,
    lof~page~font-size/.store~in                = \lof_page_font_size,
    lof~page~font-family/.store~in              = \lof_page_font_family,
    lof~page~font-shape/.store~in               = \lof_page_font_shape,
    lof~page~font-weight/.store~in              = \lof_page_font_weight,
    lof~page~color/.store~in                    = \lof_page_color,
    lof~dotsep/.store~in                        = \lof_dotsep,
    lof~page~before/.store~in                   = \lof_page_before,
    lof~page~after/.store~in                    = \lof_page_after,
}
\ExplSyntaxOff
%
\cxset
  {%
    lof entry beforeskip=\z@ \@plus.2\p@,
    lof entry indent=0em,
    lof entry font-family= sffamily,
    lof entry font-weight = bfseries,
    lof entry font-shape = upshape,
    lof entry color= black,
    lof case = upper,
    lof entry font-size= normal,
    lof numwidth = 3em,
    lof pnumwidth = 2.35em, %set at 1.55em in book
    lof rmargin   = 3.35em, %set at 2.55em in book
    lof page font-size=normal,
    lof page font-shape= upshape,  
    lof page font-weight=bold,  
    lof page font-family= sffamily,
    lof page color = sweet, 
    lof page before =,
    lof page after =,
    lof dotsep = 2.7,
}
%    \end{macrocode}
% 
% \begin{docCommand}{l@figure} { \marg{number and title} } { \marg {page number} }
%  As for the other lists the |l@figure| has been defined in one of the classes.
%  We re-write it to add parameters. As the style can vary considerably from book
%  to book we also introduce special formatters.
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
 \renewcommand*{\l@figure}[2]{%
%  \ifnum \c@lofdepth >\z@
     \vskip \lof_before_skip
    {
%      \@tempdima \lof_number_width\relax
%     \let\@cftbsnum \cftfigpresnum
%     \let\@cftasnum \cftfigaftersnum
%     \let\@cftasnumb \cftfigaftersnumb
%      \advance\leftskip \@tempdima \null\nobreak\hskip -\leftskip
%      { #1}\nobreak %add font commands here
%      \cftfigfillnum{#2}
      \format_lof_entry_leaders_type {#1}{#2}
    }%
%   \fi
  }
%
\newcommand{\lofleader}{\normalfont\dot_fill{\lof_dotsep}}

\cs_new:Npn \format_lof_entry_leaders_type #1 #2 
  {
   \leftskip \lof_indent\relax
   \rightskip \lof_rmargin
   \parfillskip -\rightskip
   \parindent \lof_indent\relax\@afterindenttrue
   \interlinepenalty\@M
   \leavevmode
    % set parameters for number
    \numberlineboxwidth \lof_number_width\relax
    % set numberline hooks if any
    \advance\leftskip \numberlineboxwidth \null\nobreak\hskip -\leftskip
    #1 
    {\lofleader}\nobreak
    % set hooks for page??
     \lof_page_before\makebox[\lof_page_number_width][r]
      {
        \exp_after:wN \cs:w \exp_after:wN \lof_page_font_size \cs_end:
        \exp_after:wN \cs:w \exp_after:wN \lof_page_font_weight \cs_end: 
        \exp_after:wN \cs:w \exp_after:wN \lof_page_font_family \cs_end:
        \exp_after:wN \cs:w \exp_after:wN \lof_page_font_shape \cs_end:
       \hss#2
      }\lof_page_after
     
    \par
  }  
\ExplSyntaxOff  
%    \end{macrocode}
%
% \section{List of Tables}
%
% The standard list of tables is similar to that of the
% for the LoF. As a matter of fact in the book class they are
% let to equal. We need to redefine the standard macros
% with adequate hooks for parameters. The parameters are
% simpler than the ToC, as we do not have to care
% about different heading levels.
%
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn \format_lot_name:n #1 
  {
 \begin{tcolorbox}[colback=spot!50,arc=3mm,colframe=white,]
  \contents_name_before
     \setfont@cx {\lot_name_font_weight}
                 {\lot_name_font_family}
                 {\lot_name_font_size}
                 {\lot_name_font_shape}
                 \color{\lot_name_color}
      \start_align
      \lot_name_indent 
      \exp_after:wN \cs:w \exp_after:wN
           \lot_name_case\cs_end:
        #1
      \end_align
    \end{tcolorbox} 
 \contents_name_after%
 }
\ExplSyntaxOff
%    \end{macrocode}
%
% \begin{docCommand}{listoftables} { \meta{void} }
%  Start by redefining the list of figures.
%  This will call its own function to format the heading
%  of the LoF and then either write to the file or read a
%  a file using \refCom{start_toc:n}
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\renewcommand\listoftables {%
    \if@twocolumn
      \@restonecoltrue\onecolumn
    \else
      \@restonecolfalse
    \fi
    \make_lot_title
    \start_toc:n {lot}%
    \if@restonecol
      \twocolumn
    \fi
    }
\ExplSyntaxOff    
%    \end{macrocode}
% 
% \subsection{Keys for LoF}
% Next we define all the properties we need to add for the LoF heading. In
% the standard classes it just uses |\chapter*|, but many books have a totally
% different style for this.
% 
%    \begin{macrocode}
\ExplSyntaxOn
\cxset 
  {
    lot~name/.code                                    = 
        \cs_gset:Npn \listfigurename { #1 },
    lot~name~before/.store~in                         = \lot_name_before,
    lot~name~after/.store~in                          = \lot_name_after,
    lot~name~font-size/.store~in                      = \lot_name_font_size,
    lot~name~font-weight/.store~in                    = \lot_name_font_weight,
    lot~name~font-family/.store~in                    = \lot_name_font_family,
    lot~name~font-shape/.store~in                     = \lot_name_font_shape,
    lot~name~color/.store~in                          = \lot_name_color,
    lot~name~afterskip/.store~in                      = \lot_name_after_skip,
    lot~name~align/.is~choice,
    lot~name~align/center/.code                       =
      \cs_set:Npn \start_align { \bgroup \centering }
      \cs_set:Npn \end_align {\par \egroup },
    lot~name~align/right/.code                        =
      \cs_set:Npn \start_align { \flushright }
      \cs_set:Npn \end_align { \endflushright },
    lot~name~align/left/.code                         =
      \cs_set:Npn \start_align{\@empty}
      \cs_set:Npn \end_align{\@empty},
    lot~name~align/none/.code                         =
      \cs_set:Npn \start_align{\@empty}
      \cs_set:Npn \end_align{\@empty},
    lot~name~indent/.store~in                         = \lot_name_indent,
    lot~name~case/.case~in                            = \lot_name_case,
    lot~pagestyle/.code                               =
    \gdef\contentspagestyle@cx{\thispagestyle{#1}},
}
\ExplSyntaxOff     
%    \end{macrocode}
%
%    \begin{macrocode}
\cxset{lof name= Illustrations,
       lof name before = ,
       lof name after =, 
       lof name color = black,
       lof name font-weight=bold,
       lof name font-family=sffamily,
       lof name font-shape=upshape,
       lof name font-size=LARGE,
       lof name afterskip=10pt, %set as 40pt in LaTeX
       lof name after=\par,
       lof name align=none,
       lof name indent=\hspace*{0cm},
       lof name case=upper,
       lof pagestyle=headings,
  }%
  
%    \end{macrocode}    
% 
%    \begin{macrocode}    
\ExplSyntaxOn
\def\phd_lot_start{}
\def\phd_lot_end {}
\cs_new:Npn \make_lot_title
  {
    \newpage
    \phd_lot_start
    \format_lof_name:n {\listtablename}%
    \@mkboth{\MakeUppercase\listtablename}%
            {\MakeUppercase\listtablename}%
    \phd_lot_end         
  }        
\ExplSyntaxOff    
%    \end{macrocode}    
%
% The |l@figure| is a much simpler operation and it only
% needs to adjust a much smaller set of parameters. The \emph{entry}
% refers to the whole block of a LoF entry. The \emph{page} only
% at the page number of the entry. 
% 
%    \begin{macrocode}
\ExplSyntaxOn 
\cxset
  {
    lot~entry~beforeskip/.store~in              = \lot_before_skip,
    lot~entry~indent/.store~in                  = \lot_indent,
    lot~entry~margin-left/.style                = {lof indent=#1},
    lot~entry~font-size/.font-size~in           = \lot_font_size, 
    lot~entry~font-family/.font-family~in       = \lot_font_family, 
    lot~entry~font-shape/.store~in              = \lot_font_shape, 
    lot~entry~font-weight/.store~in             = \lot_font_weight, 
    lot~entry~color/.store~in                   = \lot_color,
    lot~numwidth/.store~in                      = \lot_number_width,
    lot~pnumwidth/.store~in                     = \lot_page_number_width,
    lot~rmargin/.store~in                       = \lot_rmargin,
    lot~case/.case~in                           = \lot_case,
    lot~page~font-size/.store~in                = \lot_page_font_size,
    lot~page~font-family/.store~in              = \lot_page_font_family,
    lot~page~font-shape/.store~in               = \lot_page_font_shape,
    lot~page~font-weight/.store~in              = \lot_page_font_weight,
    lot~page~color/.store~in                    = \lot_page_color,
    lot~dotsep/.store~in                        = \lot_dotsep,
    lot~page~before/.store~in                   = \lot_page_before,
    lot~page~after/.store~in                    = \lot_page_after,
}
\ExplSyntaxOff
%
\cxset
  {%
    lot entry beforeskip=\z@ \@plus.2\p@,
    lot entry indent=0em,
    lot entry font-family= sffamily,
    lot entry font-weight = bfseries,
    lot entry font-shape = upshape,
    lot entry color= black,
    lot case = upper,
    lot entry font-size= normal,
    lot numwidth = 3em,
    lot pnumwidth = 2.35em, %set at 1.55em in book
    lot rmargin   = 3.35em, %set at 2.55em in book
    lot page font-size=normal,
    lot page font-shape= upshape,  
    lot page font-weight=bold,  
    lot page font-family= sffamily,
    lot page color = sweet, 
    lot page before =,
    lot page after =,
    lot dotsep = 2.7,
}
%    \end{macrocode}
% 
% \begin{docCommand}{l@figure} { \marg{number and title} } { \marg {page number} }
%  As for the other lists the |l@figure| has been defined in one of the classes.
%  We re-write it to add parameters. As the style can vary considerably from book
%  to book we also introduce special formatters.
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
 \renewcommand*{\l@table}[2]{%
%  \ifnum \c@lofdepth >\z@
     \vskip \lot_before_skip
    {
%      \@tempdima \lot_number_width\relax
%     \let\@cftbsnum \cftfigpresnum
%     \let\@cftasnum \cftfigaftersnum
%     \let\@cftasnumb \cftfigaftersnumb
%      \advance\leftskip \@tempdima \null\nobreak\hskip -\leftskip
%      { #1}\nobreak %add font commands here
%      \cftfigfillnum{#2}
      \format_lof_entry_leaders_type {#1}{#2}
    }%
%   \fi
  }
%
\newcommand{\lotleader}{\normalfont\dot_fill{\lot_dotsep}}

\cs_new:Npn \format_lot_entry_leaders_type #1 #2 
  {
   \leftskip \lot_indent\relax
   \rightskip \lot_rmargin
   \parfillskip -\rightskip
   \parindent \lot_indent\relax\@afterindenttrue
   \interlinepenalty\@M
   \leavevmode
    % set parameters for number
    \numberlineboxwidth \lot_number_width\relax
    % set numberline hooks if any
    \advance\leftskip \numberlineboxwidth
     \null\nobreak\hskip -\leftskip
    #1 
    {\lotleader}\nobreak
    % set hooks for page??
     \lot_page_before\makebox[\lot_page_number_width][r]
      {
        \exp_after:wN \cs:w \exp_after:wN \lot_page_font_size \cs_end:
        \exp_after:wN \cs:w \exp_after:wN \lot_page_font_weight \cs_end: 
        \exp_after:wN \cs:w \exp_after:wN \lot_page_font_family \cs_end:
        \exp_after:wN \cs:w \exp_after:wN \lot_page_font_shape \cs_end:
       \hss#2
      }\lot_page_after
     
    \par
  }  
\ExplSyntaxOff  
%    \end{macrocode}

% \chapter{Handling Footnotes and Endnotes}
%
% \precis{Handling of Footnotes and Endnotes.}
%
% Keeping up with the spirit of the package, we now
% have a go at footnotes and endnotes. This is a difficult
% topic, with many packages and a diverse way of handlingg
% things.
% TO DO STORE IN PREHOOKS
% AND POST HOOKS
%
%    \begin{macrocode}
\cxset{endnotes package/.code ={\gdef\endnotes@cs{#1}%
                   \RequirePackage{\endnotes@cs}%
                }%
}%
\cxset{endotes package/.default=pagenote}
\cxset{endnotes package=pagenote}%
%
%    \end{macrocode}
%
%   This also has a number of other packages loaded
%
%
% \chapter{Handling Images}
%
% \precis{Commands for laying out complex pages composed primarily of images.}
%
% \section{Creating image page templates}
%
% We now develop a method to produce variable environments
% that can include images in a page. We start using designs
% that incorporate two columns, as shown on 
% Page~\pageref{krollcode}.
%
% {miniwidthi}
% {miniwidthii}
% {sepmainhorizontal}
%    \begin{macrocode}
\global\newlength{\miniwidthi}
\global\newlength{\miniwidthii}
\global\newlength{\sepmainhorizontal}
\def\tinyskip{\vskip2pt}
%    \end{macrocode}
% 
% 
% 
%    \begin{macrocode}
\newenvironment{leftcolumn}{}{}
\newenvironment{rightcolumn}{}{}

\newlength\offsetfromright
\setlength\offsetfromright{0em}
%    \end{macrocode}
%
% {onelinecaption} The oneline caption
% is the description that goes underneath images that
% unlike figures, they are not described in the text.
%    \begin{macrocode}
\newcommand\onelinecaption[2][]{%
    \setlength\offsetfromright{0em}%
    \bgroup%
        \vskip0pt plus1pt minus1pt %
        \reset@font
        \sffamily
        \bfseries%
        \footnotesize%
        \hfill\hfill#2\hbox to \offsetfromright{}%
     \egroup%
}
%    \end{macrocode}
% 
% 
% {onelineheader} This macro takes one parameter
%   and styles the main header.
%    \begin{macrocode}
\long\def\onelineheader#1{%
 \vspace{1.5\baselineskip}%
 {\sffamily{\bgroup\LARGE\bf \mbox{#1}\egroup}%
 \vspace{0.5\baselineskip}}%
}
%    \end{macrocode}
% 
%    \begin{macrocode}
\newcommand\byline[2][]{\small{\bfseries#1}#2}
 \newcommand\MainHeader[1]{{\leavevmode\par\centering \textrm{\fontsize{50pt}{65pt}\selectfont #1}\par\vspace{1cm}}}
 \newcommand\MainHeadera[1]{{\leavevmode\par\centering \textrm{\fontsize{30pt}{42pt}\selectfont #1}\par\vspace{1cm}}}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\aheader#1{\footnotesize \textbf{SELF-PORTRAIT}#1}
 \renewenvironment{leftcolumn}[1]{%
        \begin{minipage}[b]{\miniwidthi} #1}{\end{minipage} \hspace{\sepmainhorizontal}}%
    \renewenvironment{rightcolumn}[1]{%
        \begin{minipage}[b]{\miniwidthii} #1}{\end{minipage}}%
\def\starttemplate#1{%
  %% we now calculate some of the parameters
%% required
    \setlength\miniwidthi{0.3\textwidth}%
    \setlength\miniwidthii{0.67\textwidth}%
    \setlength\sepmainhorizontal{0.03\textwidth}%
   %
   %
%% Create environments for convenience
   %% Create right column environment
}
 \def\stoptemplate{}
%
%% Defining kroll style
  %% We need to find a way to define the templates
%% We will assume that images have been saved in a database
%% image@file
%% image@caption
%% this is a must to avoid long typing and keep the environments
%% short
\fboxsep=0pt
\fboxrule=1pt
\define@key{img}{width}[1cm]{\def\img@width{#1}}
\define@key{img}{height}{\def\img@height{#1}}
\define@key{img}{offsetx}{\def\img@offsetx{#1}}
\define@key{img}{offsety}{\def\img@offsety{#1}}
\define@key{img}{border}{\def\img@border{#1}}
\define@key{img}{padding}{\def\img@padding{#1}}
\define@key{img}{style}{\def\img@style{#1}}
\define@key{img}{bottommargin}{\def\img@bottommargin{#1}}
\define@key{img}{keepaspectratio}{\def\img@keepaspectratio{keepaspectratio}}
\define@key{imgpg}{pagestyle}{\def\imgpg@pagestyle{#1}}
%% Set defaults for all keys
\setkeys{img}{offsetx=1sp, offsety=0pt,width=3cm, keepaspectratio=keepaspectratio,
                      border=0pt, padding=0pt,bottommargin=0pt}
%% Create the command graphic
\newlength\tempal
%%
%% We create a new command to place images 
\newcommand\putimage[2][0pt]{%
%% Set the keys
\setkeys{img}{#1}%
\setlength\fboxrule\img@border%
\setlength\fboxsep\img@padding%
\ifdim\img@offsety=0pt% 
\else%
\vspace*{\img@offsety}%
\fi%
\hskip\img@offsetx%
\setlength{\tempal}{\img@width}
\fboxsep=1pt
\def\setcaption{\captionof{figure}{This is the caption for the figure\lorem}}%
\begin{minipage}{\textwidth}%
\fbox{\includegraphics[width=\textwidth]{#2}}%
\end{minipage}
}%\vspace*{\img@bottommargin}}%
%    \end{macrocode}
%    \begin{macrocode}
\ifUNICODE
    \RequirePackage{unicode-math}
    \setmathfont{xits-math.otf}
\fi    
%    \end{macrocode}
%
% 
% \clearpage
% 
% ^^A\newgeometry{top=0.5cm, bottom=1cm, left=1cm, right=1cm,
%   ^^A            marginparsep=0cm, marginpar=0pt}
% 
% \clearpage 
% \newpage
%
% \hrule
% \mbox{}
%    
% \label{krollcode}
% \renewenvironment{leftcolumn}{%
%   \minipage[b]{.3\textwidth}%
%  }{\endminipage}\hspace*{0cm}%
% 
% \starttemplate{kroll}%
% \vspace*{-.8cm}
% \hspace*{-1cm}\begin{leftcolumn}%
%   \MainHeader{Leon\\[15pt] Kroll}
%   \putimage[width=0.5\linewidth]{krollportrait.jpg}\par
%   \aheader{shows Kroll at 59. Says he. ``Painting is 
%             fascinating'' even when motif my own mug.}
% \end{leftcolumn}%
% \begin{minipage}[b]{0.8\textwidth}%
%   \includegraphics[width=\linewidth]{nudeback.jpg}
%       \onelinecaption{{\resizebox{\linewidth}{5.5pt}{\bfseries \hfill NUDE \hfill BACK \hfill SHOWS \hfill  A \hfill DANCER \hfill WHOSE \hfill BACK \hfill SAYS \hfill KROLL, \hfill HAS \hfill BEAUTIFUL \hfill PLANES }}\par}
%       \onelineheader{THE DEAN OF U.S. NUDE-PAINTERS}
%      \begin{multicols}{2}
%      \small
%      \lettrine{A}{t the} age of 63 when businessmen are thinking of retiring Leon Kroll according to Life Magazine was having the busiest time of his life, just doing what comes naturally.  \lorem\lorem
%      \end{multicols}
%   \end{minipage}
%\stoptemplate
% 
%
% \newpage
%
%\starttemplate{kroll}
%    \begin{minipage}[b]{0.3\textwidth}
%       \MainHeadera{Sandro Botticelli}
%       \includegraphics[width=1.0\linewidth]{botticelli-34.jpg}\par
%       \byline[BOTTICELLI ]{ painted hundreds of portraits. He is famous for his `Young Woman' series. Even in his larger compositions, he took extreme care of the details of women's faces.}
%   \end{minipage}\hspace*{0.2cm}
%   \begin{minipage}[b]{0.67\textwidth}
%       \putimage[width=\linewidth]{youngwoman.png}\par
%       \tinyskip
%       \onelinecaption{YOUNG WOMAN}\par
%       \onelineheader{SADRO BOTTICELLI'S PORTRAITS}
%      \begin{multicols}{2}
%      \small
%      \lettrine{A}{t the} age of 63 when businessmen are thinking of retiring leon Kroll according to Life Magazine was having the busiest time of his life, just doing what comes naturally.  \lorem\lorem
%      \end{multicols}
%    \end{minipage}
%\stoptemplate
%
%
% ^^A\newgeometry{top=1cm,left=1cm,right=1cm,bottom=1cm}
% \newtheorem{process}{Algorithm}
% \begin{process}
% Test exam
% \end{process}
%\clearpage
%

% \appendix
% \cxset{
%  chapter name = Appendix,
%  section numbering prefix = \thechapter.}
%  
% \chapter{MWE and Testing Macros}
%
% As far as LaTeX is concerned, there is nothing special in styling an appendix. It is either a chapter or a section with a different name. This name in order to allow internationalization is called \lstinline{\appendixname}.
%\bigskip
%
%\begin{tcolorbox}[width=\linewidth]
%\begin{lstlisting}
%\newcommand\appendix{\par
%  \setcounter{chapter}{0}%
%  \setcounter{section}{0}%
%  \gdef\@chapapp{\appendixname}(*@\footnote{The actual literal used for   \textbackslash{appendixname} is defined later on, so that you can customize the language}\label{appendixname}@*)
%  \gdef\thechapter{\@Alph\c@chapter}
%}
%\end{lstlisting}
%\end{tcolorbox}
%\medskip
%
%The code above is only a simplified version of the command. One might need to add more formatting information such as resetting equation numbers, tables and figures and any special floating environments that have their own numbering.
%
%\begin{tcolorbox}[width=\linewidth]
%\begin{lstlisting}
%\renewcommand\appendix{\par
%                \stepcounter{chapter}
%                \setcounter{chapter}{0}
%                \stepcounter{section}
%                \setcounter{section}{0}
%                \setcounter{equation}{0}
%                \setcounter{figure}{0}
%                \setcounter{table}{0}
%                \setcounter{footnote}{0}
%  \def\@chapapp{\appendixname}%
%  \renewcommand\thechapter{\@Alph\c@chapter}}
%\end{lstlisting}
%\end{tcolorbox}
%
%  
%
%  %%%% END OF PACKAGE
%\iffalse
%</package>
%\fi
%
% \iffalse
%<*settings>
% \fi
%% Some settings
%    \begin{macrocode}
\cxset{nag keys = {l2tabu,%
                   orthodox}}
\cxset{onlyamsmath keys = {warning}}
%%%%

%    \end{macrocode}
% \iffalse
%</settings>
% \fi
% \iffalse
%<*DEFAULTS>
% \fi
% title related settings
%    \begin{macrocode}    
%% Title related settings
 \cxset{title padding-top=0pt}
 \cxset{title padding-right=0pt}
 \cxset{title padding-bottom=0pt}
 \cxset{title padding-left=0pt}
%    \end{macrocode}    
% \iffalse
%</DEFAULTS>
% \fi
%
%
% \Finale

% \newpage
%
% \section{List of Packages and Usage Statistics}
%
% Table~\ref{tbl:listofpaks} provides a list of the packages loaded as default by |phd|.
% The column describing usage statistics
% is from \url{http://arxmliv.kwarc.info/package_usage.php}. It is by no means an
% indication of overall popularity, but I have used these statistics as an
% guide in selecting what packages to include here in order to at least cover
% the scientific side well.
%
% \input{packages-table}
% \label{tbl:listofpaks}
%
% \bibliography{phd}
% ^^A\printindex
\endinput

