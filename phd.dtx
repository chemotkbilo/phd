% \iffalse meta-comment
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
phd --- a package to shorten preambles
E-mail: yannislaz@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------
This file provides a phd for defining a class.
%</readme>
%<*readmemd>
###The `phd` LaTeX2e package

The `phd` latex package and the class with the same name provide
convenient methods to create new styles for books, reports
and articles. It also loads the most commonly used packages 
and resolves conflicts.

This work consists of the file  `phd.dtx`,
and the derived files   `phd.ins`,  `phd.pdf`, and `phd.sty`.

###Installation

run
          phd-lua.bat on windows
           pdflatex phd.dtx
           makeindex -s gind.ist -g phd 

If you have any difficulties with the package come and join us at
http://tex.stackexchange.com and post a new question or
add a comment at http://tex.stackexchange.com/a/45023/963.
or send me a message at  yannislaz at gmail.com

### Documentation

The package was written using the `doc` and `docscript` packages,
so that it is self documented in a literary programming style. 
The .pdf is a fat document, providing over fifty book styles (the
equivalent of classes) plus there is a lot of write-up on the inner
workings of TeX and LaTeX2e. However, you don't need to know much
to use it.

      \usepackage{phd}
      \input{style13}

All choices, are made via an extended key-value interface. 
Although not a compliment, it resembles CSS and the keys are a bit verbose but
attributes are easy to change and have a consistent and easy to remember interface.

To set or add a key we only use one command:

      \cxset{chapter name font-size: Huge,
             chapter number font-size: HUGE} 

### Future Development

This is still an experimental version, but I will retain the
interface in future releases. There is a large amount of
work still to be carried out to improve the template styles
provided, to test it more thoroughly and to add a number of
improvements in the special designs. At present I estimate
that I have completed about 70% of the work that needs
to be done.

__The package as it stands is not production stable.__ 


%</readmemd>
%
%<*TODO>
1. On final round add pkg options. This was left as last in order not to solve problems by adding
    options. Too many options are not a good User Interface.
2.  Finish symbol management, both text and math. Math already 60% incorporated.
3.  Better integration of indexing commands.   
4.  Revisit layout manager for Chapters. Broke again in tests.
5.  Docs. Add all references.
6.  Incorporate phd class for more flexibility.
7. Improve package manager.
8. Group script loading for better font management.
9. General font management to relook it again.
10. Add all style sections (about 100 already prepared). Once they
     are all working issue beta version.
%</TODO>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
phd --- A package to beautify documents.
E-mail: yannislaz@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------
\endpreamble
%\BaseDirectory{C:/users/admin/my documents/github/phd}
%\usedir{MWE}
\generate{\file{\jobname.sty}{
  \from{\jobname.dtx}{package}
  \from{phd-pkgmanager.tex}{PKG}
  %\from{phd-sections.dtx}{SECT}
  %\from{phd-lowersections.dtx}{LSECT}
  %\from{phd-specials.dtx}{SPECIAL}
%  \from{phd-toc.dtx}{TOC}
%  \from{phd-docmacros.tex}{DOCS}
  \from{phd-images.dtx}{images}
  %\from{phd-runningheads.dtx}{RH}
  \from{phd-epigraphs.dtx}{EPI} 
  \from{phd-logos.dtx}{LOG}
  \from{hyphenation.dtx}{hyphen}
}}
\generate{
  \file{MWE-02.tex}{\from{minimals.dtx}{MWE-02}}
  \file{MWE-03.tex}{\from{minimals.dtx}{MWE-03}}
  \file{defaults.tex}{\from{minimals.dtx}{DEFAULTS}}}
\generate{
  \file{test-tufte.tex}{\from{minimals.dtx}{test-tufte}}
  \file{test-memoir.tex}{\from{minimals.dtx}{test-memoir}}
  \file{test-scrartcl.tex}{\from{minimals.dtx}{test-scrartcl}}
  \file{test-algorithms.tex}{\from{minimals.dtx}{test-algorithms}}
  \file{test-hyphenation.tex}{\from{minimals.dtx}{test-hyphenation}}
  \file{settings.tex}{\from{minimals.dtx}{settings}}
  \file{test-spacing.tex}{\from{minimals.dtx}{test-spacing}}
  }
%\nopreamble\nopostamble
\generate{
  \file{hhhiero.la}{\from{hiero.dtx}{hhiero}}
}
%</install>

%<install>\endbatchfile
%<*internal>
%\usedir{tex/latex/phd}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble

\generate{
	\file{README.txt}{\from{\jobname.dtx}{readme}}
  }

\generate{
  \file{README.md}{\from{\jobname.dtx}{readmemd}}
}
\generate{
  \file{TODO.tex}{\from{\jobname.dtx}{TODO}}
}
\generate{
  \file{MWE-01.tex}{\from{\jobname.dtx}{MWE-01}}
}

\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
 
\immediate\write18{makeindex -s gglo.ist -g phd.gls phd.glo}  %needs checking from trivfloat
\immediate\write18{makeindex -s gind.ist -g phd.ind phd.idx} %needs checking from Josephâ€™s trivfloat
%</internal>
%<*driver>

%\listfiles
%gdef\@onlypreamble{} % TO BE REMOVED NEEDED FOR TUTS
\documentclass[twoside,11pt,a4paper]{ltxdoc}

\makeatletter
%\usepackage{pkgindoc}
%\usepackage{phdfilecontents}
%\gdef\@notprerr{supress error for commands only in preamble}
%\def\@eha{}
\let\@notprerr\relax
\let\sidenote\footnote
\def\partname{Part}
\makeatother
%
\usepackage[bottom=2cm]{geometry}
\savegeometry{std}

% \usepackage[style=mla]{biblatex}
\usepackage{phd}
\usepackage{fontspec}
%\usepackage{phd-lowersections}
\usepackage{phd-runningheads}
%\usepackage{phd-toc}

%\usepackage{pkgindoc}             %%% danger
\sethyperref
\makeindex
\begin{document}
\let\bold\bfseries

\frontmatter
\tableofcontents
\listoffigures
\listoftables
\mainmatter
\parindent1em
%\input{./sections/lowerlevelheadings}
\input{defaults-chapters}
\cxset{  headings odd header background color = white,
         headings even header background color = white,
   }
\DocInput{\jobname.dtx}
\DocInput{phd-logos.dtx}
%\DocInput{phd-pkgmanager.dtx}
\DocInput{phd-epigraphs.dtx}
%\DocInput{phd-runningheads.dtx}
%\DocInput{phd-lowersections.dtx}
\DocInput{phd-docmacros.tex}
%\DocInput{phd-sections.dtx}
\DocInput{phd-pkgmanager.dtx}
\bibliography{phd} 
 \PrintIndex
 \end{document}
 %
% \input{./sections/OTR}
% 
%</driver>
% \fi
% 
%  \CheckSum{0}
%  \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
%
% \changes{1.0}{2013/01/26}{Converted to DTX file}
%
% \DoNotIndex{\newcommand,\newenvironment}
% \GetFileInfo{phd.dtx}
% 
%  \def\fileversion{v1.0}          
%  \def\filedate{2012/03/06}
% \title{The \textsf{phd} package.
% \thanks{This
%        file (\texttt{phd.dtx}) has version number \fileversion, last revised
%        \filedate.}
% }
% \author{Dr. Yiannis Lazarides \\ \url{yannislaz@gmail.com}}
% \date{\filedate}
%
%
% 
% ^^A\maketitle
% 
% ^^A\frontmatter
%  ^^A\coverpage{./images/hine02.jpg}{Book Design }{Camel Press}
%  \newpage
% ^^A\secondpage
% \pagestyle{empty}
%
%
% 
%
%
% \pagestyle{headings}
% \raggedbottom
% ^^A \StopEventually{}
%  \OnlyDescription
%
%  ^^A\StopEventually{\printindex}
%<*package>
% \CodelineNumbered
% \pagestyle{headings}
% 
%
% \part{IMPLEMENTATION}
% 

% \chapter{Implementation Strategy}
%
% The implementation is divided into parts. Perhaps cutting,
% these parts into smaller packages might have been a better
% choice, but as the aim of the package is to minimize
% the loading of packages and let |phd| to handle
% this, it made more sense to me, anyway to keep everything
% together.
% 	
%
% \begin{description}
%
%  \item[The Package Manager] This section is responsible 
%       for pre-loading  packages, resolving conflicts and 
%       providing all interfacing commands.
%
%  \item[The Sectioning Layouts Manager] This section manages 
%       the design of complex layouts for sectioning commands.
%
%  \item [The Image Page Manager] This section manages the design of 
%       pages that consist primarily of images and complex
%		page layouts.
%
%  \item[Common Utilities] We provide a number of predefined commands
%		for macros that us and other people found useful.
%
%  \item[Scripts Manager] Manages the loading of scripts for the worlds 
%  laguages and scripts.
%
%  \item[MWE] The package generates a large number
%		of Minimum Working Examples that we use for testing. 
%		Most of them can also used as examples for training 
%		or self-study.
%
% \end{description}
%
% \section{Preliminaries}
%
% The basic requirement for the Package Manager is to load
% an adequate number of packages to enable the typesetting
% of a diverse number of large documents without requiring
% additional packages to be loaded by typical groups of
% authors. This has its advantages, but of course it does 
% slow things down. A long term objective is to select
% packages depending as an option on the type of document
% being prepared.
%
% \subsection{Preliminaries}
%
%    Standard file identification. We first announce the package 
%	 and require that it be used with \LaTeX2e. \FIRE
%
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1994/12/01]%
\RequirePackage[2014/05/01]{latexrelease}
\ProvidesPackage{phd}[2015/1/13 v1.0 less preamble (YL)]%
\let\ltxtoday\today
%    \end{macrocode}

% Load the package \pkgname{fixltx2e} to update \LaTeX2e for various fixes. The package fixes a number things in the LaTeX2e kernel. Due to LaTeX's stability policy, these corrections have not been incorporated into the LaTeX2e kernel, but this package does things most people would agree are bugfixes. So to load this package is always recommended for newly created documents. The corrections have no commonalities, but the package's description has a nice summary:
%
%ensure one-column floats don't get ahead of two-column floats;
%correct page headers in twocolumn documents;
%stop spaces disappearing in moving arguments;
%allowing |\fnsymbol| to use text symbols;
%allow the first word after a float to hyphenate;
% cs{emph} can produce caps/small caps text;
%bugs in \cs{setlength} and \cs{flushbottom.}
% 
%    \begin{macrocode}
%\RequirePackage{fixltx2e}[2006/03/24]
% mock chapters where necessary
\@ifundefined{c@chapter}{%  
      \newcounter{chapter}
      \def\thechapter{\@arabic\c@chapter}
}{}
%    \end{macrocode}
% We load the \pkg{pgf} package early so we can use it for key management.
% We create a family for keys, unimaginatively named phd. 
% This might  change in the future.

% {pkgfamilyname}
% {cxset}
% {cxsetvalue}
% The macro \cmd{\cxset} is the workhorse of the package. It is used to define or to set options
% for styling documents and also offers other utilities.
%
%    \begin{macrocode}
\RequirePackage{expl3}
\RequirePackage{l3keys2e}
% 
\RequirePackage{morewrites}
\RequirePackage{pgf}      
\usepgfmodule{parser}%for svg     
\usepgflibrary{svg.path}%for futurelet and parser demo       
\def\pkgfamilyname{phd}
\pgfkeys{/\pkgfamilyname/.is family}   
\newcommand\cxset{\pgfqkeys{/\pkgfamilyname}} 
\def\cxkeydef#1#2{%
 \pgfkeyssetvalue{/\pkgfamilyname/#1}{#2}%
}
\def\cxvalueof#1{%
 \expandafter\pgfkeysvalueof{#1}%
}
%\RequirePackage{silence} gives errors with varwidth
 \hfuzz=999pt % reduce overfull hbox errors
 \hbadness=10000 % reduce underfull hbox errors
% 
%    \end{macrocode}

%
% \section{PACKAGE KEY MANAGEMENT}
% The package aims to be loaded with very few options, in order to minimize
% the learning curve and to improve on the User interface. It takes the approach
% that keys should remove functionality rather than add in order to allow the
% advanced user flexibility of use.
%    \begin{macrocode}
\newif\ifUNICODE \UNICODEfalse
\newif\ifASIANSCRIPTS\ASIANSCRIPTSfalse
\newif\ifMICROTYPE\MICROTYPEfalse
\newif\if@debug \@debugfalse

 \ExplSyntaxOn
 \bool_new:N \g_phd_microtype_bool
 \bool_set_false:N \g_phd_microtype_bool
 \bool_new:N \g_phd_unicodemath_bool
 \bool_set_false:N \g_phd_unicodemath_bool
 \bool_new:N \g_phd_asianscripts_bool
 \bool_set_false:N \g_phd_asianscripts_bool
 \bool_new:N \g_phd_debug_bool
 \bool_set_false:N \g_phd_debug_bool
 

 \cs_new:Nn \phd_tl_map_dbl:nN
   {
     \__phd_tl_map_dbl:Nnn #2 #1 \q_recursion_tail {}{} \q_recursion_stop
   }
 \cs_new:Nn \__phd_tl_map_dbl:Nnn
   {
     \quark_if_recursion_tail_stop:n {#2}
     \quark_if_recursion_tail_stop:n {#3}
     #1 {#2} {#3}
     \__phd_tl_map_dbl:Nnn #1
   }
 
 \cs_new:Nn \phd_keys_choices:nn
   {
     \cs_set:Npn \phd_keys_choices_fn:nn { \phd_keys_choices_aux:nnn {#1} }
     \use:x
     {
       \exp_not:N \keys_define:nn {phd}
      {
        #1 .choice: ,
        \phd_tl_map_dbl:nN {#2} \phd_keys_choices_fn:nn
     }
   }
 }
 
 \cs_new:Nn \phd_keys_choices_aux:nnn { #1 / #2 .code:n = { \exp_not:n {#3} } , }
 
 \phd_keys_choices:nn {microtype}
   {
     {on} {\bool_set_true:N \g_phd_microtype_bool  \MICROTYPEtrue}
     {off} {\bool_set_false:N \g_phd_microtype_bool  \MICROTYPEfalse}
     {true} {\bool_set_true:N \g_phd_microtype_bool  \MICROTYPEtrue}
     {false} {\bool_set_false:N \g_phd_microtype_bool  \MICROTYPEfalse}
   }
   
 \phd_keys_choices:nn {unicodemath}
   {
     {on} {\bool_set_true:N \g_phd_unicodemath_bool   \UNICODEtrue }
     {off} {\bool_set_false:N \g_phd_unicodemath_bool  \UNICODEfalse }
     {true} {\bool_set_true:N \g_phd_unicodemath_bool   \UNICODEtrue }
     {false} {\bool_set_false:N \g_phd_unicodemath_bool  \UNICODEfalse }
   }   
 
 \phd_keys_choices:nn {asianscripts}
   {
     {on} {\bool_set_true:N \g_phd_asianscripts_bool  \ASIANSCRIPTStrue}  
     {off} {\bool_set_false:N \g_phd_asianscripts_bool \ASIANSCRIPTSfalse}
     {true} {\bool_set_true:N \g_phd_asianscripts_bool  \ASIANSCRIPTStrue}  
     {false} {\bool_set_false:N \g_phd_asianscripts_bool \ASIANSCRIPTSfalse}
     
   }  
   
 \phd_keys_choices:nn {debug}
   {
     {on} {\bool_set_true:N \g_phd_debug_bool  \@debugtrue}  
     {off} {\bool_set_false:N \g_phd_debug_bool \@debugfalse}
     {true} {\bool_set_true:N \g_phd_debug_bool  \@debugtrue}  
     {false} {\bool_set_false:N \g_phd_debug_bool \@debugfalse}
   }       

\keys_define:nn {phd}   
 {
   languages .tl_gset:N = \phd_languages_tl 
 }
 
\keys_define:nn { phd }
  {
     asianscripts .default:n = on,
     debug        .default:n = on, 
     languages .default:n   = english,
 }
   
\ProcessKeysOptions {phd}

\ExplSyntaxOff
%    \end{macrocode}
 
% 
%
%    \begin{macrocode}
\def\cx@optionlist{}
\def\cxuselibrary#1{\cxset{library/.cd,#1}}
%
% The library is added by inputting the file and setting the path accordingly.
\def\cx@add@library#1#2{%
  \cxset{library/#1/.code={\@ifundefined{cxlibrary@#1@loaded}{\input #2}{}}}%
  \DeclareOption{#1}{\edef\cx@optionlist{\cx@optionlist,#1}}%
}
%    \end{macrocode}
%
% \section{PGF Key Handlers}
% 
% One of the greateset ideas in key management was pgf's handlers.
% New handlers can be added in quite easily and they are very versatile in
% this respect.
%
% \subsection{Font family handler}
% This handler first checks if the font-family has been supplied as a
% list. In this case it will call check font and pick the first available
% font.
%    \begin{macrocode}
\ExplSyntaxOn

\clist_new:N \allowed_font_family_options
\clist_gset:Nn \allowed_font_family_options 
  {
    sffamily,rmfamily,ttfamily, normal,italic,oblique,
    itshape,slshape,upshape,sans-serif,serif,monospace,
    inherit,auto,normalfont
  }
% create aliases for some of the names to match those commonly
% used in css  NEEDS TESTING 
\cs_gset_eq:cc {bold} {bfseries}
  
  \pgfkeys{/handlers/.font-family~in/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \clist_if_in:NnTF \allowed_font_family_options {##1 } 
          {
           \gdef #1 {##1}
          } 
          {
            \gdef #1 {\sffamily}
          }
      }
  }   
   \pgfkeys{/handlers/.fontfamily/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \tl_set:Nn\l_tmpa_str:N {##1}
           \str_case_x:nnTF {##1}  
             {
               { none           } {   \cs_gset:cpn  {#1}   { \normalfont }     } 
               { rmfamily      } {   \cs_gset:cpn  {#1}  {  \rmfamily}           } 
               { serif             } {   \cs_gset:cpn  {#1}  { \rmfamily}          } 
               { sans-serif     } {    \cs_gset:cpn {#1}   {\sffamily }            } 
               {sffamily         } {   \cs_gset:cpn {#1}    {\sffamily}           }
               { ttfamily        } {   \cs_gset:cpn  {#1}   { \ttfamily }    } 
              }
             {                         }
             {   \cs_gset:cpn {#1} {  \normalfont    }              }
     }   
   }    
   
\ExplSyntaxOff    
%    \end{macrocode}
%
%  \subsection{Font face handler}  
%  The handler |.font-face in| creates a command for activating a font face
%  and also activates if it was not ? 
%  \begin{docCommand}{title_font_face} {\meta {font name}}
%   This peculiar handler is a store in that can be used for all elements. We defined
%   them as \meta{element}|_font_face|. This took a bit long to figure out. The
%   |allowed_font_face_options| will eventually be linked with the font loading mechanism.
%  \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn  
\clist_new:N \allowed_font_face_options
\clist_gset:Nn \allowed_font_face_options 
  {
    sffamily,rmfamily,ttfamily, normal,italic,oblique,
    itshape,slshape,upshape,sans-serif,serif,monospace,
    inherit,auto,tiresias,arial,pan
  }
% creat aliases for some of the names to match those commonly
% used in css.    
  
  \pgfkeys{/handlers/.font-face~in/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
         \IfNoValueTF {##1} {\@empty} 
           {
            \cs_if_exist:NTF { #1 } 
              { \gdef#1 {##1} }
              { \gdef#1 {\rmfamily} } %add error trapping as well
           }
          }
               
  }        
  
 \ExplSyntaxOff 
%    \end{macrocode}
% \subsection{Font face handler}
%    \begin{macrocode}
\ExplSyntaxOn
 \pgfkeys{/handlers/.set~font-face/.code=\pgfkeysalso{\pgfkeyscurrentpath/.code=
           \def\tempa{##1}%
           \def\tempb{normal}%
           \def#1{##1}%
           \ifx\tempa\tempb%
              \def#1{\normalfont}%
           \fi%
   }}%   
\ExplSyntaxOff
%    \end{macrocode}
%
% \subsection{Fonts style handler}
%  This controls the input for font-shape or font-style, which they are equivalent.
%    \begin{macrocode}
\ExplSyntaxOn
\clist_new:N \allowed_font_style_options
\clist_gset:Nn \allowed_font_style_options {normal,upshape,itshape,oblique,slshape,italic}
% create some aliases also for these options.
\cs_gset_eq:cc {normal}{upshape}  
\cs_gset_eq:cc {italic}{itshape}
\cs_gset_eq:cc {oblique}{slshape}

\pgfkeys{/handlers/.font-style~in/.code =
    \global\let\bold\bfseries 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \clist_if_in:NnTF \allowed_font_style_options {##1 } 
          {
           \gdef #1 {##1}
          } 
          {
            \gdef#1 {upshape} %Plus error message
          }
      }
  }  
  \pgfkeys{/handlers/.fontstyle/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \tl_set:Nn\l_tmpa_str:N {##1}
           \str_case_x:nnTF {##1}  
             {
               {normal    } { \cs_gset:cpn {#1} { \upshape   } }
               { upshape   } { \cs_gset:cpn {#1} { \upshape   } }  
               { itshape       } { \cs_gset:cpn {#1} { \itshape   } } 
               { italic       } { \cs_gset:cpn {#1} { \itshape   } } 
               { oblique      } { \cs_gset:cpn  {#1} { \slshape} } 
               { slshape      } { \cs_gset:cpn  {#1}  { \slshape} } 
%               { huge      } { \cs_gset:cpn {#1} {\huge } } 
%               { Huge      } { \cs_gset:cpn {#1} {\huge } } 
%               { HUGE     } { \cs_gset:cpn  {#1} { \HUGE } } 
%               { HHUGE  }  { \cs_gset:cpn  {#1} { \HHUGE } } 
%               { HHHUGE  }  { \cs_gset:cpn  {#1} { \HHHUGE } } 
              }
             {                         }
             {    \cs_gset:cpn {#1} {##1}                             }
      }
   }    
  
\ExplSyntaxOff  
%    \end{macrocode}
%  
%   \begin{docCommand}{title_font_weight}{\meta{font weight name}}
%     Handler for defining the font-weight of an element.
%   \end{docCommand}  
%   These are all very repetitive and could have been replaced by one
%   handler at the cost of obfuscating the code. 
%    \begin{macrocode}
\ExplSyntaxOn
\clist_new:N \allowed_font_weight_options
\clist_gset:Nn \allowed_font_weight_options 
  {
    normal,bold,bfseries,mdseries,none
  }
 \pgfkeys{/handlers/.font-weight~in/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \tl_set:Nn\l_tmpa_str:N {##1}
           \str_case_x:nnTF {##1}  
             {
               { none       } { \cs_gset:Npn #1 { empty             } } 
               { bold      } { \cs_gset:Npn #1 { bfseries} } 
               { normal  } { \cs_gset:Npn #1 { mdseries} } 
               { bfseries      } { \cs_gset:Npn #1 {bfseries } } 
               { mdseries  } { \cs_gset:Npn #1 { mdseries } } 
              }
             {                         }
             { \cs_gset:Npn #1 {empty} }
      }
}      
    \pgfkeys{/handlers/.fontweight/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \tl_set:Nn\l_tmpa_str:N {##1}
           \str_case_x:nnTF {##1}  
             {
               { none       } { \cs_gset:cpn {#1} { \mdseries   } } 
               { bold      } { \cs_gset:cpn  {#1} { \bfseries} } 
               { normal  } { \cs_gset:cpn  {#1}  { \mdseries} } 
               { bfseries      } { \cs_gset:cpn {#1} {\bfseries } } 
               { mdseries  } { \cs_gset:cpn  {#1} { \mdseries } } 
              }
             {                         }
             { \cs_gset:cpn {#1} {\mdseries} }
      }
   }   
\ExplSyntaxOff   
%    \end{macrocode}
%  The \texttt{font-size in} handler is defined next.
%  This can be set both as a command or a name.
%  
%  \begin{docCommand} {allowed_keys_font_size} {\meta{list of allowed keys}}
%    list with all allowed keys in the |phd system|
%  \end{docCommand} 
%
%  Coding this through |expl3| is such a pleasure and cut the previous code in half! 
%  The mavericks of the LaTeX3 Team pulled it off! It also
%  enables better error trapping and the allowed words can be configurable, one day!
%  For example if 38/52 is typed one can automatically set it to a specific size?
%  Could also allow say 10pt check in list if we have them and set it.
%  The keys auto, inherit, autoscale need development.
%
%  |auto| should scale one step down from parent element.
%  |inherit| takes the same value as the parent element
%  |autoscale| will fit the contents in the width of its container
%  box. (All three for next version)
%
%    \begin{macrocode}
\ExplSyntaxOn   
  
  \clist_new:N   \allowed_keys_font_size
  \clist_gset:Nn \allowed_keys_font_size 
    { 
      normal,tiny,footnotesize,small,scriptsize,
      large,Large,LARGE,
      huge,Huge,HUGE,HHUGE,
      HHHUGE,auto,inherit,
      autoscale,
    }
    
  \pgfkeys{/handlers/.font-size~in/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \clist_if_in:NnTF \allowed_keys_font_size {##1 } 
          {
           \cs_gset:Npn #1  {##1}
          } {normalsize}
      }
   }
 % for csname types  
    \pgfkeys{/handlers/.fontsize/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \tl_set:Nn\l_tmpa_str:N {##1}
           \str_case_x:nnTF {##1}  
             {
               {normal    } { \cs_gset:cpn {#1} { \normalfont   } }
               { small       } { \cs_gset:cpn {#1} { \small   } }  
               { scriptsize } { \cs_gset:cpn {#1} { \scriptsize   } }  
               { large       } { \cs_gset:cpn {#1} { \large   } } 
               { Large      } { \cs_gset:cpn  {#1} { \Large} } 
               { LARGE    } { \cs_gset:cpn  {#1}  { \LARGE} } 
               { huge      } { \cs_gset:cpn {#1} {\huge } } 
               { Huge      } { \cs_gset:cpn {#1} {\huge } } 
               { HUGE     } { \cs_gset:cpn  {#1} { \HUGE } } 
               { HHUGE  }  { \cs_gset:cpn  {#1} { \HHUGE } } 
               { HHHUGE  }  { \cs_gset:cpn  {#1} { \HHHUGE } } 
              }
             {                         }
             {    \cs_gset:cpn {#1} {##1}                             }
      }
   }    
\ExplSyntaxOff  
%    \end{macrocode}
% \subsection{Capitalization handler}
%  This handler is for making text upper or lower case. Took
%  a few tests to get it right! Will have to go to expl3 when
%  these work ok. \FIRE
%    \begin{macrocode}
\ExplSyntaxOn  
  \clist_new:N  \allowed_options_case 
  \clist_gset:Nn \allowed_options_case 
    { 
      lower,upper,none
    }
    
  \pgfkeys{/handlers/.case~in/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \tl_set:Nn\l_tmpa_str:N {##1}
           \str_case_x:nnTF {##1}  
             {
               { none       } { \cs_gset:Npn #1 { empty             } } 
               { lower      } { \cs_gset:Npn #1 { MakeTextLowercase } } 
               { lowercase  } { \cs_gset:Npn #1 { MakeTextLowercase } } 
               { upper      } { \cs_gset:Npn #1 { MakeTextUppercase } } 
               { uppercase  } { \cs_gset:Npn #1 { MakeTextUppercase } } 
               { upper case } { \cs_gset:Npn #1 { MakeTextUppercase } } 
             }
             {                         }
             { \cs_gset:Npn #1 {empty} }
      }
  }
  
\pgfkeys
 {/handlers/.case/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
         \str_case_x:nnTF {##1}  
             {
               { none       } { \cs_gset:cpn {#1} { \empty             } } 
               { lower      } { \cs_gset:cpn {#1} { \MakeTextLowercase } } 
               { lowercase  } { \cs_gset:cpn {#1} { \MakeTextLowercase } } 
               { upper      } { \cs_gset:cpn {#1} { \MakeTextUppercase } } 
               { uppercase  } { \cs_gset:cpn {#1} { \MakeTextUppercase } } 
               { upper~case } { \cs_gset:cpn {#1} { \MakeTextUppercase } } 
             }
             {                         }
             { \cs_gset:cpn #1 {\MakeTextLowercase} }
      }
  }  
  
 \pgfkeys
 {/handlers/.store/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
         \cs_gset:cpn {#1} {##1}
      }
  }   
\ExplSyntaxOff  
%    \end{macrocode}
% \subsection{Alignment handler}
%  This handler is for aligning text. We cater for all variations.
%    \begin{macrocode}
\ExplSyntaxOn  
  \pgfkeys{/handlers/.textalign/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \tl_set:Nn\l_tmpa_str:N {##1}
           \str_case_x:nnTF {##1}  
             {
               { none            } {  \cs_gset:cpn {#1} {}                          } 
               { left               } {  \cs_gset:cpn {#1} { \RaggedRight }   } 
               { RaggedLeft   } {  \cs_gset:cpn {#1} { \RaggedLeft  }    } 
               { raggedleft   } { \cs_gset:cpn {#1} { \raggedleft  } }
               { right              } {  \cs_gset:cpn {#1} {\RaggedLeft  }   } 
               { RaggedRight  } {  \cs_gset:cpn {#1} {\RaggedRight }  } 
               { raggedright  } {  \cs_gset:cpn {#1} {\raggedright }  } 
               { center            } {  \cs_gset:cpn {#1} {\Centering   }    } 
               { centre            } {  \cs_gset:cpn {#1} {\Centering   }    } 
               { centering       } {  \cs_gset:cpn {#1} {\centering   }     }
               { Centering       } {  \cs_gset:cpn {#1} {\Centering   }    }
               {flushleft           }{  \cs_gset:cpn {#1} { \flushleft   }         }
               {flushright        }{  \cs_gset:cpn {#1} { \flushright   }       }
             }
             {                          }
             { \cs_gset:cpn #1 {\empty} }
      }
  }
\ExplSyntaxOff  
%    \end{macrocode}
% 
% \subsection{On off general handlers}
%  This handler is for aligning text. We cater for all variations.
%    \begin{macrocode}
\ExplSyntaxOn  
  \pgfkeys{/handlers/.onoff/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \tl_set:Nn\l_tmpa_str:N {##1}
           \str_case_x:nnTF {##1}  
             {
               { on                 }  {   \cs_gset:cpn {#1} {##1}                          } 
               { off                 }  {   \cs_gset:cpn {#1} { ##1 }                       } 
               { true               }  {   \cs_gset:cpn {#1} { ##1  }                       } 
               { false              }  {   \cs_gset:cpn {#1} { ##1  }                       } 
             }
             {                          }
             { \cs_gset:cpn {#1} {empty} }
      }
  }
\ExplSyntaxOff  
%    \end{macrocode}

% \subsection{Shadow handlers}
%  This handler is for setting shadow keys in sectioning commands, using tcolorbox.
%    \begin{macrocode}
\ExplSyntaxOn  
  \pgfkeys{/handlers/.shadow/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \tl_set:Nn\l_tmpa_str:N {##1}
           \str_case_x:nnTF {##1}  
             {
               { on                 }  {   \cs_gset:cpn {#1} {drop~shadow}                          } 
               { off                 }  {   \cs_gset:cpn {#1} { no~shadow }                       } 
               { true               }  {   \cs_gset:cpn {#1} { drop~shadow  }                       } 
               { false              }  {   \cs_gset:cpn {#1} { no~shadow  }                       } 
             }
             {                          }
             { \cs_gset:cpn {#1} {##1} }
      }
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \section{Shadows}
% 
% Many components can be rendered with shadows. This can be done through the
% tcolorbox shadowing commands or directly through \tikzname. The way parameters
% are specified in both cases results in multi-argument keys, which is generally
% against the philosophy of the mark-up semantics of the |phd| package. Most
% of these keys required color specification and or size specification.
% 
% Since colors are linked to palettes, I decided that the color part would belong to
% the palette settings rather than the shadow keys. Also any sizing of shadows has been
% delegated to default macros. This simplifies the user interface tremendously. 
% Should a template designer wish to provide a more complicated shadow, this can be
% achieved through the style property of the element.
%
% Shadows are only available when the box rendering engine depend on tcolorbox. 
%
%    \begin{macrocode}  

\ExplSyntaxOn
 \pgfkeys
 {/handlers/.shadow/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
         \str_case_x:nnTF {##1}  
             {
               { none       }   { \cs_gset:cpn {#1} { {no~shadow}       } } 
               { drop~shadow  } { \cs_gset:cpn {#1} { drop~shadow       } }
               { drop~lifted~shadow  } { \cs_gset:cpn {#1} {{##1         }} } 
               { fuzzy~halo}           { \cs_gset:cpn {#1} {halostyle } }
             }
             {                         }
             { \cs_gset:cpn #1 {##1} }
      }
  } 
\ExplSyntaxOff  
%    \end{macrocode}  
% \subsection{Sectioning format handler}
%  This handler manages sectioning type formats. Not all of them are currently
%  defined.
%    \begin{macrocode}  
\ExplSyntaxOn
  \clist_new:N   \allowed_options_format
  \clist_gset:Nn \allowed_options_format 
    { 
      plain, block, display, runin, leftmargin,
      rightmargin, drop, wrap, frame, custom, inline, inmargin,
      hanginmargin
    } 
  \pgfkeys{/handlers/.format~in/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \clist_if_in:NnTF \allowed_options_format {##1 } 
          {
           \cs_gset:cpn {#1} {##1}
          } 
          {
             \cs_gset:cpn {#1}  {##1} %FIRE MUST CATER FOR SPECIALS
          } % to add that this is custom message and check if defined
      }
  }
\ExplSyntaxOff  
%    \end{macrocode}
%
%    \begin{macrocode}  
\ExplSyntaxOn
  \clist_new:N   \allowed_color_options
  \clist_gset:Nn \allowed_color_options 
    { 
      auto,palette,
    } 
  \pgfkeys{/handlers/.colorin/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \clist_if_in:NnTF \allowed_color_options  {##1 } 
          {
           \cs_gset:cpn {#1} {\color{##1}}
          } 
          {
           { \cs_gset:cpn {#1} {\color{##1}} } %FIRE MUST CATER FOR SPECIALS
          } % to add that this is custom message and check if defined
      }
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \subsection{Number format handler}
%
% \tcbdocmarginnote{U 3-07-2015}
%   This handler handles the definition of |\the|\meta{section} type commands. As
%   the first argument of the key handler is a command we need to remove the
%   |\the| part in order to define the counter correctly. One day we will
%   remove all \latexe's counters and use our own, then thsi would be unecessary.
%   as we need to gobble four tokens we need to define a |\use_v:nnnnn|, as
%   \pkgname{expl3} does not have one.
%   
% \begin{docCommand} {use_v:nnnnn} { \marg{arg1} \marg{arg2} \marg{arg3} \marg{arg4} \marg{arg4} }
%    Gobbles four arguments.
%  \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn 
  \cs_set:Npn \use_v:nnnnn #1#2#3#4#5 {#5}
   \cs_new:Npn \remove_the:#1
     {
       \exp_after:wN \use_v:nnnnn \token_to_str:N #1
     }
%    \end{macrocode}
% next we provide a function to remake the |the<name>| based on the
% key handler input.
%    \begin{macrocode}      
   \cs_gset:Npn \make_the_cmd: #1#2 
     {
       \cs_gset:Npn \countername { \remove_the:{#1} }
       \cs_gset:Npn #1 
         {
           \exp_after:wN \exp_after:wN \exp_after:wN #2
           \exp_after:wN \cs:w c@\countername\cs_end:
         }
    }  
%    \end{macrocode}
% In comparison to the mind twister above the key-handler is easily defined next
% and cuts quite a bit of code later.
%    \begin{macrocode}       
  \pgfkeys{/handlers/.numbering~in/.code = 
    
    \pgfkeysalso
      {  
        \pgfkeyscurrentpath/.code=
        \tl_set:Nn\l_tmpa_str:N {##1}
           \str_case_x:nnTF {##1}  
             {
               { none       } { \cs_gset:Npn #1 {}                     }
               { arabic     } { \make_the_cmd: {#1}{\@arabic}             } 
               { Alpha      } { \make_the_cmd: {#1}{\@Alph}               } 
               { alph       } { \make_the_cmd: {#1}{\@alph}               } 
               { Roman      } { \make_the_cmd: {#1}{\@Roman}              } 
               { roman      } { \make_the_cmd: {#1}{\@roman}              }
               { WORDS      } { \make_the_cmd: {#1}{\WORDS@cx}            }
               { Words      } { \make_the_cmd: {#1}{\Words@cx}            }
               { words      } { \make_the_cmd: {#1}{\words@cx}            }
               { ordinals   } { \make_the_cmd: {#1}{\ordinals@cx}         }
               { Ordinals   } { \make_the_cmd: {#1}{\ordinals@cx}         }
               { ORDINALS   } { \make_the_cmd: {#1}{\ORDINALS@cx}         }
               % add padzeroes later
             }
             {                         }
             { \cs_gset:Npn #1 {##1}   }
      }
  }
\ExplSyntaxOff  
%    \end{macrocode} 
% Here is our attempt to play nice with the three
% main TeX engines.
%
%    \begin{macrocode}
\RequirePackage{phdsort}%% to check
\RequirePackage{ifluatex}
\RequirePackage{ifxetex}
\def\ifengine#1#2#3{
  \ifxetex
    #1%
  \else
    \ifluatex
      #2%
    \else
      #3%
    \fi
\fi
}
%    \end{macrocode}
%
% We use \pkgname{luacode} and luatextra only if we are using LuaTeX. Many of the
% packages we load ourselves later in any case. We need to check this.
%    \begin{macrocode}
\ifluatex
  \RequirePackage{luacode}
  %\RequirePackage{luatextra}
\fi
%    \end{macrocode}
%
% \section{Front matter and backmatter}
%
% These are both provided by the classes but we intent to parameterize them
% so we redefine them.
%
% \subsection{Mainmatter and frontmatter options}

%    \begin{macrocode}
\ExplSyntaxOn
\newif\if@mainmatter \@mainmattertrue
\cxset{
  mainmatter~numbering/.is~choice,
  mainmatter~numbering/arabic/.code  = \cs_set:Npn \setpagenumbering
                                         {
                                           \pagenumbering{arabic}
                                         },
  mainmatter~numbering/roman/.code   = \cs_set:Npn \setpagenumbering
                                   	     { 
                                           \pagenumbering{roman}
                                         },
  mainmatter~numbering/Roman/.code   = \cs_set:Npn \setpagenumbering 
                                   	     {
                                   	       \pagenumbering{Roman}
                                   	     },
  }
\ExplSyntaxOff	
%
\cxset{mainmatter numbering = arabic}     
%  
%    \end{macrocode}
%
% \begin{docCommand}{frontmatter} { \meta{void}}
%  Handles all the preliminary settings for the frontmatter of a book. It
%  sets \refCom{@mainmatter} to false and handles page openings.   
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn \frontmatter 
  {
    %\cleardoublepage
    \@mainmatterfalse
    %\setpagenumbering%
  }
%    \end{macrocode}
% \begin{docCommand}{mainmatter} { \meta{void}}
% Handles all the preliminaries for the main matter of a document.    
% \end{docCommand}
%    \begin{macrocode}
\cs_gset:Npn \mainmatter
  {
     \cleardoublepage
      \@mainmattertrue
     \setpagenumbering
  }
       
\def\backmatter{\if@openright\cleardoublepage\else\clearpage\fi
      \@mainmatterfalse}
\ExplSyntaxOff      
%    \end{macrocode}      
% 
%
% \section{Font Manager}
%
% \subsection{Sizing}
% 
% \begin{docCommand}{lineskip} { \marg{dim}}
%   These are currently hybrids. 
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
  \dim_gset:Nn \tex_lineskip:D {1pt}
  \dim_gset:Nn \normallineskip {1pt}
  \cs_gset:Npn \baselinestretch {}
\ExplSyntaxOff
%    \end{macrocode}
%
%    \begin{macrocode}
\ExplSyntaxOn
%\newskip \phd@baseskip
%\skip_new:N \phd@theskip
%\skip_gset:Nn \phd@theskip {2pt}
\newskip\phd@baseskip
\newskip\phd@theskip
\def\phd@setskips#1{\phd@theskip #1\relax%
  \abovedisplayskip      0.50\phd@theskip \@plus 0.25\phd@theskip \@minus 1\p@%
  \belowdisplayskip      \abovedisplayskip
  \abovedisplayshortskip 0.25\phd@theskip \@plus 0.25\phd@theskip
  \belowdisplayshortskip 0.50\phd@theskip \@plus 0.25\phd@theskip \@minus 1\p@%
}
\def\phd@setlists#1{\phd@theskip #1\relax%
 \def\@listi{\leftmargin\leftmargini
  \topsep  0.5\phd@theskip \@plus 2\p@ \@minus 1\p@%
  \parsep  \z@
  \itemsep \z@}}


%
\ExplSyntaxOff  
%
%
% common Sizes  
\newcommand{\@viiiptv}{8.5}%                  8.5pt

\DeclareMathSizes{\@viiiptv}{\@viiiptv}{\@vipt}{\@vpt}

\newcommand{\@ixptv}{9.5}%                    9.5pt

\DeclareMathSizes{\@ixptv}{\@ixptv}{\@viipt}{\@vpt}

\newcommand{\@xptv}{10.5}%                    10.5pt (normalsize)

\DeclareMathSizes{\@xptv}{\@xptv}{\@viipt}{\@vpt}

\newcommand{\@xvipt}{16}%                     16pt size

\DeclareMathSizes{\@xvipt}{\@xvipt}{\@xiipt}{\@xpt}

\newcommand{\@xviiipt}{18}%                   18pt size

\DeclareMathSizes{\@xviiipt}{\@xviiipt}{\@xiipt}{\@xpt}

\renewcommand\tiny{\@setfontsize\tiny\@vpt{6}\phd@setskips\phd@setlists}
%   
% Similar to cambridge class
% font sizes for cambridge7A, 228x152mm
% \tiny                        5/6\\
% \footnotesize                8/9\\
% \large (B headings)         11/14\\
% \Aheadsize                  12/14\\
% \Large                      12/17\\
% \LARGE                      16/19 (chaptertitle size)\\
% \let\Huge\huge              18/24 (chapternumber size)\\
% \scriptsize                  7/8\\
% \let\tablesize\small         9/10\\
% \let\enotesize\small         9/10\\
% \smallish                    9/11\\
% \normalsmall                10/12\\
% \let\listsize\normalsize    10/13\\
%     \end{macrocode}
% \begin{docCommand}{footnotesize} {\meta{void}}
%  Sets the font to the footnotesize
% \end{docCommand}
%    \begin{macrocode}
%\renewcommand \footnotesize
%  {
%    \phd@baseskip 10.5pt%
%    \@setfontsize\footnotesize{8pt}{10.5}
%    \phd@setskips\phd@setlists
%  }
%    \end{macrocode}
%    \begin{macrocode}
%\renewcommand\large{\@setfontsize\large{11}{14}\phd@setskips\phd@setlists}
%
%\newcommand\Aheadsize{\@setfontsize\Aheadsize{11}{13}\phd@setskips\phd@setlists}
%
%\renewcommand\Large{\@setfontsize\Large{12}{17}\phd@setskips\phd@setlists}
%
%\renewcommand\LARGE{\@setfontsize\LARGE{16}{19}\phd@setskips\phd@setlists}
%
%\renewcommand\huge{\@setfontsize\huge{18}{24}\phd@setskips\phd@setlists}
%
%
%\def\huge{\@setfontsize\Huge{24}{26}}
\def\HUGE{\@setfontsize\Huge{38}{47}}
\def\HHUGE{\@setfontsize\HHUGE{58}{67}}
\def\HHHUGE{\@setfontsize\HHHUGE{94}{105}}
%
%\newcommand\smallverbatimsize{\phd@baseskip 11.5pt%
%    \@setfontsize\smallverbatimsize{10.5}{11.5}\phd@setskips\phd@setlists}
%    
%    
%  \renewcommand\scriptsize{%
%    \@setfontsize\scriptsize\@viipt{8}\phd@setskips\phd@setlists}
%  \newcommand\figcaptionsize{\phd@baseskip 10.5pt%
%    \@setfontsize\figcaptionsize{8}{10.5}\phd@setskips\phd@setlists}
%  
%  \let\smallertablesize\figcaptionsize
%  
%  
%  
%  \renewcommand\small{\phd@baseskip 10pt%
%    \@setfontsize\small\@ixpt{10}\phd@setskips\phd@setlists}
%  
%  \let\indexsize\small
%  
%  \newcommand\enotesize{\phd@baseskip 11.5pt%
%    \@setfontsize\enotesize\@ixpt{11.5}\phd@setskips\phd@setlists}
%  
  \newcommand\smallish{\phd@baseskip 11pt%
    \@setfontsize\smallish\@ixpt{11}\phd@setskips\phd@setlists}
%  
  \let\bibliosize\smallish
%  
%  \newcommand\tablesize{\phd@baseskip 11pt%
%    \@setfontsize\tablesize\@ixptv{11}\phd@setskips\phd@setlists}
%  
%  \newcommand\exercisesize{\phd@baseskip 12pt%
%    \@setfontsize\exercisesize\@ixptv{12}\phd@setskips\phd@setlists}
%  
%  \newcommand\normalsmall{\phd@baseskip 12pt%
%    \@setfontsize\normalsmall\@xpt{12}\phd@setskips\phd@setlists}
%  
  \newcommand\verbatimsize{\phd@baseskip 13pt%
    \@setfontsize\verbatimsize\@xpt{13}\phd@setskips\phd@setlists}
%  
%  \newcommand\xheadsize{\phd@baseskip 12pt%
%    \@setfontsize\xheadsize\@xptv{12}\phd@setskips\phd@setlists}
% 
%   \newcommand\largerstill{\phd@baseskip 14pt%
%    \@setfontsize\largerstill\@xiipt{14}\phd@setskips\phd@setlists}
%    
%  \renewcommand\normalsize{\phd@baseskip 13.5pt%
%    \@setfontsize\normalsize{10.5}{13.5}\phd@setskips{\phd@baseskip}
%    \let\@listi\@listI}
%  \let\listsize\normalsize
%%
%    \end{macrocode}
% \normalsize\selectfont

% \subsection{Loading fontspec} We load the \pkgname{fontspec} package \citep{fontspec} both
% for XeTeX or LuaTeX.
% The font manager needs to first distinguish  between the various
% engines used, and secondly needs to use the right packages. This is a bit of
% a kludge at the moment.
%
%    \begin{macrocode}
\cxset{document font/.code 2 args=\setmainfont[#2]{#1}}
%
\RequirePackage{expl3}
  \RequirePackage{xcoffins}
  \RequirePackage{xtemplate}
  \RequirePackage{l3sort}
  
\def\defaultfontsxetexluatex{% 
  
%  
  \RequirePackage[no-math]{fontspec}
%   \setmainfont[
%      BoldFont={timesbd.ttf},
%      ItalicFont={timesi.ttf},
%      BoldItalicFont={timesbi.ttf},
%      SmallCapsFont={times.ttf},
%                      ]{times.ttf} % on windows
   \setmainfont[
      BoldFont={timesbd.ttf},
      ItalicFont={timesi.ttf},
      BoldItalicFont={timesbi.ttf},
      SmallCapsFont={times.ttf},
                      ]{times.ttf}                     
 \setsansfont{Tex Gyre Heros}% work okay with palatino
 \setmonofont[Scale=.95]{consola.ttf}
% 
 \newfontfamily\verbatimfamily[Scale=0.95]{consola.ttf}
 \DeclareTextFontCommand{\texttt}{\verbatimfamily} %CHANGED
 \newfontfamily\arial{Arial}
 \let\pan\arial
 \let\unicodenumberfam\arial
 
 \newfontfamily\smallcps[Scale=0.8]{Arial}
 
 \parskip3.5pt\parindent1em
 
 \def\phd@font@times{times.ttf}
 
% \usepackage{unicode-math}
%\setmathfont{texgyrepagella-math.otf}
%\setmathfont{texgyrepagella-math.otf}
%\setmathfont{Asana-Math.otf}
 % \cxset{document font={\phd@font@times}{Scale=1.0}} GIVES ERRORS for bolfd etc
  
 \newfontfamily\arabicfont[Script=Arabic]{Amiri}
 \newfontfamily\arabicfonttt[Script=Arabic,Scale=.75]{DejaVu   Sans Mono}
}  
%    \end{macrocode}
%
%  The management of default fonts for scripts and languages is attempted here first. 
%  This is a difficult topic, as the user might not have the fonts installed in their system.
%  If polyglossia is used it checks that language<languagename>  is defined, hence we
%  need to define |\arabicfont|  for the arabic language etc. 
%  
%    \begin{macrocode}  
%
\ifengine{\defaultfontsxetexluatex}{\defaultfontsxetexluatex}{}
%    \end{macrocode}
%
%  We need to cater for LTR without changing basic commands of XeTeX or eTeX.
%
%    \begin{macrocode}
\ifluatex
   \RequirePackage{luaotfload}
   \let\TeXXeTstate\@gobble
   \def\setRTL{\luatextextdir TRT}%\pardir TRT\textdir TRT}
   \def\endLTR{\luatextextdir TLT}%{\pardir TLT\textdir TLT}
   \let\beginR\setRTL
   \let\endR\endLTR
\fi
%    \end{macrocode}
%
%  \subsection{Creating a Small Verbatim Environment}
%  This is a modified version from Cambridge classes
%    \begin{macrocode}
\begingroup \catcode `|=0 \catcode `[= 1
\catcode`]=2 \catcode `\{=12 \catcode `\}=12
\catcode`\\=12 |gdef|@xsmallverbatim#1\end{smallverbatim}[#1|end[smallverbatim]]
|gdef|@sxsmallverbatim#1\end{smallverbatim*}[#1|end[smallverbatim*]]
|endgroup
\def\@smallverbatim{\trivlist \item\relax
  \if@minipage\else\vskip\parskip\fi
  \leftskip\@totalleftmargin\rightskip\z@skip
  \parindent\z@\parfillskip\@flushglue\parskip\z@skip
  \@@par
  \@tempswafalse
  \def\par{%
    \if@tempswa
      \leavevmode \null \@@par\penalty\interlinepenalty
    \else
      \@tempswatrue
      \ifhmode\@@par\penalty\interlinepenalty\fi
    \fi}%
  \let\do\@makeother \dospecials
  \obeylines \small \@noligs%\smallverbatim@font to FIX
  \hyphenchar\font\m@ne
  \everypar \expandafter{\the\everypar \unpenalty}%
}
\def\smallverbatim{\@smallverbatim \frenchspacing\@vobeyspaces \@xsmallverbatim}
\def\endsmallverbatim{\if@newlist \leavevmode\fi\endtrivlist}
\def\smallverbatim@font{\normalfont\smallverbatimsize\ttfamily}
%    \end{macrocode}
%
% \section{Color Management}
%
% Most classes load the |xcolor| package. Including
% it here, should either be able to check if it was 
% loaded by the class or to pass the options before
% the class itself. This package is a common source
% of errors, as classes load it with mostly different options.
% Because of this is also a good example to test our code
% in a number of minimal working examples.
%
%    \begin{macrocode}
\@ifpackageloaded{xcolor}{}%
 {\PassOptionsToPackage{\xcolorkeys@cx}{xcolor}
  \RequirePackage{xcolor}}
%    \end{macrocode}
%
%	We adopt the convention that colour names used in code should be
%	prefixed by a |the|. For simplicity we also adopt the convention
%    that all colours defined in colour schemes should be in lowercase
%	(less keystrokes and matches the styles of |pgf| keys). 
%
% \subsection{Color management}
%    \begin{macrocode}
\providecommand\href[2]{\texttt{#1}}
\definecolor{lstbgcolor}{rgb}{0.9,0.9,0.9}
\colorlet{examplefill}{yellow!80!black}
% codepalettes
%\definecolor{codebackground}{rgb}{0.972,0.929,0.753}
%\definecolor{codebackground}{rgb}{0.972,0.929,0.753}
%\definecolor{codebackground}{HTML}{B7C1C1}
%\definecolor{thekeywordstyle}{HTML}{435969}
%\definecolor{thecommentstyle}{HTML}{F87F01}
%1890
\definecolor{codebackground}{HTML}{F2F2EA}
\definecolor{thekeywordstyle}{HTML}{392726}
\definecolor{thecommentstyle}{HTML}{DF8743}

\definecolor{graphicbackground}{rgb}{0.972,0.929,0.753}
\colorlet{graphicbackground}{codebackground}


\definecolor{glyphbox}{rgb}{0.86,0.86,0.8}
%\definecolor{codebackground}{rgb}{0.8,0.8,1}
\definecolor{theblue} {rgb}{0.02,0.04,0.48}
\definecolor{thered}  {rgb}{0.65,0.04,0.07}
\definecolor{thedoccommandcolor}{rgb}{0.65,0.04,0.07}% doc command colors
\colorlet{Headings}{black} %font examples
\colorlet{Subheadings}{black} %font examples
\colorlet{thefontname}{black}%font examples
\colorlet{thehighlight}{yellow}%soul  highlight
\colorlet{thecancel}{thered}%for cancel commands
\definecolor{thegreen}{rgb}{0.06,0.44,0.08}
\definecolor{thelightgreen}{rgb}{0.06,0.44,0.06}
\definecolor{thegrey} {gray}{0.5}
\definecolor{thegray} {gray}{0.5}
\definecolor{thedarkgray} {gray}{0.95}
\definecolor{lightgray}{gray}{0.6}
\definecolor{shadedcolor}{gray}{0.6}
\definecolor{thelightgray}{gray}{0.6}
\definecolor{theshade}{gray}{0.94}
\definecolor{theframe}{gray}{0.75}
\definecolor{thecream}{rgb}{1,0.95,0.4}
\definecolor{spot}{rgb}{0,0.2,0.6}%some shades of blue
\definecolor{sweet}{rgb}{0,.68,.93}%shades of blue
%\colorlet{codebackground}{spot!5!white}
\definecolor{boxframe}{gray}{0.8}
\definecolor{boxfill}{rgb}{0.95,0.95,0.99}
\definecolor{theoption}{gray}{0.6}
\definecolor{themacro}{rgb}{0.784,0.06,0.176}
\definecolor{ExampleFrame}{rgb}{0.628,0.705,0.942}
\definecolor{ExampleBack}{rgb}{0.963,0.971,0.994}
\definecolor{Hyperlink}{rgb}{0.281,0.275,0.485}
\colorlet{thehyperlink}{theblue}
\colorlet{preciscolor}{sweet}
\colorlet{toccolor}{sweet}
\definecolor{bgsexy}{HTML}{F060A8}
%\definecolor{bgsexy}{HTML}{90D228}
\definecolor{bgsexy}{HTML}{AF0C39}
\definecolor{cosmo}{HTML}{EED38D}


%\newcommand*{\defaultcolor}{\color{black}}
%\newcommand*{\spotcolor}{\color{spot}}
%    \end{macrocode}
% 
%    \begin{macrocode}
\newcommand{\done}{\cellcolor{teal}done}  
\newcommand{\partialdone}{\cellcolor{yellow}done}
\newcommand{\hcyan}[1]{{\color{teal} #1}}
%    \end{macrocode}
% \section{Language Manager} 
%
% We use the package \pkgname{polyglossia} for language management for the
% newer engines and \pkgname{babel} for pdfLaTeX.
% This is full of holes which need to be closed for cases where the
% bidi package is loaded.\FIRE be careful of babel shorthands! They corrupt
% the table
%
%    \begin{macrocode} 
%\ExplSyntaxOn
\ifengine
  {
    \PassOptionsToPackage{italian,english}{polyglossia}
    \RequirePackage{polyglossia}
    \setdefaultlanguage{english}}
  {%
   \expandafter\PassOptionsToPackage{italian,english}{babel}
    \RequirePackage[italian,english]{babel}
%    \RequirePackage{polyglossia}
%    \setdefaultlanguage{english}
  }
  {\PassOptionsToPackage{italian,english }{babel}
    \RequirePackage{babel}
  }
%\ExplSyntaxOff  
%    \end{macrocode}
%
% 
%
%    \begin{macrocode}  
\RequirePackage[italian,english]{xlayouts}
%    \end{macrocode} 
%
% \section{Date and Time}
%
%    \begin{macrocode}
\ifluatex 
\newcommand\printtime[5][0]{%
   \luadirect{
      local m =require("i18n.datetime")
      m:printDayTime(#2, #3, #4, #5, #1)
    }%
 }%

\newcommand\datetimetodecimal[4]{%
   \luadirect{
      local m =require("i18n.datetime")
      m:dayTimeToDecimal(#1, #2, #3, #4)
    }%
 }%
   \newcommand\datetimetofractional[2][0]{%
   \luadirect{
      local m =require("i18n.datetime")
      m:dayTimeToFractional(#2,#1)
    }}
    
\fi
\ExplSyntaxOn
 \DeclareDocumentCommand\printtimeinterval{ m m g g }
 {
  #1\textsuperscript{d}%
  #2\textsuperscript{h}%
  \IfNoValueTF {#3} {} {#3\textsuperscript{m}}
  \IfNoValueTF {#4} {} {#4\textsuperscript{s}}
 }
 \let\PrintTimeInterval\printtimeinterval
 \ExplSyntaxOff
%\usepackage{dateiliste}
%    \end{macrocode}
%
% \section{tcolorbox}
% We load \pkgname{tcolorbox} with options theorems, skins, documentation etc
% for internal and external use.
%
% We also provide an interface, between the \pkgname{tcolorbox} documentation
% keys and our own.
% 
% The indexing keys are still to be sorted out with other sections of the
% documentation, but they seem to be working for the moment.
% 
%    \begin{macrocode}
\let\oldcs\cs
\RequirePackage[theorems, skins, documentation,
                breakable,listings]{tcolorbox}
%                
                \tcbset{index format=pgfchapter,
                        index actual={=},
                        index level = {>},
                        index quote = {!},
                        index german settings,
                   }
\tcbset{halostyle/.style={fuzzy halo=2mm with magenta!5}}                   
\let\cs\oldcs                
%    \end{macrocode}                
%
%\cxset {doc command color/.code = \tcbset{color command = #1}}
%\cxset {doc command color= thedoccommandcolor}

%    \begin{macrocode}
\lstdefinelanguage{extras}{morekeywords={%
      poemtitle, poemtoc, versewidth, 
      vin, poemlines,poemtitlefont, 
      ProvidesClass,IfFileExists,
      RequirePackage,ifthenelse,chapter,
      includegraphics, newarray,readarray,of
}}
\lstloadlanguages{[LaTeX]TeX, [primitive]TeX, extras}
%    \end{macrocode}
%
% Note the |gobble=1| option. We use this to make the colorboxes
% with code not to show the `\%` sign in this documentation.
% Ideally you should fork the code below and adapt it to 
% your own needs.
%
% Also note that this is the default that is to be used in
% \pkg{tcolorbox} commands.
% 
%    \begin{macrocode}

   
\newtcolorbox{scriptexample}[2][shavian]{colback=codebackground,
boxrule=0pt,toprule=0pt,colframe=white}

\newtcolorbox{commands}[2][shavian]{colback=codebackground,
boxrule=0pt,toprule=0pt,colframe=white}

\lstset{language={[LaTeX]TeX},
       escapeinside={{(*@}{@*)}}, 
       numbers=left, 
       gobble=0,
       stepnumber=1,numbersep=5pt, 
       numberstyle={\footnotesize\color{gray}},
       firstnumber=last,
       breaklines=false,
       framesep=5pt,
       basicstyle=\small\ttfamily,
       showstringspaces=false,
       stringstyle={\color{orange}\footnotesize},
       commentstyle=\color{black},
       rulecolor=\color{theshade},
       breakatwhitespace=true,
       showspaces=false, 
       xleftmargin=10pt,
       xrightmargin=10pt,
       aboveskip=3pt plus1pt minus1pt, 
       belowskip=7pt plus1pt minus1pt,  
       backgroundcolor=\color{theshade},
}
%    \end{macrocode}
%	
%	
% 	The environment |\begin{TeX}..\end{TeX}| provides a listings environment
% 	for typesetting, either TeX or LaTeX code.
% 	
%    \begin{macrocode}
\lstnewenvironment{teX}[1][]
  {\lstset{language=[LaTeX]TeX}\lstset{%
      breaklines=true,
      framesep=5pt,
      basicstyle=\verbatimfamily,
      showstringspaces=false,
      keywordstyle=\verbatimfamily,
      stringstyle={\color{gray!90}\footnotesize},
	    commentstyle={\color{gray!90}\footnotesize},
	    rulecolor=\color{theshade},
      breakatwhitespace=true,
	    xleftmargin=15pt,
	    xrightmargin=5pt,
	    aboveskip=\medskipamount,
	    belowskip=\medskipamount,
      backgroundcolor=\color{white}, #1
}}
{}


\lstnewenvironment{teXX}[1][]
  {\lstset{language=[LaTeX]TeX}\lstset{%
      breaklines=true,
      framesep=5pt,
      basicstyle=\small\ttfamily,
      showstringspaces=false,
      keywordstyle=\ttfamily\color{blue},
      stringstyle=\color{maroon},
	  commentstyle=\color{black},
	  rulecolor=\color{gray!10},
      breakatwhitespace=true,
	  xleftmargin=0pt,
	  xrightmargin=5pt,
	  aboveskip=\medskipamount,
	  belowskip=\medskipamount,
      backgroundcolor=\color{gray!10}, #1
}}
{}
%    \end{macrocode}

% {continuelinenumber} 
% {startnumberat} 
%  The macro \cs{continueLineNumber}, provides a command
%  to start the next block of code with the code numbers continuing.
%  This requires the |listings| which is already included.
%  
%    \begin{macrocode}
% Always I forget this so I created some aliases
\newcommand\continuelinenumber{\lstset{firstnumber=last}}
\newcommand\startlineat[1]{\lstset{firstnumber=#1}}
\let\numberlineat\startlineat
\let\startnumberat\numberlineat
%    \end{macrocode}
% 
% 
%
%    \begin{macrocode}
\newcommand\emphasis[2][black!80]{\lstset{emph={write, writeln,#2},escapeinside={(*@}{@*)},
   emphstyle={\verbatimfont\bfseries\textcolor{#1}}}}%changed to textbf
      
   
\lstnewenvironment{teXXX}[1][]
  {\lstset{language=[LaTeX]TeX}%
    \lstset{%
      emph={cs, use,new,seq,map,inline,eq,gincr,incr,IfNoValueF,if,If,exist,protect,nopar,gset,%
      set,undefine,define,add,gadd,remove,div,%
      round,truncate,max,min,mod,gzero,int,%
      zero,newcount,protected,msg,error,DeclareDocumentCommand},
      emphstyle=\verbatimfont\bfseries\color{black!80},
      firstnumber=last,
      stepnumber=1,
      escapeinside={{(*@}{@*)}},
      breaklines=false,
      framesep=5pt,
      basicstyle= \verbatimfont,
      showstringspaces=false,
      keywordstyle=\color{thegreen},
      stringstyle=\color{black!50},
      commentstyle=\color{black!50},
	    rulecolor=\color{gray!10},
      breakatwhitespace=true,
      showspaces=false,  % shows spacing symbol
	   %xleftmargin=0pt,
	   %xrightmargin=5pt,
	xleftmargin=15pt,
	xrightmargin=5pt,
	 %  aboveskip=0pt, % compact the code looks ugly in type
	  % belowskip=0pt,  % user responsible to insert any skips
	 aboveskip=\medskipamount,
	 belowskip=\medskipamount,
       backgroundcolor=,
       #1
}}
{}

\lstnewenvironment{phdverbatim}[1][]
  {\lstset{language=[LaTeX]TeX}%
    \lstset{%
      emph={cs, use,new,seq,map,inline,eq,gincr,incr,IfNoValueF,if,If,exist,protect,nopar,gset,%
      set,undefine,define,add,gadd,remove,div,%
      round,truncate,max,min,mod,gzero,int,%
      zero,newcount,protected,msg,error,DeclareDocumentCommand},
      emphstyle=\verbatimfont\bfseries\color{black!80},
      numbers=none,
     % stepnumber=1,
      escapeinside={{(*@}{@*)}},
      breaklines=false,
      framesep=5pt,
      basicstyle= \verbatimfont,
      showstringspaces=false,
      keywordstyle=\color{thegreen},
      stringstyle=\color{black!50},
      commentstyle=\color{black!50},
	  rulecolor=\color{gray!10},
      breakatwhitespace=true,
      showspaces=false,  % shows spacing symbol
	  xleftmargin=15pt,
	  xrightmargin=5pt,
	 %  aboveskip=0pt, % compact the code looks ugly in type
	  % belowskip=0pt,  % user responsible to insert any skips
	  aboveskip=\medskipamount,
	  belowskip=\medskipamount,
      backgroundcolor=,
       #1
}}
{}
%    \end{macrocode}
% 
%
%
%    \begin{macrocode}
\lstnewenvironment{lualisting}[1][]
{\lstset{language=[LaTeX]TeX,
  basicstyle           = \ttfamily,
  showstringspaces     = false,
  upquote              = true,
  keywordstyle         =\color{blue},
  commentstyle         =\color{black!50},
  stringstyle          =\color{black!80},
  backgroundcolor      =\color{white},
  xleftmargin          =15pt,
  xrightmargin         =5pt,
  aboveskip            =\medskipamount,
  belowskip	            =\medskipamount,
  #1}}
{}

%    \end{macrocode}
%    
%	



% and spacing commands 
% which can be handy,
%
% \section{spacing}
% {hspace} This is a \textit{hairspace}, here defined 
% as 1pt.
% {hquad} This is a half squad space
%    \begin{macrocode}
\newcommand{\hairsp}{\hspace{1pt}}% hair space
\newcommand{\hquad}{\hskip0.5em\relax}% half quad space
% Sometimes, we need a little more horizontal spacing, too (used for symbols).
\newcommand{\qqquad}{\qquad\quad}
\newcommand{\TODO}{\textcolor{red}{\bf TODO!}\xspace}
\newcommand{\ie}{\textit{i.\hairsp{}e}\xspace} %removed\@
\newcommand{\eg}{\textit{e.\hairsp{}g.}\xspace}
\newcommand{\BC}[1]{\textsc{#1 BC}} %European Union Style Guide FIX
\newcommand{\AD}[1]{\textsc{AD #1}} %European Union Style Guide FIX
%    \end{macrocode}
% 
% 
%
% \subsection{Standard phantom widths}
%
%    \begin{macrocode}
\newcommand\Zi{\phantom{0}} %Z conflicts with symbols 
\newcommand\ZZ{\phantom{00}}
\newcommand\ZZZ{\phantom{000}}
\newcommand\ZZZZ{\phantom{0000}}
\providecommand\newthought[1]{%
   \addvspace{1.0\baselineskip plus 0.5ex minus 0.2ex}%
   \noindent\textsc{#1}%
}
  \let\equation\gather             %% See tabu and hyperref docs
  \let\endequation\endgather
%    \end{macrocode}
%

%
%
% \section{Logos and other common elements}
 %
% Here we define some of the most commonly used logos. Different
% authors preferences vary. Some like to type \cmd{\TeX}, others
% myself included prefer all lowercase typing, e.g., \cmd{\tex}
% and others uppercasing the commands. We provide as many variants
% as possible. There are two or three packages providing logos. In
% the end we provide our own.
%
%    \begin{macrocode}
%\newcommand{\seedocs}[1]{%
%  See the #1 documentation for more information%
%}
%%    \end{macrocode}
%% 
%% \subsection{hologo}
%% If you intend to have any fancy logos in bookmarks then the
%% \pkgname{hologo} can be used.
%% The package starts a collection of logos with 
%% support for bookmarks strings. \seedocs{hologo}.
%%    \begin{macrocode}
%\RequirePackage{hologo}
%%    \end{macrocode}
%%
%% \subsection{metalogo}
%% 
%% The package \pkgname{metalogo} exposes the spacing parameters for 
%% the various TEX logos to the end
%% user (and suitably redefines the logos in a generalised way). It is intended to help
%% XeLaTeX users, who use various typefaces, to easily optimise the logos for each
%% typeface. Still, the package remains useful if any typeface is used, not necessarily
%% loaded through XeTEX. It is known that, in Plain TEXâ€™s definition of \TeX, the
%% lower right serif on the â€˜Eâ€™ protrudes through the â€˜Xâ€™ in cmr and cmr; this
%% package can be used to fix this sort of unacceptable grotesque.
%%
%%    \begin{macrocode}
%\RequirePackage{metalogo}
%\newcommand\TEX      {\TeX\xspace}
%\let\tex\TEX
%\newcommand\LUA      {Lua\xspace}
%\let\lua\LUA
%\newcommand\PDFTEX   {pdf\TeX\xspace}
%\let\pdftex\PDFTEX
%\newcommand\LUATEX   {Lua\TeX\xspace}
%\let\luatex\LUATEX
%\newcommand\XETEX    {\XeTeX\xspace}
%\let\xetex\XETEX
%\newcommand\LATEX    {\LaTeX\xspace}
%\let\latex\LATEX
%\newcommand\pdfLaTeX {pdf\latex}
%\newcommand\LUALATEX {Lua\LaTeX\xspace}
%\let\lualatex\LUALATEX
%\newcommand\CONTEXT  {Con\TeX t\xspace}
%\let\context\CONTEXT
%\newcommand\OpenType {\texttt{Open\kern-.25ex Type}\xspace}
%\let\opentype\OpenType
%\def\latexe{\LaTeX\xspace}
%\def\bibtex{\texttt{bibTeX\xspace}}
%\newcommand{\fontdefdtx}{fontdef.dtx\xspace}
%\newcommand{\postscript}{PostScript\index{PostScript}\xspace}
%\newcommand{\TC}{\pkgname{textcomp}}
%%\newcommand\TX{\pkgname{txfonts}}
%\newcommand\PX{\pkgname{pxfonts}}
%\newcommand{\TeXbook}{%
%  The \TeX{}book\index{TeXbook, The=\TeX{}book, The}~\cite{Knuth:ct-a}\xspace}
%\newcommand{\ctt}{%
%  \texttt{comp.text.tex}%
%  \index{comp.text.tex=\texttt{comp.text.tex} (newsgroup)}\xspace}
%\newcommand{\fntenc}[1][]{%
%  \def\firstarg{#1}%
%  font encoding%
%  \ifx\firstarg\empty%
%    \index{font encodings}%
%  \else
%    \index{font encodings>\firstarg}%
%  \fi
%}
%\DeclareRobustCommand{\xelatexInternal}{%
%  \mbox{X\lower0.5ex\hbox{\kern-0.15em\reflectbox{E}}\kern-0.1em\LaTeX}}
%  \newcommand{\xelatex}{\xelatexInternal\index{XeLaTeX=\xelatexInternal}\xspace}
%  
%\DeclareRobustCommand\otr{OTR\xspace}
%\let\alltex\LaTeX
%%    \end{macrocode}
%% We want to remove this 
%%   \begin{macrocode}
%\let\doccmd\cmd
%%
%\def\texbook{\TeX book\xspace}
%\def\alltex{(All\kern-.075em)\kern-.075em\TeX\xspace}
%\def\ams{American Mathematical Society\xspace}
%\def\AmS{$\mathcal{A}$\kern-.1667em\lower.5ex\hbox
%    {$\mathcal{M}$}\kern-.125em$\mathcal{S}$\xspace}
%\def\amsmath{\AmS{}math\xspace}
%\def\amslatex{\AmS-\LaTeX\xspace}
%\def\amstex{\AmS-\TeX\xspace}
%%
%\def\docpkg#1{\texttt{#1}}
%    \end{macrocode}
%
% The package \pkgname{scalefnt} should not be used, with XeLaTeX or LuaTeX.
% It might have some uses with older schemes.
%    \begin{macrocode}
\ifengine{}{}{\RequirePackage{scalefnt}	}
%    \end{macrocode}
%
%

% \section{Titles, authors, abstracts and the like}
%
% 	We want to have the option to make titles both as normally used in the |book| class
%	but also as used in articles i.e., not to emit a new page after it is invoked.
%	The definition is straight from the article class.
% {@maketitle}
%    This macro takes care of formatting the title information when we
%    have no separate title page.
%
%    We always start a new page, leave some white space and center the
%    information. The title is set in a |\LARGE| font, the author
%    names and the date in a |\large| font. CHECK THIS IF HERE
%    \begin{macrocode}
\def\@maketitle{%
  %\newpage
  \null
  \vskip 2em%
  \begin{center}%
  \let \footnote \thanks
    {\LARGE \@title \par}%
    \vskip 1.5em%
    {\large
      \lineskip .5em%
      \begin{tabular}[t]{c}%
        \@author
      \end{tabular}\par}%
    \vskip 1em%
    {\large \@date}%
  \end{center}%
  \par
  \vskip 1.5em}
  %fi CHECK
%    \end{macrocode}
% 
%
% {maketitle}
%    The macro to generate titles is easily altered in order that it
%    can be used more than once (an article with many titles)\footnote{Definition is straight 	out of the |doc| package and I only added minor tweaks to only start a new page 
%	on demand.}.  In the
%    original, diverse macros were concealed after use with
%    |\relax|. We must cancel anything that may have been put
%    into |\@thanks|, etc., otherwise {\em all\/} titles will
%    carry forward any earlier such setting!
%                 \cs{@makefnmark} and \cs{@makefntext}.
%    \begin{macrocode}
\def\nonewpage{}
\def\maketitle{\par
      \begingroup \def \thefootnote {\fnsymbol {footnote}}%
      \setcounter {footnote}\z@
      \def\@makefnmark{\hbox to\z@{$\m@th^{\@thefnmark}$\hss}}%
      \long\def\@makefntext##1{\parindent 1em\noindent
            \hbox to1.8em{\hss$\m@th^{\@thefnmark}$}##1}%
      \if@twocolumn \twocolumn [\@maketitle ]%
      \else \nonewpage \global \@topnum \z@ \@maketitle \fi
%    \end{macrocode}
%    For special formatting requirements (such as in TUGboat), we use
%    pagestyle |titlepage| for this; this is later defined to be
%    |plain|, unless already defined, as, for example, by
%    |ltugboat.sty|.
%    \begin{macrocode}
       \thispagestyle{titlepage}\@thanks \endgroup
%    \end{macrocode}
%    If the driver file documents many files, we don't want parts of a
%    title of one to propagate to the next, so we have to cancel
%    these, however before we save in another macro for later
%    usage in headers, if required. :
%    \begin{macrocode}
      \setcounter {footnote}\z@
      \gdef\@date{\today}\gdef\@thanks{}%
      \let\doctitle@cx\@title
      \let\docauthor@cx\@author
%
      \gdef\@author{}\gdef\@title{}%
}
%    \end{macrocode}
% 
%
%	As you can see from below, it can now work anywhere. 
% \maketitle
% 
%  Test |\@author| and test |\doctitle@cx| |\docauthor@cx|,
% 
%
%
%% headers and footers
%    \begin{macrocode}
\cxset{
  header style/.store in=\headerstyle@cx,
% general draft rules
  rule /.is choice,
  rule on/.code={\gdef\rulewidth@cx{0.4pt}},
  rule off/.code={\gdef\rulewidth@cx{0pt}},
% headers and footers
  lhead/.code ={\lhead{#1}},
  rhead/.code={\rhead{#1}},
  chead/.code={\chead{#1}},
  lfoot/.code ={\lhead{#1}},
  cfoot/.code={\chead{#1}},
  rfoot/.code={\rhead{#1}},
  headrulewidth/.code={\renewcommand\headrulewidth{#1}},
  footrulewidth/.code={\renewcommand\footrulewidth{#1}},
}
%    \end{macrocode}
% {ps@titlepage}
%	 When a number of articles are concatenated into a
%    journal, for example, it is not usual for the title pages of such
%    documents to be formatted differently.  Therefore, a class
%    such as \textsf{ltugboat} can define this macro in advance.
%    However, if no such definition exists, we use pagestyle
%    \texttt{plain} for title pages.Again the definition is 
%	from the \pkg{doc} package.
%    \begin{macrocode}
\@ifundefined{ps@titlepage}
    {\let\ps@titlepage=\ps@plain}{}
%    \end{macrocode}
% 
%
% \section{Defining Abstracts, summaries, precis, keywords etc}
%
% \subsection{Abstract}
%
% \begin{environment}{abstract}
%
%	This is an interesting environment provided in the standard
%	classes only for articles. However too many publications 
%	require such abstracts in other sections as well so we redefine
%	it here to make it more extensive.
%	
% \begin{docEnvironment}{abstract}{}
%    When we are producing a separate titlepage we also put the
%    abstract on a page of its own. It will be centred vertically on
%    the page.
% \end{docEnvironment}
%
%    Note that this environment is not defined for books.
%         to avoid page break after abstract heading.
%
%    \begin{macrocode}
\def\abstractname{Abstract}
\@ifundefined{abstract}{%
  \newenvironment{abstract}{%
      \titlepage
      \null\vfil
      \@beginparpenalty\@lowpenalty
      \begin{center}%
        \bfseries \abstractname
        \@endparpenalty\@M
      \end{center}}%
     {\par\vfil\null}
%    \end{macrocode}
%
%    When we are not making a separate titlepage --the default for the
%    article document class-- we have to check if we are in twocolumn
%    mode. In that case the abstract is as a |\section*|, otherwise
%    the quotation environment is used to typeset the abstract.
%    \begin{macrocode}
}{}
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{chapterabstract} This is an identical environment to that
%	provided for abstract and can be used anywhere in the document. 
%    \begin{macrocode}
\def\chapterabstractname{Summary}

\newenvironment{chapterabstract}{%
   \center
     {\bfseries \chapterabstractname\vspace{-.5em}\vspace{\z@}}
   \endcenter\quotation
}{\endquotation}
%    \end{macrocode}
% \end{environment}
%
% \begin{chapterabstract}
%   \lorem
% \end{chapterabstract}
%
% \begin{docCommand} {chapterabstractname} { \meta {void}}  
%  We define a key for the summary or
% 	 or abstract at the top of a chapter. In most cases it is just called a summary.
%  One can use the \cs{chapterabstractname} to change it to another language.
% \end{docCommand}
%     
%    \begin{macrocode} 
\cxset{chapter abstractname/.store in =\chapterabstractname}
\cxset{chapter abstractname= SUMMARY}
%    \end{macrocode}
% 
% 
% \begin{docCommand}{precis} { \marg{text} } Precis is a command to be used for summaries. The same summary 
% can also be used for the toc. 
% \end{docCommand}
%    \begin{macrocode}
\newcommand\precis[1]{%
     \precis@cx{#1}%
     \precistoc@cx{#1}%
     \addvspace{20pt} % check this should be settable
}
%
\def\precis@cx#1{%
\bgroup
\small
\centering
\parbox{.8\textwidth}{#1}
\par\medskip\egroup}

\def\precistoc@cx#1{%
    \addcontentsline{toc}{section}{%
    \bgroup\bgroup#1\egroup\egroup
    %
  }
}
%    \end{macrocode}
% 
% 
% \begin{docCommand} {addtocimage@cx} {\meta{} \meta{} \meta{}}
%  Adds an image to the ToC.
% \end{docCommand}
% 
%    \begin{macrocode}
\long\def\addtocimage@cx#1#2#3{%
\tikz[remember picture,overlay] {%
\node[anchor=east,xshift=#1,yshift=#2] at (0,0) {\includegraphics[width=.15\linewidth]{#3}};}%
}
%    \end{macrocode}
%    
%    Adds an image to the ToC.
%    Needs testing for twoside printing. 
%    \begin{macrocode}
\def\addtocimage#1#2#3{%
 \addtocontents{toc}{\protect\addtocimage@cx{#1}{#2}{#3}}%
}
%    \end{macrocode}
% 
%
% \begin{chapterabstract}
%   \lorem
% \end{chapterabstract}
%
%
% \section{Quotations}
% 
%    \begin{macrocode}
\cxset{
  quotation above/.store in=\quotationabove@cx,
  quotation left margin/.store in=\quotationleftmargin@cx,
  quotation right margin/.store in=\quotationrightmargin@cx,
  quotation parsep/.store in=\quotationparsep@cx,
  quotation font-size/.store in=\quotationfontsize@cx,
  quotation parindent/.store in=\quotationparindent@cx,
  quotation font-name/.store in=\quotationfontname@cx,
 }
%    \end{macrocode}
%
% \begin{docCommand}{setquotation} { \meta{keys} } Macro to create the quotation
%	environment. We need to think of a better way here. Saved
%   old environment.
% \end{docCommand}  
%    \begin{macrocode}
\let\latexquotation\quotation
\let\endlatexquotation\endquotation
\def\setquotation#1{%
\cxset{#1}
\renewenvironment{quotation}
               {\par\addvspace{\quotationabove@cx}
                \list{}{\listparindent\quotationparindent@cx%
                        \leftmargin=\quotationleftmargin@cx%
                        \itemindent    \listparindent
                        \rightmargin \quotationrightmargin@cx
                        \parsep=\quotationparsep@cx%
                        \quotationfontname@cx\quotationfontsize@cx}%
                \item\relax\hskip-\listparindent}
               {\endlist}
}
%    \end{macrocode}
% 
%CHANGE FOR SETFONT
%    \begin{macrocode}
\setquotation{%
  quotation above=20pt, 
  quotation left margin=50pt,
  quotation right margin=0pt,
  quotation parsep=0pt,
  quotation font-size=\normalsize,
  quotation parindent=12pt,
  quotation font-name=, 
}
%    \end{macrocode}
%
% \begin{quotation}
% \lipsum[1]
% \end{quotation}
%
% \begin{docCommand} {setquote} { \meta{keys} }
% \end{docCommand}
%    \begin{macrocode}
\cxset{
  quote above/.store in=\quoteabove@cx,
  quote left margin/.store in=\quoteleftmargin@cx,
  quote right margin/.store in=\quoterightmargin@cx,
  quote parsep/.store in=\quoteparsep@cx,
  quote font-size/.store in=\quotefontsize@cx,
  quote parindent/.store in=\quoteparindent@cx,
  quote font-name/.store in=\quotefontname@cx,
 }
\let\latexquote\quote
\let\endlatexquote\endquote
\def\setquote#1{%
  \cxset{#1}
  \renewenvironment{quote}
               {\par\addvspace{\quoteabove@cx}
                \list{}{\listparindent\quoteparindent@cx%
                        \leftmargin=\quoteleftmargin@cx%
                        \itemindent  \listparindent
                        \rightmargin\leftmargin
                        \parsep=\quoteparsep@cx%
                        \quotefontsize@cx\quotefontname@cx}%
                \item\relax\hskip-\listparindent}
               {\endlist}
  }

% Some default values
\setquotation{%
  quotation above=36pt,
  quotation left margin=50pt,
  quotation parsep=0pt,
  quotation font-size=\small,
  quotation parindent=12pt,
}
\setquote{%
  quote above=0pt,
  quote left margin=20pt,
  quote parsep=0pt,
  quote font-size=\small,
  quote parindent=12pt,
  quote font-name=,
}
%    \end{macrocode}
% 
%

% 
% \subsection{Paragraph setting commands}
%
%    \begin{macrocode}
%
\providecommand*{\linenottooshort}[1][4em]{%
  \@tempdima=\hsize
 \advance\@tempdima-#1
 \leftskip0pt
 \rightskip\leftskip
\parfillskip\@tempdima\@minus\@tempdima
}
\providecommand*{\lastlineparrule}{%
  \hrule height 0.5ex depth \@tempdimb\relax}

\providecommand*{\lastlinerulefill}{%
  \let\\\@centercr
  \@tempdimb=-0.5ex \advance\@tempdimb 0.4pt
  \unskip\nobreak\space
  \leaders\lastlineparrule\hskip\@flushglue
  \vadjust{}{\parfillskip\z@\@@par}}
%    \end{macrocode}
%
%    \begin{macrocode}
\newcommand{\hangleft}[1]{\makebox[0pt][r]{#1}}

\DeclareRobustCommand\ctan[1]{%
  \textcolor{green}{%
      \href{http://www.ctan.org/pkg/#1} {#1}%
  \footnote{\protect\url{http://www.ctan.org/pkg/#1}}}
  \index{Packages>#1}%
}
%
%
%    \end{macrocode}
%
% 
%	The macro \cs{keyval} typesets, key value lists and their options.
%	\medskip
%
%    \keyval{test}{\marg{option1|option2|option2|option4}}{ As per this example.}
%    \keyval{test}{\marg{option1|option2|option2|option4}}{ As per this example.}
%
%	We first measure the width of the option and not use it (want to make it a bit
%	flexible at a later stage. We also ensure that the catcode of \verb+|+ is set properly
%	in case anyone is using short verbatim commands, as we do in this document.
%
%    \begin{macrocode}
\newlength\temp@cx
\def\keyval{%
  \bgroup
  \catcode`|=11
  \@keyval}
%
\def\@keyval#1#2#3{%
  \settowidth\temp@cx{#1}%
  \parindent-30pt
  \hangindent30pt
  \par\leavevmode%
{\color{teal}\bfseries #1}\thinspace=\thinspace#2% 
\hspace*{.5em}#3%
\par\addvspace{1.5pt}%
\egroup
}
%
%    \end{macrocode}
% 
%

%
% \begin{docCommand} {utfviii}  { \meta{void} }
%  Typesets UTF-8.
% \end{docCommand}
%    \begin{macrocode}
\newcommand{\utfviii}{\mbox{UTF-8}\index{UTF-8}\xspace}

% Index TeXbook symbols and the CTAN repository.
\newcommand{\idxTBsyms}{%
  \index{symbols>TeXbook=\TeX{}book}% 
  \index{TeXbook, The=\TeX{}book, The>symbols from}%
}

% Index logical styles.
\newcommand{\pkgname}[1]{%
  \href{http://ctan.org/pkg/#1}{#1}%
  \index{#1=\texttt{#1} (package)}%
  \index{packages>#1=\texttt{#1}}}
\let\pkg\pkgname

\newcommand*{\Lpack}[1]{\textsf {#1}}  
%\let\package\Lpack

\newcommand{\optname}[2]{%
  \textsf{#2}%
  \index{#2=\textsf{#2} (\textsf{#1} package option)}%
  \index{package options>#2=\textsf{#2} (\textsf{#1})}}
%    \end{macrocode}
%
% 
% This macro and all similar macros starting from doc
% typeset their argument and also add the argument to the 
% index.
%
%    \begin{macrocode}
\newcommand{\docfilename}[1]{%
  \texttt{#1}
  \index{#1=\texttt{#1} (file)}}
%    \end{macrocode}
% 
% 
%    \begin{macrocode}
\newcommand{\docfileextension}[1]{%
  \texttt{#1}%
  \index{#1=\texttt{#1} (file extension)}}
   \index{#1=\texttt{#1}}
\newcommand{\PSfont}[1]{%
  #1%
  \index{#1 (font)}%
  \index{fonts>#1}%
}
%    \end{macrocode}
% 
%    \begin{macrocode}
\NewDocumentCommand{\person} { m m } {#1\index{#2, #1} #2}
%    \end{macrocode}
%
%    \begin{macrocode}
\newcommand{\idxCTAN}{%
  \index{Comprehensive TeX Archive Network=Comprehensive \string\TeX{} Archive Network}}
% Typeset a string in various encodings.
\newcommand{\encone}[1]{{\fontencoding{T1}\selectfont#1}}
\newcommand{\encfour}[1]{{\fontencoding{T4}\selectfont#1}}
\newcommand{\encfive}[1]{{\fontencoding{T5}\selectfont#1}}
\newcommand{\encgreek}[1]{{\fontencoding{LGR}\selectfont#1}}

% Various punctuation marks confuse makeindex when used directly.
\let\magicrbrack=]
\let\magicequal=\=
\DeclareRobustCommand{\magicequalname}{\texttt{\string\=}}
\DeclareRobustCommand{\magicvertname}{\texttt{|}}
\DeclareRobustCommand{\magicVertname}{\texttt{\string\|}}

% Vertically center a text-mode symbol.
\newsavebox{\tvcbox}
\newcommand*{\textvcenter}[1]{%
  \savebox{\tvcbox}{#1}%
  \raisebox{0.5\dp\tvcbox}{\raisebox{-0.5\ht\tvcbox}{\usebox{\tvcbox}}}%
}
% Many tables have notes beneath them.  Define an environment in which to
% display such a note, with an optional, superscripted math symbol
% preceding it.
\newenvironment{tablenote}[1][]{
  \makebox[1em]{\ensuremath{^{#1}}}%
  \begin{minipage}[t]{0.75\textwidth}%
  \setlength{\parskip}{2ex}
}{%
  \end{minipage}%
}

% Define various messages we reuse repeatedly.
\newcommand{\twosymbolmessage}{%
  \begin{tablenote}
    Where two symbols are present, the left one is the ``faked'' symbol
    that \latexe provides by default, and the right one is the ``true''
    symbol that \TC\ makes available.
  \end{tablenote}
}

\newcommand{\notpredefinedmessage}{%
  \begin{tablenote}[*]
    Not predefined in \latexe.  Use one of the packages
    \pkgname{latexsym}, \pkgname{amsfonts}, \pkgname{amssymb},
    \pkgname{txfonts}, \pkgname{pxfonts}, or \pkgname{wasysym}.
  \end{tablenote}
}

\newcommand{\notpredefinedmessageABX}{%
  \begin{tablenote}[*]
    Not predefined in \latexe.  Use one of the packages
    \pkgname{latexsym}, \pkgname{amsfonts}, \pkgname{amssymb},
    \pkgname{mathabx}, \pkgname{txfonts}, \pkgname{pxfonts}, or
    \pkgname{wasysym}.
  \end{tablenote}
}

\newcommand{\usetextmathmessage}[1][]{%
  \begin{tablenote}[#1]
    It's generally preferable to use the corresponding symbol from
    \vref{math-text} because the symbols in that table work
    properly in both text mode and math mode.
  \end{tablenote}
}



\newcommand{\usefontcmdmessage}[2]{%
  These symbols must appear either within the argument to \cmd{#1} or
  following the \cmd{#2} font-selection command within a scope%
}
% Define an environment in which to write a single table of symbols.  The
% environment looks a lot like a table, but it doesn't float, and it gets
% an entry in the table of contents as opposed to the list of tables.
%
% The first argument is a conditional.  The table will appear only if
% the value of the conditional is true.  The second argument is the
% table's caption.

\def\fnum@table{\tablename~\thetable}

\newenvironment{symtable}[2][true]{%
  \expandafter\global\expandafter\let%
    \expandafter\ifshowsymtable\csname if#1\endcsname
  \ifshowsymtable
    \noindent%
    \begin{minipage}[t]{\linewidth}    % Prevent page breaks
    \begin{center}
    \refstepcounter{table}%
    \phantomsection
    \addcontentsline{toc}{subsection}{%
      \protect\numberline{\tablename~\thetable:}{#2}}%
    \@makecaption{\fnum@table}{#2}\medskip
    \let\next=\relax
  \else
    % The following was taken verbatim from verbatim.sty.
    \let\do\@makeother\dospecials\catcode`\^^M\active
    \let\verbatim@startline\relax
    \let\verbatim@addtoline\@gobble
    \let\verbatim@processline\relax
    \let\verbatim@finish\relax
    \let\next=\verbatim@
  \fi
  \next
}{%
  \ifshowsymtable
    \end{center}
    \end{minipage}
    \vskip 8ex minus 2ex
  \fi
}
%    \end{macrocode}
%
% \chapter{Scripts and Languages }
% 
% The clist \refCom{g_phd_scripts_clist} holds a list of all the scripts that have been loaded.
% Managing the user interface is problematic, we will have users that require
% only one script and users that might want all of them.
% There is also the issue between the blurring of alphabets, languages and scripts
% Since we will always specify a pan-unicode font, which we will make available
% with the |phd| package. We map all scripts to this font first.
%
% \begin{docCommand}{g_phd_scripts_clist} {\meta{clist}}
%   Holds a clist of all scripts loaded.
% \end{docCommand}
%
% 
%  Declare two global lists to hold all the scripts available.
% The |\script_prop| holds info for each script loaded
%
%    \begin{macrocode}
\ExplSyntaxOn
\clist_new:N \g_phd_scripts_clist
\clist_new:N \g_phd_noto_clist
\prop_new:N \script_prop
%\input{notolist.txt.tex}
%    \end{macrocode}
%
% \begin{docCommand}{g_phd_noto_clist}{clist}
% Holds a list of all noto fonts available.
% \end{docCommand} 
%
% \begin{docCommand}{printnotofontlist} {clist}
% It typesets a list in a two column environment with all the available Noto fonts.
% \end{docCommand}

% 
%    \begin{macrocode}
\cs_set:Npn \printnotofontlist 
  {
    \begin{multicols}{2}
      \clist_map_inline:Nn \g_phd_noto_clist
        {
          ##1\par 
		  }
    \end{multicols}  
  }
%    \end{macrocode}	
% 
% 
%    \begin{macrocode}	
\prop_put:Nnn \script_prop {name}{Armenian}
\prop_put:Nnn \script_prop {fonts}{NotoArmenian-Regular.ttf, Others}
\prop_get:NnN \script_prop {fonts}\l_tempa_tl
\prop_put:Nnn \script_prop {group}{Europe}
\prop_get:NnN \script_prop {group} \l_tempa_tl
%    \end{macrocode}
%
% \begin{docCommand}{SetPanUnicodeFont}{\marg{font name}}
%  Sets the pan-unicode font. This font is to be used as a default for all the scripts
%  The user can override it with another font.
% \end{docCommand}
%
%    \begin{macrocode}
\NewDocumentCommand\SetPanUnicodeFont { m }
  {
     \gdef\panunicodefontface{#1}
     \newfontfamily\panunicode[Scale=MatchUppercase]{#1}
  }
\SetPanUnicodeFont{code2000.ttf}    
%    \end{macrocode}

%    \begin{macrocode}
\cs_gset:Npn \makepanfontfamily#1{
%  \newfontfamily\cs:w #1fontfamily\cs_end: { #2 }
  \cs_gset_eq:cN {#1fontfamily}\panunicode
  \cs_gset_eq:cc {#1} {#1fontfamily}
}

\cs_gset:Npn \add_a_script:n #1
 {
   \clist_gput_left:Nn \g_phd_scripts_clist {#1 }
   \createscriptenvironment {#1}
   \createtextscript {#1}
 }   
 
 % add a script
\NewDocumentCommand\addascript { m } 
  {
    \add_a_script:n {#1}
  }
  
% Mock an environment 
\gdef\createscriptenvironment #1{
   \exp_after:wN\gdef\csname #1script\endcsname{\group_begin:
      \csname #1fontfamily\endcsname}
   \exp_after:wN\gdef\cs:w end#1script\cs_end:{\group_end: }
}  
\ExplSyntaxOff
%    \end{macrocode}
%  \pagestyle{headings}
% \begin{docCommand}{createtextscript}{ \marg{script name}}
% This creates a command of the form |\text|\meta{script name} i.e., for tibetan
% it will produce |\texttibetan|
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn \createtextscript #1{
   \long\exp_after:wN\gdef\csname text#1\endcsname ##1
   {
      \group_begin: 
      \cs:w #1fontfamily\cs_end:
        ##1
     \group_end:
   }
}  
%
%
\cs_gset:Npn \makefontfamily#1#2 {
\if_meaning:w\panunicodefontface#2
  \else:
  \exp_after:wN
  \newfontfamily\cs:w #1fontfamily\cs_end: { #2 }
  \cs_gset_eq:cc {#1} {#1fontfamily}
\fi:  
}

\ExplSyntaxOff

\NewDocumentCommand\AddScript { m } {
    \cxset{script/.code=\addascript{##1}}
    \cxset{#1 font/.code=\makefontfamily{#1}{##1}}
    \cxset{script=#1}
    \cxset{#1 font=\panunicodefontface}
}
\cxset{add script/.code = \AddScript{#1}}

\ExplSyntaxOn
\clist_gset:Nn \g_phd_scripts_clist {
      armenian,
      %hebrew,
     % arabic,
      syriac,
      thaana,
      devanagari,
      bamum,
      bengali,
      brahmi,
      coptic,
      gurmukhi,
      gujarati,
      oriya,
      tamil,
      telugu,
      kannada,
      malayalam,
      thai,
      lao,
      lisu,
      myanmar,
      georgian,
      ethiopic,
      cherokee,
      ogham,
      runic,
      buhid,
      bopomofo,
      tibetan, 
      cypriot, 
      telugu, 
      phoenician, 
      cham,
      vai,
      rejang,
      glagolitic,
      saurashtra,
         sinhala,
      sylhetinagari,
      tifinagh,
      kayahli,
     mongolian,
     oldturkic,
     cjk,
}

\clist_map_inline:Nn\g_phd_scripts_clist 
  {
    \AddScript{#1}
    \makepanfontfamily {#1}
  }
\ExplSyntaxOff
%    \end{macrocode}
%
% A small utility macro to typeset unicode tables
% examples can be see in the chapters for scripts.
%puts the unicode label (removes last char and adds x)
%
% \begin{docCommand} {putunicode@label} {\marg{unformatted string}} 
%  This macro receives a number in hexadecimal, removes the last
%  0 and replaces it with an x. It then prepends a U+ to fomat it
%  as a Unicode number e.g. U+0100x
% \end{docCommand}
% 
%    \begin{macrocode}
\newcounter{glyph@count}%counts glyphs
%    \end{macrocode}
%		
%		
%    \begin{macrocode}
\ExplSyntaxOn
\def\textU#1{{\unicodenumberfam #1}}
\ExplSyntaxOff
%    \end{macrocode}
%		
%    \begin{macrocode}
\def\putunicode@label#1#2;{%
%    \end{macrocode}
%    
%    \begin{macrocode}
\def\reformat@unicode@string##1{%
   \textU{U+}%
  \let\z\empty%
  \expandafter\@tfor\expandafter\i\expandafter:\expandafter=#2;\do{%
  \if\i;%
    \textU{x}%
  \else%
    \textU{\z}%
  \fi%
  \edef\z{\i}%
 }%
}%
  \makebox[5em]{\reformat@unicode@string{#2}\hfill}%
}
%    \end{macrocode}
% 
% \begin{docCommand} {putchar@cx} {\meta{char}}
% \end{docCommand}
% 
%    \begin{macrocode}
\def\putchar@cx#1{%
\stepcounter{glyph@count}
\let\oldactive@prefix\active@prefix
\let\active@prefix\relax
   \iffontchar\font\n
     \char\the\n$_{\pgfmathparse{Hex(\the\r@cx)}\text{\pgfmathresult}}$%
      %
   \else
    {\arial\graybox}
   \fi
\let\active@prefix\oldactive@prefix
 }
%    \end{macrocode}
%    
%  typesets one row of a unicode table
%    \begin{macrocode}    
\def\urow@cx#1{%
    \n=#1% 
    \r@cx=0%
    \expandafter\putunicode@label#1;%
    \loop%
        \ifnum\n<\numexpr#1+16\relax%
        \makebox[2.1em]{\expandafter\putchar@cx{#1}}%
        \advance\r@cx by1%  
        \ifnum\r@cx>16\r@cx=1\relax\else\fi
        \advance\n by1%
    \repeat
    \par
}

\def\typeseturows@cx#1{%
\@for\next:=#1\do{%
  \urow@cx\next\vskip3pt}%
}

\newcount\r@cx%
\newcount\n%
\newcommand\unicodetable[2]{%
\bgroup
  \par
  \leavevmode%
   \r@cx=0%
   {\hbox to 5em{\ignorespaces}}%
   \loop%
    \ifnum\r@cx<16\ignorespaces 
    \makebox[2.1em]{\pgfmathparse{Hex(\the\r@cx)}\pgfmathresult}%
    \advance\r@cx by\@ne%  
   \repeat
   \vskip3pt\par
   \@nameuse{#1}%
   \typeseturows@cx{#2}%
\egroup
}
%    \end{macrocode}
% \begin{docCommand} {unicodenumber} {\meta{string}}
% Typesets a string such as |x1020| in a typewriter font.
% \end{docCommand}
%    \begin{macrocode}    
\DeclareRobustCommand\unicodenumber[1]{{\ttfamily #1\xspace}}
%    \end{macrocode}
%    
%    \begin{macrocode}
\def\putdescription#1:{%
  \parindent0pt 
  \begin{minipage}[t]{4cm}
  \bgroup\aegean
  \hangindent20pt
  #1\par
  \egroup
  \end{minipage} 
}


\long\def\parsefields #1:#2\@@{%
    \ifx\par#1
    \else 
        {\small\aegean U+#1}%
         %%\iffontchar\font"#1 %
          \makebox[2.1em]{\color{blue}\symbol{"#1}}% 
          \expandafter\putdescription#2\vskip3pt
        %%\else
          %%{\aegean \makebox[2.1em]{} Unallocated\par}%
        %%\fi
    \fi  
  }%
% Check if it can be saved
\newread\tempstream%s
%    \end{macrocode}
%
% \begin{docCommand}{printunicodeblock}{ \oarg{no columns} \marg{filename} \marg{fontcmd}}
%  The macro prints a unicode table from a file of definitions. This is
%   printed in a two column environment by default. 
% \end{docCommand}
% 
%    \begin{macrocode}
%\ExplSyntaxOn
\DeclareDocumentCommand{\printunicodeblock}{O{2} m m }
  {
    \bgroup
    \leavevmode\parindent0pt\par
    \begin{multicols}{#1}%
     #3
      \openin\@inputcheck=#2
      \loop\unless\ifeof\@inputcheck
      \read\@inputcheck to\fileline %
      \expandafter\parsefields \fileline:\@@ 
      \repeat
    \end{multicols}%
      \immediate\closein\@inputcheck
      \egroup
  }
\let\PrintUnicodeBlock\printunicodeblock
%\ExplSyntaxOff
%    \end{macrocode}
% 

%\section{Indexing macros}
%
% \begin{docCommand}{indexmany}{ \oarg{category} \marg{clist} }
% This function indexes a comma delimited list of items. It is convenient
% when you have paragraphs with a lot of terms.
% 
% \end{docCommand}
%    \begin{macrocode}
 \ExplSyntaxOn
 \DeclareDocumentCommand\indexmany {o m }
 {
   \clist_gset:Nn \indexmany: {#2} 
   \IfValueTF {#1}
    { 
      \clist_map_inline:Nn\indexmany: 
        {
          \index{#1>##1}\index{##1}
        }
    }
    { 
     \clist_map_inline:Nn\indexmany: 
      {
        \index{##1}
      } 
    }
 }
 \ExplSyntaxOff
%    \end{macrocode}
%
% \begin{docCommand} {indexboth}{ {arg1} {arg2} }
%  Indexes both arguments for example mathematical symbols
% \end{docCommand}
%    \begin{macrocode} 
\newcommand{\idxboth}[2]{\mbox{}\index{#1 #2}\index{#2>#1}}
\newcommand{\idxbothbegin}[2]{\mbox{}\index{#1 #2|(}\index{#2>#1|(}}
\newcommand{\idxbothend}[2]{\mbox{}\index{#1 #2|)}\index{#2>#1|)}}
\ExplSyntaxOn
\cs_gset_eq:NN \indexboth\idxboth
\cs_gset_eq:NN \indexbothbegin \idxbothbegin
\cs_gset_eq:NN \indexbothend\idxbothend
\ExplSyntaxOff
%    \end{macrocode}
% 
%  
%    \begin{macrocode}
\DeclareRobustCommand{\idxfont}[1]{\index{#1 (font)}\texttt{#1}\xspace}%
\DeclareRobustCommand{\idxlanguage}[1]{\index{#1 (script)}\index{scripts>#1}\texttt{#1}\xspace}%
%    \end{macrocode}
%
%  
%
% We define a related macro for indexing accents.  In a previous version
% of this file, \indexaccent additionally included "see also accents" in
% the index.  This became distracting so I made \indexaccent a synonym
% for \indexcommand for the time being.  Because punctuation marks can
% be problematic for makeindex, we define an \indexpunct macro that
% sorts its argument under the comparatively innocuous "\_".
%
%    \begin{macrocode}
\begingroup
 \catcode`\|=0
 \catcode`\\=12
 |gdef|sanitize#1#2!!!{%
   |ifx#1\%
     #2%
   |else
     #1#2%
   |fi
}
|endgroup
%    \end{macrocode}
%
%  \begin{docCommand}{indexcommand}{\oarg{}\marg{command} }
%    Index a \emph{symbol}, which may or may not begin with a \emph{backslash}.  (Is
%  there a better way to do this?)  Also, if symbol is given as an
%    optional argument is given, typeset that symbol in the index, as well
% \end{docCommand}
%
%  
%    \begin{macrocode}
\NewDocumentCommand \indexcommand { o m }  
  {
    \edef\sanitized{\expandafter\sanitize\string#2!!!}%
    %\def\first@arg{#1}%
    \IfNoValueTF{#1}
    {
       \expandafter\index\expandafter{\sanitized=\string\verb+\string#2+}%
    }
    {
       \expandafter\index\expandafter{\sanitized=\string\verb+\string#2+ (#1)}%
    }
  }
%    \end{macrocode}
%  
%    \begin{macrocode}
\NewDocumentCommand \indexcypriot { o m }  
  {
    \edef\sanitized{\expandafter\sanitize\string#2!!!}%
    \IfNoValueTF{#1}
    {
       \expandafter\index\expandafter{Cypriot>\sanitized=\string\verb+\string#2+}%
    }
    {
       \expandafter\index\expandafter{Cypriot>\sanitized=\string\verb+\string#2+ (#1)}%
    }
  }
%    \end{macrocode}  
%
%    \begin{macrocode}
\NewDocumentCommand \indexstaves { o m }  
  {
    \edef\sanitized{\expandafter\sanitize\string#2!!!}%
    \IfNoValueTF{#1}
    {
       \expandafter\index\expandafter{Staves>\sanitized=\string\verb+\string#2+}%
    }
    {
       \expandafter\index\expandafter{Staves>\sanitized=\string\verb+\string#2+ (#1)}%
    }
  }
%    \end{macrocode} 
%    
%    \begin{macrocode}
\NewDocumentCommand \indexlinearb { o m }  
  {
    \edef\sanitized{\expandafter\sanitize\string#2!!!}%
    \IfNoValueTF{#1}
    {
       \expandafter\index\expandafter{Linear B>\sanitized=\string\verb+\string#2+}%
    }
    {
       \expandafter\index\expandafter{Linearb>\sanitized=\string\verb+\string#2+ (#1)}%
    }
  }
%    \end{macrocode} 
%
%    \begin{macrocode}
\NewDocumentCommand \indexugar { o m }  
  {
    \edef\sanitized{\expandafter\sanitize\string#2!!!}%
    \IfNoValueTF{#1}
    {
       \expandafter\index\expandafter{Ugarite>\sanitized=\string\verb+\string#2+}%
    }
    {
       \expandafter\index\expandafter{Ugarite>\sanitized=\string\verb+\string#2+ (#1)}%
    }
  }
%    \end{macrocode} 

% \begin{docCommand} {indexoldpersian} {}
%   Indexing and doc command for symbols tables.
% \end{docCommand}
%    \begin{macrocode}
\NewDocumentCommand \indexoldpersian { o m }  
  {
    \edef\sanitized{\expandafter\sanitize\string#2!!!}%
    \IfNoValueTF{#1}
    {
       \expandafter\index\expandafter{Old Persian>\sanitized=\string\verb+\string#2+}%
    }
    {
       \expandafter\index\expandafter{Old Persian>\sanitized=\string\verb+\string#2+ (#1)}%
    }
  }
%    \end{macrocode} 
% \begin{docCommand} {indexsoutharabian} {}
%    Indexing and doc command for symbols tables.
% \end{docCommand}
%    \begin{macrocode}
\NewDocumentCommand \indexsoutharabian { o m }  
  {
    \edef\sanitized{\expandafter\sanitize\string#2!!!}%
    \IfNoValueTF{#1}
    {
       \expandafter\index\expandafter{South Arabian>\sanitized=\string\verb+\string#2+}%
    }
    {
       \expandafter\index\expandafter{South Arabian>\sanitized=\string\verb+\string#2+ (#1)}%
    }
  }
%    \end{macrocode} 
%
% \section{Indexing mathematical symbols}
%
% The currently available fonts 
% The following indexing commands are auxiliary commands to
% index unicode symbols for maths. 
% \tcbdocmarginnote{26-06-2015}
%    \begin{macrocode}
\NewDocumentCommand \indexmathcmd { o m }  
  {
    \edef\sanitized{\expandafter\sanitize\string#2!!!}%
    \IfNoValueTF{#1}
    {
       \expandafter\index\expandafter{#1>\sanitized=\string\verb+\string#2+
       ($#2$)}
       % put command also
      \expandafter\index\expandafter{\string#1=\string\verb+\string#2+ ($\string#2$)*}%
    }
    {
      \expandafter\index\expandafter{#1>\sanitized=\string\verb+\string#2+ ($#2$)}%
      \expandafter\index\expandafter{\string#1=\string\verb+\string#2+ ($\string#2$)}%
    }
  }
%    \end{macrocode} 
%
% \begin{docCommand}{indexaccent}{}
%   Syntactic sugar identical to \refCom{indexcommand}
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset_eq:NN \indexaccent\indexcommand
\cs_new:Npn \CLSLpipe {|}
\ExplSyntaxOff  
%    \end{macrocode}
%   

% {indexpunct}
%    \begin{macrocode}
%  
  \newcommand{\indexpunct}[2][]{%
    \def\first@arg{#1}%
    \def\second@arg{#2}%
    \ifx\first@arg\@empty
      \ifx\second@arg\CLSLpipe
        \index{_=\magicvertname}%
      \else
        \index{_=\string\verb+\string#2+}%
      \fi
    \else
      \ifx\second@arg\CLSLpipe
        \index{_=\magicvertname{} (#1)}%
      \else
        \index{_=\string\verb+\string#2+ (#1)}%
      \fi
    \fi
  }
%    \end{macrocode}
% 
%    \begin{macrocode}
%
% Define a counter to keep track of how many symbols are listed.
% Output this counter to the log file at the end of each run.
% Define |\prevtotalsymbols| to be the total number of symbols from
% the previous run.
%


%\usepackage{longdiv}
\newcommand\FC{\pkgname{fc}}
\newcommand\VIET{\pkgname{vietnam}}
%\newcommand\ABX{\pkgname{mathabx}}
%    \end{macrocode}
%

% \begin{docCommand} {incsyms} {void}
%  We define an integer counter to keep track of all the symbols we load
%  and list.\footnote{Unicode characters are counted separately}
%  These are symbols which can be produced using command sequences.
% \end{docCommand}
%   
%    \begin{macrocode}
%\setmathfont{stix}
% \setmathfont{Asana-Math.otf}

\ExplSyntaxOn
  \int_new:c {totalsymbols}
  \cs_new:Npn \incsyms { \int_gincr:c {totalsymbols} }
  \cs_new:Npn \thetotalsymbols {\int_use:c {totalsymbols} }
\ExplSyntaxOff
%    \end{macrocode}
%
% \begin{docCommand}{graybox} {\meta{void}}
% \end{docCommand}
%    \begin{macrocode}
\newcommand*{\graybox}{\textcolor{thegray!60}{\rule[-\adp]{\awd}{\aht}}}
 
% Define \blackacc to display an accented box, given an accent command.
% Define \blackacchack to display an accented "a" and then black out
% the "a".
\newlength\awd
\newlength\aht
\newlength\adp
\settowidth{\awd}{\normalfont m}
\settoheight{\aht}{\normalfont a}
\settodepth{\adp}{\normalfont m}
\advance\adp by 0.06pt    % In Computer Modern, "a" extends slightly below its bounding box.
\advance\aht by \adp
\gdef\blackacchack#1{#1a\llap{\graybox}}
\gdef\blackacc#1{#1{\graybox}}
\gdef\blackacctwo#1{#1{\graybox}{\graybox}}
%    \end{macrocode}
% 
% 
%
% Symbol+verbatim for various types of symbols
%    \begin{macrocode}
\def\E#1{%
  \begingroup
    \lccode`|=`\\
    \def\EStruename{ES#1T}
    \lowercase{\incsyms\index{#1=\string\verb+\string|#1+ (\string|\EStruename)}}
  \endgroup
  \csname ES#1T\endcsname & \csname ES#1D\endcsname &
  \ttfamily\expandafter\string\csname#1\endcsname
}


%    \end{macrocode}
%    
% \subsection{Indexing archaic symbols}  
% 
% These commands are here to be able to index these symbols for the index and to typeset
% them in the symbols appendix.
% 
% \begin{docCommand} {Kcyp} {\oarg{text cmd} \marg{symbol command}}
%   Indexes and prints the Cypriot archaic font symbols.
%   
% \begin{verbatim}
% \Kcyp[\textcypr{\Ca}]\Ca
% \end{verbatim}
% 
% \end{docCommand}
%    \begin{macrocode}
\def\Kcyp@opt@arg[#1]#2{\incsyms\indexcypriot[\textcypr{#1}]{#2}#1 &\ttfamily\string#2}
\def\Kcyp@no@opt@arg#1{\incsyms\indexcypriot[\textcypr{#1}]{#1}#1 &\ttfamily\string#1}
\def\Kcyp{\@ifnextchar[{\Kcyp@opt@arg}{\Kcyp@no@opt@arg}}
%    \end{macrocode}
%    
% \begin{docCommand} {Kstav} { \oarg{cmd} \marg{stave cmd}}      
%   Indexes and prints an Icelandic  stave. 
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn

\cs_set:Npn \Kstav_opt_arg [#1]#2
  {
    \incsyms\indexstaves[#1]{#2}# 1 &\ttfamily\string#2
  }
 
\cs_set:Npn \Kstav_no_opt_arg #1
  {
    \incsyms\indexstaves[#1]{#1}#1 &\ttfamily\string#1
  }

\NewDocumentCommand\Kstav {o m} {
  \IfNoValueTF {#1} 
    {
      \Kstav_no_opt_arg {#2}
    }
    {
      \Kstav_opt_arg [#1] {#2}
    }
}
\ExplSyntaxOff
%    \end{macrocode}
%    
%    
%    \begin{macrocode}
\def\K@opt@arg[#1]#2{\incsyms\indexcommand[#1]{#2}#1 &\ttfamily\string#2}
\def\K@no@opt@arg#1{\incsyms\indexcommand[#1]{#1}#1 &\ttfamily\string#1}
\def\K{\@ifnextchar[{\K@opt@arg}{\K@no@opt@arg}}
%    \end{macrocode}    
%    \begin{macrocode}
\def\Kp#1{\incsyms\indexpunct[$#1$]{#1}#1 &\ttfamily\string#1}

\def\KED[#1][#2][#3]#4{\incsyms\indexcommand[#1]{#2}#3 &\ttfamily\string#4}
\def\Kfeyn#1{\incsyms\indexcommand[\string\feyn{#1}]{\feyn{#1}}\feyn{#1} &\ttfamily\string\feyn\string{\string#1\string}}

\def\Kp#1{\incsyms\indexpunct[$#1$]{#1}#1 &\ttfamily\string#1}

\def\Kpig#1{\incsyms\index{pigpenfont #1=\string\verb+{\string\pigpenfont\space#1}+\space(\string\CLSLpig{#1})}\CLSLpig{#1} &\ttfamily\string{\string\pigpenfont\space\string#1\string}}
\def\Ks#1{\incsyms\indexcommand[\string\encone{\string#1}]{#1}{\encone{#1}} &\ttfamily\string#1$^*$}
%    \end{macrocode}

% 
%
% This macro is also from the comprehensive and takes
% the symbol command as its only argument. It provides
% |T1| encoding and also adds the command to the index.
%    \begin{macrocode}   
\newcommand\Kt[1]{%
        \incsyms\indexcommand[\string\encone{\string#1}]{#1}{%
        \encone{#1}} &\ttfamily\string#1}%
%    \end{macrocode}
% 
%
%    \begin{macrocode}
\def\Kv#1{\incsyms\indexcommand[\string\encfive{\string#1}]{#1}{\encfive{#1}} &\ttfamily\string#1}

\def\Kgr@opt@arg[#1]#2{\incsyms\indexcommand[\string\encgreek{\string#1}]{#2}{\encgreek{#1}} &\ttfamily\string#2}
  \def\Kgr@no@opt@arg#1{\incsyms\indexcommand[\string\encgreek{\string#1}]{#1}{\encgreek{#1}} &\ttfamily\string#1}
  \def\Kgr{\@ifnextchar[{\Kgr@opt@arg}{\Kgr@no@opt@arg}}

\def\KN[#1][#2]#3{\incsyms\indexcommand[\string#1]{#3} #1 & #2 & \ttfamily\string#3}
\def\KNbig[#1][#2]#3{\incsyms\indexcommand[\string#2]{#3} #1 & #2 & \ttfamily\string#3}
\def\Knoidx#1{\incsyms#1 &\ttfamily\string#1}
%% N
 \def\N@opt@arg[#1]#2{\incsyms\indexcommand[$\string#1$]{#2}$#1$ & $\Big#1$ &\ttfamily\string#2}
  \def\N@no@opt@arg#1{\incsyms\indexcommand[$\string#1$]{#1}$#1$ & $\Big#1$ &\ttfamily\string#1}
  \def\N{\@ifnextchar[{\N@opt@arg}{\N@no@opt@arg}}
  \def\Nn[#1]#2{%
    \incsyms\indexcommand[$\string\nathdouble\string#1$]{#2}%
    $\nathdouble#1$ & $\nathdouble{\Big#1}$ & \ttfamily\string#2}
  \def\Nnt#1[#2]#3{%
    \incsyms\indexcommand{\triple}%
    $\nathtriple#2$ & $\nathtriple{\Big#2}$ &
    \ttfamily\expandafter\string\csname#1triple\endcsname\string#3}
  \def\Np@opt@args[#1]{\@ifnextchar[{\Np@two@opt@args[#1]}{\Np@one@opt@arg[#1]}}
  \def\Np@two@opt@args[#1][#2]#3{\incsyms\index{_=\string#2{} ($\string#1$)}$#1$ & $\Big#1$ &\ttfamily\string#3}
  \def\Np@one@opt@arg[#1]#2{\incsyms\indexpunct[$\string#1$]{#2}$#1$ & $\Big#1$ &\ttfamily\string#2}
  \def\Np@no@opt@args#1{\incsyms\indexpunct[$\string#1$]{#1}$#1$ & $\Big#1$ &\ttfamily\string#1}
  \def\Np{\@ifnextchar[{\Np@opt@args}{\Np@no@opt@args}}
  \def\Nbig[#1]#2{\incsyms\indexcommand[$\string\Big\string#1$]{#2}$#1$ & $\Big#1$ &\ttfamily\string#2}
%% Q commands
 \def\Q@opt@arg[#1]#2{\incsyms\indexaccent[\string\blackacchack{\string#1}]{#2}#1{A}#1{a} &
           \ttfamily\string#2\string{A\string}\string#2\string{a\string}}
  \def\Q@no@opt@arg#1{\incsyms\indexaccent[\string\blackacchack{\string#1}]{#1}#1{A}#1{a} &
           \ttfamily\string#1\string{A\string}\string#1\string{a\string}}
  \def\Q{\@ifnextchar[{\Q@opt@arg}{\Q@no@opt@arg}}

\def\Qc#1{\incsyms\indexaccent[\string\blackacc{\string#1}]{#1}#1{A}#1{a} &
         \ttfamily\string#1\string{A\string}\string#1\string{a\string}}
\def\Qe[#1][#2]#3{%
  \incsyms\incsyms\index{_=\string#2{} (\string\blackacchack{\string#1})}%
  #3{A}#3{a} &
  \ttfamily\string#3\string{A\string}\string#3\string{a\string}}
\def\Qt#1{\incsyms\indexaccent[\string\encone{\string\blackacc{\string#1}}]{#1}{\encone{#1{A}#1{a}}} &
          \ttfamily\string#1\string{A\string}\string#1\string{a\string}}

\def\Qpc#1#2{\incsyms\indexcommand{#2}{\raisebox{1pt}{\tiny[#1]}} &
             \ttfamily\string#2\string{A\string}\string#2\string{a\string}}
\def\Qpfc[#1]#2{\incsyms\indexaccent[\string\encfour{\string\blackacchack{\string#1}}]{#2}\encfour{#1{A}#1{a}} &
           \ttfamily\string#2\string{A\string}\string#2\string{a\string}}
%% TODO
\newif\ifFC\FCfalse
\ifFC
  \def\Qiv#1#2{\incsyms\indexaccent[\string\encfour{\string\blackacchack{\string#1}}]{#1}\encfour{#1{A}#1{a}} &
               \ttfamily\string#1\string{A\string}\string#1\string{a\string}$^#2$}
  \def\QivBAR#1{\incsyms\index{_=\string\magicVertname{}
                (\string\encfour{\string\blackacchack{\string\FCbar}})}
                \encfour{\FCbar{A}\FCbar{a}} &
                \ttfamily\string\|\string{A\string}\string\|\string{a\string}$^#1$}
\else
  \def\Qiv#1#2{\Qpc{T4}{#1}$^#2$}
  \def\QivBAR#1{\Qpc{T4}{\|}$^#1$}
\fi

\newif\ifVIET\VIETfalse
\ifVIET
  \def\Qv#1#2{\incsyms\indexaccent[\string\encfive{\string\blackacchack{\string#1}}]{#1}{\encfive{#1{A}#1{a}}} &
              \ttfamily\string#1\string{A\string}\string#1\string{a\string}$^#2$}
\else
  \def\Qv#1#2{\Qpc{T5}{#1}$^#2$}\def\Qv#1#2{Err}%TODO
\fi
%% R Commands
  % We use \cmd{displaystyle} so that variable-sized symbols will be big.
  \def\R@opt@arg[#1]#2{\incsyms\indexcommand[$\string#1$]{#2}$#1$ & $\displaystyle#1$ &\ttfamily\string#2}
  \def\R@no@opt@arg#1{\incsyms\indexcommand[$\string#1$]{#1}$#1$ & $\displaystyle#1$ &\ttfamily\string#1}
  \def\R{\@ifnextchar[{\R@opt@arg}{\R@no@opt@arg}}
%% T commands
%    \end{macrocode}
%
% \begin{docCommand}{indexDing} { \marg{ ding symbol number }}
%   Auxiliary function to index and print in a table ding symbols. originally
%   from Comprehensive.
% \end{docCommand}
%
%    \begin{macrocode}
\newcommand \indexDing [1] {\incsyms\indexcommand{\ding}\ding{#1} &\ttfamily\string\ding\string{#1\string}}
%    \end{macrococode}
%
%    \begin{macrocode}
\def\Tm#1{\incsyms\indexcommand{\maya}$\mayadigit{#1}$ &\ttfamily\string\maya\string{#1\string}}
\def\Tmoon#1{\incsyms\indexcommand{\MoonPha}\MoonPha{#1} &\ttfamily\string\MoonPha\string{#1\string}}
%    \end{macrocode}
%
% \begin{docCommand}{indexTextcomp} {\oarg{ltx cmd} \marg{symbol arg}}
%   This command typesets its command argument in a table row of two
%   (used for textcomp symbols).
% \end{docCommand}   
%    \begin{macrocode}
\newcommand{\indexTextcomp}[2][]{%
   \incsyms#1 & 
   \indexcommand[#2]{#2}% necessary to put symbol \text
   #2%  
   &\ttfamily\string#2
}

   
\newcommand{\Vp}[2][]{\incsyms#1 & \indexpunct[$#2$]{#2}#2 &\ttfamily\string#2}

%W
\def\W@opt@arg[#1]#2#3{%
    \incsyms\indexaccent[$\string\blackacc{\string#1}$]{#2}%
    $#1{#3}$ &\ttfamily\string#2\string{#3\string}}

 \def\W@no@opt@arg#1#2{%
    \incsyms\indexaccent[$\string\blackacc{\string#1}$]{#1}%
    $#1{#2}$ &\ttfamily\string#1\string{#2\string}}
  \def\W{\@ifnextchar[{\W@opt@arg}{\W@no@opt@arg}}

\def\Wf#1#2{\incsyms\indexcommand{#1}$#1{#2}$ &\ttfamily\string#1\string{#2\string}}
\def\Ww#1#2#3{\incsyms\indexcommand{#2}$#1{#3}$ &\ttfamily\string#2\string{#3\string}}
\def\Wul#1#2#3{%
  \incsyms\indexaccent[$\string\blackacctwo{\string#1}$]{#1}%
  $#1{#2}{#3}$ &\ttfamily\string#1\string{#2\string}\string{#3\string}}
%    \end{macrocode}

% \begin{docCommand}{X} { \oarg{command} \marg{command} }
%   Typesets its arguments as commands and also the resulting symbol in 
%   math. Used for symbol tables in the documentation.
% \end{docCommand}
%
% \tcbdocmarginnote{U 25-6-2015}
%    \begin{macrocode}
\def\X@opt@arg[#1]#2{\incsyms\indexcommand[$\string#1$]{#2}$#1$ &\ttfamily\string#2}
\def\X@no@opt@arg#1{\incsyms\indexcommand[$\string#1$]{#1}$#1$ &\ttfamily\string#1}
\def\X{\@ifnextchar[{\X@opt@arg}{\X@no@opt@arg}}
%    \end{macrocode}

%    \begin{macrocode}
\def\Y#1{\incsyms\indexcommand[$\string\big\string#1$]{#1}$\big#1$ & $\Bigg#1$ &\ttfamily\string#1}
%    \end{macrocode}
%

%    \begin{macrocode}
\ExplSyntaxOn
\def\Z#1{\incsyms\indexcommand[$\string#1$]{#1}\ttfamily\string#1}
\ExplSyntaxOff
%    \end{macrocode}
%
%
% {docfile}
% NEED TO CHECK IF THIS IS NECESSARY
%    \begin{macrocode}
\def\docfile#1{\protect\texttt{\textbackslash #1}\index{#1}}
%    \end{macrocode}
% 
%
% {bibsample}
%  Typesets a sample of bib
%    \begin{macrocode}
\newenvironment{bibsample}
  {\trivlist\samepage
   \setlength{\itemsep}{0pt}}
  {\endtrivlist}
%% doccommands
\newcommand*{\marglistfont}{\itshape}
\newcommand*{\margoptionfont}{\ttfamily}
\newcommand*{\margnotefont}{}

\newcommand*{\optionlistfont}{\bfseries}

\newcommand*{\ltxsyntaxfont}{\ttfamily}

\newcommand*{\ltxsyntaxlabelfont}{\bfseries}

\newcommand*{\changelogfont}{\normalfont}

\newcommand*{\changeloglabelfont}{\bfseries}

%% needed for listings????
\newcommand*{\verbatimfont}{\ttfamily}%


\let\displayverbfont\ttfamily

\renewcommand*{\verbatim@font}{\verbatimfamily}

\def\cmd#1{\cs{\expandafter\cmd@to@cs\string#1}}%

\def\cmd@to@cs#1#2{\char\number`#2\relax}

\newrobustcmd*{\env}[1]{\mbox{\verbatimfont\bfseries\textcolor{thegreen}{#1}}}

\newrobustcmd*{\len}[1]{\mbox{\verbatimfont\textbackslash#1}}

\newrobustcmd*{\cnt}[1]{\mbox{\verbatimfont#1}}

\newlength{\marglistsep}

\newlength{\marglistwidth}
\setlength{\marglistwidth}{(\oddsidemargin+1in)*85/100}%
\deflength{\marglistsep}{10pt}
%% This needs thorough checking as to restore previous definitions
%% of parsep we want parsep to be a bit higher than standard enumerated lists.


\global\newlength\oldparsep
\newenvironment*{marglist}
  {\setlength\oldparsep{\parsep}\list{}{%
     \parsep 3.5\p@ \@plus0\p@ \@minus\p@
     \setlength{\labelwidth}{\marglistwidth}%
     \setlength{\labelsep}{\marglistsep}%
     \setlength{\leftmargin}{0pt}%
     \renewcommand*{\makelabel}[1]{\hss\marglistfont##1}}}
  {\endlist\setlength\parsep{\oldparsep}}

% tt 
\newenvironment*{margoptionslist}
  {\setlength\oldparsep{\parsep}\list{}{%
     \parsep 3.5\p@ \@plus0\p@ \@minus\p@
     \setlength{\labelwidth}{\marglistwidth}%
     \setlength{\labelsep}{\marglistsep}%
     \setlength{\leftmargin}{0pt}%
     \renewcommand*{\makelabel}[1]{\hss\margoptionfont\detokenize{##1}}}}
  {\endlist\setlength\parsep{\oldparsep}}
  
  

\newenvironment*{keymarglist}
  {\marglist
   \setlength{\itemsep}{0pt}%
   \raggedright}
  {\endmarglist}
% color definitions
\def\colDef#1{\textcolor{themacro}{#1}}
% color for options
\def\colOpt#1{\textcolor{theblue}{#1}}
\newcommand{\option}[1]{\colOpt{#1}}
%    \end{macrocode}
% 
%
%    \begin{macrocode}
\def\beamer{\textsc{beamer}}
\def\pdf{\textsc{pdf}}
\def\pgfname{\textsc{pgf}\xspace}
\def\tikzname{Ti\emph{k}Z\xspace}
\def\pstricks{\textsc{pstricks}}
\def\prosper{\textsc{prosper}}
\def\seminar{\textsc{seminar}}
\def\texpower{\textsc{texpower}}
\def\foils{\textsc{foils}}

{
  \makeatletter
  \global\let\myempty=\@empty
  \global\let\mygobble=\@gobble
  \catcode`\@=12
  \gdef\getridofats#1@#2\relax{%
    \def\getridtest{#2}%
    \ifx\getridtest\myempty%
      \expandafter\def\expandafter\strippedat\expandafter{\strippedat#1}
    \else%
      \expandafter\def\expandafter\strippedat\expandafter{\strippedat#1\protect\printanat}
      \getridofats#2\relax%
    \fi%
  }

  \gdef\removeats#1{%
    \let\strippedat\myempty%
    \edef\strippedtext{\stripcommand#1}%
    \expandafter\getridofats\strippedtext @\relax%
  }
  
  \gdef\stripcommand#1{\expandafter\mygobble\string#1}
}


\def\printanat{\char`\@}

\def\declare{\afterassignment\pgfmanualdeclare\let\next=}
\def\pgfmanualdeclare{\ifx\next\bgroup\bgroup\color{red!75!black}\else{\color{red!75!black}\next}\fi}


\let\textoken=\command
\let\endtextoken=\endcommand

\def\myprintocmmand#1{\texttt{\char`\\#1}}

\def\example{\par\smallskip\noindent\textit{Example: }}
\def\themeauthor{\par\smallskip\noindent\textit{Theme author: }}


\def\indexoption#1{%
  \index{#1@\protect\texttt{#1} option}%
  \index{Graphic options and styles!#1@\protect\texttt{#1}}%
}

\def\itemcalendaroption#1{\item \declare{\texttt{#1}}%
  \index{#1@\protect\texttt{#1} date test}%
  \index{Date tests!#1@\protect\texttt{#1}}%
}



\def\class#1{\list{}{\leftmargin=2em\itemindent-\leftmargin\def\makelabel##1{\hss##1}}%
\extractclass#1@\par\topsep=0pt}

\def\endclass{\endlist}

\def\extractclass#1#2@{%
\item{{{\ttfamily\char`\\documentclass}#2{\ttfamily\char`\{\declare{#1}\char`\}}}}%
  \index{#1@\protect\texttt{#1} class}%
  \index{Classes!#1@\protect\texttt{#1}}}



%\def\index@prologue{\section*{Index}\addcontentsline{toc}{section}{Index}
%  This index only contains automatically generated entries. A good
%  index should also contain carefully selected keywords. This index is
%  not a good index.
%  \bigskip
%}
%\@ifundefined{c@IndexColumns}{\newcount\c@IndexColumns}{}
%\c@IndexColumns=2
%  \def\theindex{\@restonecoltrue
%    \columnseprule \z@  \columnsep 29\p@
%    \twocolumn[\index@prologue]%
%       \parindent -30pt
%       \columnsep 15pt
%       \parskip 0pt plus 1pt
%       \leftskip 30pt
%       \rightskip 0pt plus 2cm
%       \small
%       \def\@idxitem{\par}%
%    \let\item\@idxitem \ignorespaces}
%  \def\endtheindex{\onecolumn}
%\def\noindexing{\let\index=\@gobble}



\newcommand\symarrow[1]{
  \index{#1@\protect\texttt{#1} arrow tip}%
  \index{Arrow tips!#1@\protect\texttt{#1}}
  \texttt{#1}& yields thick  
  \begin{tikzpicture}[arrows={#1-#1},thick,baseline]
    \useasboundingbox (0pt,-0.5ex) rectangle (1cm,2ex);
    \draw (0pt,.5ex) -- (1cm,.5ex);
  \end{tikzpicture} and thin
  \begin{tikzpicture}[arrows={#1-#1},thin,baseline]
    \useasboundingbox (0pt,-0.5ex) rectangle (1cm,2ex);
    \draw (0pt,.5ex) -- (1cm,.5ex);
  \end{tikzpicture}
}

\newcommand\sarrow[2]{
  \index{#1@\protect\texttt{#1} arrow tip}%
  \index{Arrow tips!#1@\protect\texttt{#1}}
  \index{#2@\protect\texttt{#2} arrow tip}%
  \index{Arrow tips!#2@\protect\texttt{#2}}
  \texttt{#1-#2}& yields thick  
  \begin{tikzpicture}[arrows={#1-#2},thick,baseline]
    \useasboundingbox (0pt,-0.5ex) rectangle (1cm,2ex);
    \draw (0pt,.5ex) -- (1cm,.5ex);
  \end{tikzpicture} and thin
  \begin{tikzpicture}[arrows={#1-#2},thin,baseline]
    \useasboundingbox (0pt,-0.5ex) rectangle (1cm,2ex);
    \draw (0pt,.5ex) -- (1cm,.5ex);
  \end{tikzpicture}
}

\newcommand\carrow[1]{
  \index{#1@\protect\texttt{#1} arrow tip}%
  \index{Arrow tips!#1@\protect\texttt{#1}}
  \texttt{#1}& yields for line width 1ex
  \begin{tikzpicture}[arrows={#1-#1},line width=1ex,baseline]
    \useasboundingbox (0pt,-0.5ex) rectangle (1.5cm,2ex);
    \draw (0pt,.5ex) -- (1.5cm,.5ex);
  \end{tikzpicture}
}
\def\myvbar{\char`\|}
\newcommand\plotmarkentry[1]{%
  \index{#1@\protect\texttt{#1} plot mark}%
  \index{Plot marks!#1@\protect\texttt{#1}}
  \texttt{\char`\\pgfuseplotmark\char`\{\declare{#1}\char`\}} &
  \tikz\draw[color=black!25] plot[mark=#1,mark options={fill=examplefill,draw=black}] coordinates{(0,0) (.5,0.2) (1,0) (1.5,0.2)};\\
}
\newcommand\plotmarkentrytikz[1]{%
  \index{#1@\protect\texttt{#1} plot mark}%
  \index{Plot marks!#1@\protect\texttt{#1}}
  \texttt{mark=\declare{#1}} & \tikz\draw[color=black!25]
  plot[mark=#1,mark options={fill=examplefill,draw=black}] 
    coordinates {(0,0) (.5,0.2) (1,0) (1.5,0.2)};\\
}



\ifx\scantokens\@undefined
  \PackageError{phd}{You need to use extended latex
    (elatex) or (pdfelatex) to process this document}{}
\fi

\begingroup
\catcode`|=0
\catcode`[= 1
\catcode`]=2
\catcode`\{=12
\catcode `\}=12
\catcode`\\=12 |gdef|find@example#1\end{codeexample}[|endofcodeexample[#1]]
|endgroup

\begingroup
\catcode`\^=7
\catcode`\^^M=13
\catcode`\ =13%
\gdef\returntospace{\catcode`\ =13\def {\space}\catcode`\^^M=13\def^^M{}}%
\endgroup

\begingroup
\catcode`\%=13
\catcode`\^^M=13
\gdef\commenthandler{\catcode`\%=13\def%{\@gobble@till@return}}
\gdef\@gobble@till@return#1^^M{}
\gdef\@gobble@till@return@ignore#1^^M{\ignorespaces}
\gdef\typesetcomment{\catcode`\%=13\def%{\@typeset@till@return}}
\gdef\@typeset@till@return#1^^M{{\def%{\char`\%}\textsl{\char`\%#1}}\par}
\endgroup

\define@key{codeexample}{width}{\setlength\codeexamplewidth{#1}}
\define@key{codeexample}{graphic}{\colorlet{codebackground}{#1}}
\define@key{codeexample}{code}{\colorlet{codebackground}{#1}}
\define@key{codeexample}{execute code}{\csname code@execute#1\endcsname}
\define@key{codeexample}{code only}[]{\code@executefalse}
\define@key{codeexample}{pre}{\def\code@pre{#1}}
\define@key{codeexample}{post}{\def\code@post{#1}}
\define@key{codeexample}{vbox}[]{\def\code@pre{\vbox\bgroup\setlength{\hsize}{\linewidth-6pt}}\def\code@post{\egroup}}
\define@key{codeexample}{ignorespaces}[]{\let\@gobble@till@return=\@gobble@till@return@ignore}
\define@key{codeexample}{leave comments}[]{\def\code@catcode@hook{\catcode`\%=12}\let\commenthandler=\relax\let\typesetcomment=\relax}
\def\code@pre{}
\def\code@post{}
\def\code@catcode@hook{}

\newdimen\codeexamplewidth
\newif\ifcode@execute
\newbox\codeexamplebox
\def\codeexample[#1]{%
  \begingroup%
  \code@executetrue
  \setlength\codeexamplewidth{4cm+7pt}
  \setkeys{codeexample}{#1}%
  \parindent0pt
  \begingroup%
  \par%
  \medskip%
  \let\do\@makeother%
  \dospecials%
  \obeylines%
  \@vobeyspaces%
  \catcode`\%=13%
  \catcode`\^^M=13%
  \code@catcode@hook%
  \relax%
  \find@example}
\def\endofcodeexample#1{%
  \endgroup%
  \ifcode@execute%
    \setbox\codeexamplebox=\hbox{%
      {%
        {%
          \returntospace%
          \commenthandler%
          \xdef\code@temp{#1}% removes returns and comments
        }%
        \colorbox{codebackground}{\color{black}\ignorespaces%
          \code@pre\expandafter\scantokens\expandafter{\code@temp\ignorespaces}\code@post\ignorespaces}%
      }%
    }%
    \ifdim\wd\codeexamplebox>\codeexamplewidth%
      \def\code@start{\par}%
      \def\code@flushstart{}\def\code@flushend{}%
      \def\code@mid{\parskip2pt\par\noindent}%
      \def\code@width{\linewidth-6pt}%
      \def\code@end{}%
    \else%
      \def\code@start{%
        \linewidth=\textwidth%
        \parshape \@ne 0pt \linewidth
        \leavevmode%
        \hbox\bgroup}%
      \def\code@flushstart{\hfill}%
      \def\code@flushend{\hbox{}}%
      \def\code@mid{\hskip6pt}%
      \def\code@width{\linewidth-12pt-\codeexamplewidth}%
      \def\code@end{\egroup}%
    \fi%
    \code@start%
    \noindent%
    \begin{minipage}[t]{\codeexamplewidth}\raggedright
      \hrule width0pt%
      \footnotesize\vskip-1em%
      \code@flushstart\box\codeexamplebox\code@flushend%
      \vskip-1ex
      \leavevmode%
    \end{minipage}%
  \else%
    \def\code@mid{\par}
    \def\code@width{\linewidth-6pt}
    \def\code@end{}
  \fi%
  \code@mid%  
  \colorbox{codebackground}{%
    \begin{minipage}[t]{\code@width}%
      {%
        \let\do\@makeother
        \dospecials
        \frenchspacing\@vobeyspaces
        \normalfont\ttfamily\footnotesize
        \typesetcomment%
        \@tempswafalse
        \def\par{%
          \if@tempswa
          \leavevmode \null \@@par\penalty\interlinepenalty
          \else
          \@tempswatrue
          \ifhmode\@@par\penalty\interlinepenalty\fi
          \fi}%
        \obeylines
        \everypar \expandafter{\the\everypar \unpenalty}%
        #1}
    \end{minipage}}%
  \code@end%
  \par%
  \medskip
  \end{codeexample}
}

\def\endcodeexample{\endgroup}
%    \end{macrocode}
%
% 
% From pgfplots manual
% 
%    \begin{macrocode}
\long\def\codeexamplenl{\noexpand\par}%
\pgfqkeys{/codeexample}{%
	every codeexample/.style={
		width=3.9cm,
		/pgfplots/every axis/.append style={legend style={fill=codebackground}}
	},
	narrow/.style={width=6.9cm},
	%tabsize=4,
	%pre={\begin{minipage}{\linewidth}\begingroup},
	%post={\endgroup\end{minipage}},
	%vbox,
	%newline=\codeexamplenl,
}
%%% Local Variables: 
%%% mode: latex
%%% TeX-master: "beameruserguide"
%%% End: 
%    \end{macrocode}
%
%
%
% \section{Phonetic Symbols}
% \subsection{Tipa}
%
% Users that make extensive use of the Tipa symbols would
% probably have no use for this package, however now and then
% these symbols can be useful when definining words and their
% pronunciation. 
%\href{http://tex.stackexchange.com/questions/36542/using-tex-for-writing-papers-on-linguistics}{using Tex for linguistics}
%
% I am indebted to egreg at \url{http://tex.stackexchange.com/questions/64830/using-tipa-with-fontspec} for the hack to get tipa to work with fontspec.
% The \pkgname{Tipa} was developed by Rei Fukui at the Graduate School  of Humanities and Sociology,
% The University of Tokyo \cite{tipa}.

%    \begin{macrocode}
\newif\ifTIPA 
\newcommand\TIPA{\pkgname{tipa}}
\newcommand\WIPA{\pkgname{wipa}}
\ifxetex
\else
  \ifluatex
  \else
    \TIPAtrue
    \RequirePackage[tone,extra,safe]{tipa}
  \fi
\fi
%    \end{macrocode}
% 
% This is also quite useful for Wikipedia transcriptions. 
% For example `phonetics' is pronounced as  |\textipa{\sffamily f@"nEtIks}| and typed as
% |\textipa{\sffamily f@"nEtIks}|
%
% |texdoc tipaman| for the full manual if this is part of your field
% of research.
% 
% \section{Referencing}
%
% Most authors that use \LaTeXe\ develop shorthands for common tasks such as, typing
% |See figure~\ref{fig:myplot}|. The advantage of a macro is that one can be consistent
% with capitalization or abbreviations.
%
% At first I thought of providing two macros for example \cs{sref} and \cs{Sref}, however
% the problem with such an approach is internationalization. If we allow the user to
% load her language then we need to pick-up the name from the \LaTeX2e\ definitions. There
% is also the additional issue that for paragraphs and sections, sometimes people prefer
% using an abbreviation. So we stay with lowercase commands and rather set the names using
% keys in the style settings file.
% 
%    \begin{macrocode}
\cxset{ref sectionname/.store in =\refsectionname@cx,
       ref chaptername/.store in =\refchaptername@cx,
       ref appendixname/.store in = \refappendixname@cx,
       ref equationname/.store in = \refequationname@cx,
       ref figurename/.store in = \reffigurename@cx,
       ref tablename/.store in = \reftablename@cx,
       ref paragraphname/.store in =\refparagraphname@cx,
       ref examplename/.store in=\refexamplename@cx,
}
\cxset{ref sectionname = \thinspace,
       ref chaptername = Chapter,
       ref appendixname = \appendixname,
       ref equationname = Equation,
       ref figurename = \figurename,
       ref tablename  = \tablename,
       ref paragraphname = \P,
       ref examplename=Example,
}
\newcommand{\fref}[1]{\reffigurename@cx~\ref{#1}}
\newcommand{\tref}[1]{\tablename~\ref{#1}}
\newcommand{\eref}[1]{equation~\ref{#1}}
\@ifundefined{cref}{\newcommand{\cref}[1]{chapter~\ref{#1}}}{}
\newcommand{\sref}[1]{\refsectionname@cx\ref{#1}}
\newcommand{\aref}[1]{\refappendixname@cx~\ref{#1}}
\newcommand{\refPar}[1]{\refparagraphname@cx\ref{#1}} %clashes with genealogy!!
\newcommand\refSee[1]{\textit{see} \textbf{\ref{#1}}}
%    \end{macrocode}
%
%

%
% 
% \section{Code demo environments}
%
%	To demonstrate LaTeX code it is sometimes desirable to have the code
%	be executed. This was pioneered in a number of packages. One of
%	the better packages to do so is \pkg{tcolorbox}. We use it to define
%	a special environment.
%

% \begin{docEnvironment}{texexample}{ \marg{title} \marg{label for referencing} } 
% The environment |texexample| will list the code
%	using the \pkgname{listings} package, so we can have a nice box and shows the
%	output at the bottom section.
%	\end{docEnvironment}
%	
%	First we define a new counter which resets at every chapter. If |c@chapter|
%	is not defined we reset it based on sections.
%
% \begin{enumerate}
%	\item [\#1] Title of the example
%	\item [\#2] label for referencing
% \end{enumerate}
% 
%    \begin{macrocode}
  \ifx\c@chapter\@undefined
    \newcounter{texexp}[section]
    \@addtoreset{c@texexp}{c@section}
  \else
    \newcounter{texexp}[chapter]
    \@addtoreset{c@texexp}{c@chapter}
  \fi 
%    \end{macrocode}
%
%	
%    \begin{macrocode}
%\tcbset{listing utf8=latin1}% optional; â€™latin1â€™ is the default.
\def\thetexexp{\@arabic\c@section.\arabic{texexp}}
%    \end{macrocode}
%    \begin{macrocode}    
\tcbset{texexp/.style={% 
    fonttitle=\small\ttfamily, 
    fontupper=\small, 
    fontlower=\small,
    coltitle=black,
    colback = codebackground,% background
    colframe=codebackground, 
      %colupper=spot!,
   },
   listing options = {%
     keywordstyle=\color{thekeywordstyle},
     belowskip=0pt, 
     escapeinside={(*@}{@*)},%
     breaklines=true,%
     backgroundcolor=\color{codebackground},%
     firstnumber=last,%
     stepnumber=1,%
     upquote=true,%
     alsoletter={_,:},%
     commentstyle=\color{thecommentstyle},%
     emph={cs,new,seq,map,inline,eq,gincr,incr,IfNoValueF,if,%
            If,exist,protect,nopar,gset,%
            set,undefine,define,add,gadd,remove,div,%
            round,truncate,max,min,mod,gzero,int,exp,put,left,args,%
            zero,newcount,protected,msg,error,%
            eval,to,arabic,alph,Alph,roman,Roman,dim%
            DeclareDocumentCommand,%
            NewDocumentCommand,%
            RenewDocumentCommand,includegraphics,
            function,local,return
         },%
           %
          % For LaTeX3 we need to add these, note % is important
          % dnâ€™t miss, at the end...
          moretexcs    = {DeclareDocumentCommand,IfBooleanTF,tex_def:D,%
          cs_new:Nn,cs_new:Npn,cs_new:cn,cs_set_nopar:Npn,token_to_meaning:N,%
          %primitives
          cs:w,cs_end:,tex_underline,group_begin:, group_end:,%
          %coffins
          NewCoffin,JoinCoffins,SetHorizontalCoffin,TypesetCoffin,%
          %properties
          prop_new:N,prop_new:c,prop_put:Nnn,%
          %boolean
          bool_new:N,bool_set_true:N,bool_set_false:N,%
          bool_if:NTF,%
          hbox_to_wd:nn,%
          IfNoValueTF,%
          %token lists
          tl_new:N,tl_set:Nn,tl_concat:NNN,%
          token_to_meaning:N,%
          seq_pop_left:NN,%
          %
          %int
          int_if_exist:cT,int_use:c,int_new:c,int_new:N,int_eval:n,%
          int_add,int_use,int_to_roman,%
          %boxes
          box_new:c,hbox_set:cn,box_use:c,vbox_set:cn,box_move_down:nn,%
          %string
          str_if_eq_x:nnTF,%
          tl_tail:n,%
          DeclareObjectType,%
          DeclareTemplateInterface,%
          DeclareTemplateCode,%
          DeclareInstance,UseInstance,AssignTemplateKeys%
          keys_set,keys_define,%      
          },%
     emphstyle=\verbatimfont\bfseries\color{black!80},%
          %
   },%close listings options
      % added for better control
      arc=0pt,  
      outer arc=0pt,
      example1/.code 2 args={\refstepcounter{texexp}{\ifx#2\empty\else\label{#2}\fi}}%Reference
     \pgfkeysalso{texexp, enhanced, breakable, title={Example \thetexexp\ #1}%
 },
}
%
\newenvironment{texexp}[1]{\tcblisting{texexp,#1}}{\endtcblisting}

\newenvironment{example1}[3][]{\tcblisting{example1={#2}{#3},#1}}%
    {\endtcblisting}
%
%    \end{macrocode}
%    
%    \begin{docEnvironment}{texexample} { \oarg{} \marg{Title} \meta{label} }
%      
%    \end{docEnvironment}
%    \begin{macrocode}
\newenvironment{texexample}[3][]{\noindent\tcblisting{example1={#2}{#3},#1}}%
    {\endtcblisting}
%    
% Need to fix
\let\luaexample\texexample        
\let\endluaexample\endtexexample    
%    \end{macrocode}
%     
%    \begin{macrocode}
%\tcbset{luacode/.style={%
%      fonttitle=\small\ttfamily, 
%      fontupper=\small, 
%      fontlower=\small,
%      coltitle=black,
%      colback = codebackground,% background
%      colframe=codebackground, 
%      %colupper=spot!,
%      },
%      listing options = {
%          language={[5.2]Lua},
%          belowskip=0pt, 
%          escapeinside={(*@}{@*)},%
%          breaklines=true,%
%          backgroundcolor=\color{codebackground},%
%          firstnumber=last,%
%          stepnumber=1,%
%          upquote=true,%
%          alsoletter={_,:},%
%          commentstyle=\bfseries\color{black!90},%
%          stringstyle = \color{black!90},
%          emphstyle=\verbatimfont\bfseries\color{black!80},%
%          keywordstyle= \bfseries\color{black!80},%
%          },
%      % added for better control
%      arc=0pt,  
%      outer arc=0pt,
%      luaexp1/.code 2 args={\refstepcounter{texexp}\label{#2}}%Reference
%     \pgfkeysalso{luacode, enhanced, breakable, title={Example \thetexexp\ #1}},
%}
%\newenvironment{luaexp1}[1]{\tcblisting{luacode,#1}}{\endtcblisting}
%
%\newenvironment{luaexample}[3][]{\noindent\tcblisting{luaexp1={#2}{#3},#1}}%
%    {\endtcblisting}
%%
%    \end{macrocode} 
%
% The following demonstrates the usage.
%
% 	\begin{texexample}[]{atest}{This is a comment?}
%	  \def\demomacro{Hello World!}
%	\end{texexample}
%
% 	\begin{example}{A Test}{test}{This is a comment?}
%	  \def\demomacro{Hello World!}
%	\end{example}
%
%
%
% \section{Floats settings} 
%                   
% We use Donald Arseneau's improved float parameters. I am not too sure when this was first referenced
% once I find it, will provide a citation and or a link.
% 
% For some of the rationale behind |topfraction| values see \ref{topfraction}.
%    \begin{macrocode}
\renewcommand{\topfraction}{.85}
\renewcommand{\bottomfraction}{.7} % .3 in kernel.
\renewcommand{\textfraction}{.15}
\renewcommand{\floatpagefraction}{.7}
\renewcommand{\dbltopfraction}{.66}
\renewcommand{\dblfloatpagefraction}{.66}
\setcounter{topnumber}{9}
\setcounter{bottomnumber}{9}
\setcounter{totalnumber}{20}
\setcounter{dbltopnumber}{9}
%    \end{macrocode}
%	

%
% We done with a very long and exhausting, preamble but hopefully
% will save countless hours for other people. If you use it in your
% publication send me a copy of it.  What follow is the special keys
% for formatting sectioning commands.
% 	
% \chapter{Section Formatting}
%
% \section{Introduction}
%
%  The code that follows deals exclusively with sectioning commands.
% The macros \cs{HUGE} and \cs{HHUGE} provide larger sizes than those
% provided by \LaTeXe that are used in the production of titles and
% chapter heads.
%
% \begin{docCommand}{words@cx} {\marg{int}} Utility macro for translating a 
%   number from numbers to words.
% \end{docCommand}
%    \begin{macrocode}
\def\words@cx#1{%
  \ifcase#1 zero\or one\or two\or three\or four\or five\or six\or seven
\or eight\or nine\or ten\or eleven\or twelve\or thirteen\or
fourteen
\or fifteen\or sixteen\or seventeen\or eighteen\or nineteen \or
twenty
\or twenty one\or twenty two\or twenty three\or twenty four\or
twenty five
\or twenty six\or twenty seven \or twenty eight \or twenty
nine\or thirty
\or thirty one\or thirty two\or thirty three\or thirty four\or
thirty five
\or thirty six\or thirty seven\or thirty eight\or thirty nine\or
forty\or forty one
\or forty two \or forty three\or forty four\or forty five \or
forty six \or forty seven
\or forty eight \or forty nine\or fifty\or fifty on\or fifty
two\or fifty three
\or fifty four\or fifty five\or fifty six\or fifty seven\or
fifty eight\or fifty nine
  \or sixty \or sixty one \or sixty two
  \or sixty three \or sixty four \or sixty five
    \else
    #1
    %\@ctrerr
    \fi
}

\def\Words@cx#1{%
\ifcase#1 Zero\or One\or Two\or Three\or Four\or Five\or Six\or
Seven\or Eight\or Nine\or Ten\or
Eleven\or Twelve\or Thirteen\or Fourteen\or Fifteen\or
Sixteen\or Seventeen\or Eighteen\or Nineteen \or Twenty\or
Twenty One\or Twenty Two\or Twenty Three\or Twenty Four\or
Twenty Five\or Twenty Six\or Twenty Seven \or Twenty Eight \or
Twenty Nine\or Thirty\or Thirty One\or Thirty Two\or Thirty
Three\or Thirty Four\or Thirty Five\or Thirty Six\or Thirty
Seven\or Thirty Eight\or Thirty Nine\or Forty\or Forty One\or
Forty Two \or Forty Three\or Forty Four\or Forty Five \or Forty
Six \or Forty Seven\or Forty Eight \or Forty Nine\or Fifty\or
Fifty One\or Fifty Two\or Fifty Three\or Fifty four\or Fifty
Five\or Fifty Six\or Fifty Seven\or Fifty Eight\or Fifty Nine\or
Sixty \or Sixty One \or Sixty Two
\or Sixty Three \or Sixty Four \or Sixty Five \or SixtySix \or SixtySeven
\or Sixty Eight \or SixtyNine \or Seventy \or Seventy One \or Seventy Two
\else
#1
%\@ctrerr
\fi}

\def\WORDS@cx#1{%
\ifcase#1 ZERO\or ONE\or TWO\or THREE\or FOUR\or FIVE\or SIX\or
SEVEN\or EIGHT\or NINE\or TEN\or
ELEVEN\or TWELVE\or THIRTEEN\or FOURTEEN\or FIFTEEN\or
SIXTEEN\or SEVENTEEN\or EIGHTEEN\or NINETEEN \or TWENTY\or
TWENTY ONE\or TWENTY TWO\or TWENTY THREE\or TWENTY FOUR\or
TWENTY FIVE\or TWENTY SIX\or TWENTY SEVEN \or TWENTY EIGHT \or
TWENTY NINE\or THIRTY\or THIRTY ONE\or THIRTY TWO\or THIRTY
THREE\or THIRTY FOUR\or THIRTY FIVE\or THIRTY SIX\or THIRTY
SEVEN\or THIRTY EIGHT\or THIRTY NINE\or FORTY\or FORTY ONE\or
FORTY TWO \or FORTY THREE\or FORTY FOUR\or FORTY FIVE\or FORTY
SIX\or FORTY SEVEN\or FORTY EIGHT\or FORTY NINE\or FIFTY\or
FIFTY ONE\or FIFTY TWO\or FIFTY THREE\or FIFTY FOUR\or FIFTY
FIVE\or FIFTY SIX\or FIFTY SEVEN\or FIFTY EIGHT\or FIFTY NINE\or
SIXTY\or SIXTY ONE\or SIXTY TWO\or SIXTY THREE \or SIXTY FOUR\or
SIXTY FIVE\or SIXTY SIX\or SIXTY SEVEN\or SIXTY EIGHT\or SIXTY
NINE\or SEVENTY\or SEVENTY ONE\or SEVENTY TWO\or SEVENTY
THREE\or SEVENTY FOUR\or SEVENTY FIVE\or SEVENTY SIX\or SEVENTY
SEVEN\or SEVENTY EIGHT\or SEVENTY NINE\or EIGHTY\or EIGHTY
ONE\or EIGHTY TWO\or EIGHTY THREE\or EIGHTY FOUR\or EIGHTY
FIVE\or EIGHTY SIX\or EIGHTY SEVEN\or EIGHTY EIGHT\or EIGHTY
NINE\or NINETY \or NINETY ONE \or NINETY TWO \or NINETY THREE
\or NINETY FOUR \or NINETY FIVE
\else
#1
%\@ctrerr
\fi}
   
\def\ORDINALS@cx#1{%
\ifcase#1 ZEROETH\or FIRST\or SECOND\or THIRD\or FOURTH\or
FIFTH\or SIXTH\or SEVENTH\or EIGHTTH\or NINTH\or TENTH\or
ELEVENTH\or TWELFTH\or THIRTEENTH\or FOURTEENTH\or FIFTEENTH\or
SIXTEENTH\or SEVENTEEN\or EIGHTEEN\or NINETEEN \or TWENTY\or
TWENTY ONE\or TWENTY TWO\or TWENTY THREE\or TWENTY FOUR\or
TWENTY FIVE\or TWENTY SIX\or TWENTY SEVEN \or TWENTY EIGHT \or
TWENTY NINE\or THIRTY\or THIRTY ONE\or THIRTY TWO\or THIRTY
THREE\or THIRTY FOUR\or THIRTY FIVE\or THIRTY SIX\or THIRTY
SEVEN\or THIRTY EIGHT\or THIRTY NINE\or FORTY\or FORTY ONE\or
FORTY TWO \or FORTY THREE\or FORTY FOUR\or FORTY FIVE\or FORTY
SIX\or FORTY SEVEN\or FORTY EIGHT\or FORTY NINE\or FIFTY\or
FIFTY ONE\or FIFTY TWO\or FIFTY THREE\or FIFTY FOUR\or FIFTY
FIVE\or FIFTY SIX\or FIFTY SEVEN\or FIFTY EIGHT\or FIFTY NINE\or
SIXTY\or SIXTY ONE\or SIXTY TWO\or SIXTY THREE \or SIXTY FOUR\or
SIXTY FIVE \or SIXTY SIX \or SIXTY SEVEN \or SIXTY EIGHT \or SIXTY NINE
\or SEVENTY \or SEVENTY ONE \or SEVENTY TWO \or SEVENTY THREE
\or SEVENTY FOUR \or SEVENTY FIVE \or SEVENTY SIX \or SEVENTY SEVEN
\or SEVENTY EIGHT \or SEVENTY NINE \or EIGHTY
\else
#1
%\@ctrerr
\fi}

\def\ordinals@cx#1{%
  \ifcase#1 Zeroeth\or First\or Second\or Third\or Fourth\or Fifth\or Sixth
  \or Seventh\or Eighth\or Ninth\or Tenth\or
 Eleventh\or Twelfth\or Thirteenth\or Fourteenth\or Fifteenth
\or SIXTEENTH\or SEVENTEEN\or EIGHTEEN\or NINETEEN \or TWENTY\or
TWENTY ONE\or TWENTY TWO\or TWENTY THREE\or TWENTY FOUR\or
TWENTY FIVE\or TWENTY SIX\or TWENTY SEVEN \or TWENTY EIGHT \or
TWENTY NINE\or THIRTY\or THIRTY ONE\or THIRTY TWO\or THIRTY
THREE\or THIRTY FOUR\or THIRTY FIVE\or THIRTY SIX\or THIRTY
SEVEN\or THIRTY EIGHT\or THIRTY NINE\or FORTY\or FORTY ONE\or
FORTY TWO \or FORTY THREE\or FORTY FOUR\or FORTY FIVE\or FORTY
SIX\or FORTY SEVEN\or FORTY EIGHT\or FORTY NINE\or FIFTY\or
FIFTY ONE\or FIFTY TWO\or FIFTY THREE\or FIFTY FOUR\or FIFTY
FIVE\or FIFTY SIX\or FIFTY SEVEN\or FIFTY EIGHT\or FIFTY NINE\or
SIXTY\or SIXTY ONE\or SIXTY TWO\or SIXTY THREE \or SIXTY FOUR\or
SIXTY FIVE\or SIXTY SIX \or SIXTY SEVEN \or \else
#1
%\@ctrerr
\fi
}

%    \end{macrocode}
% 
%
%
% \subsection{General Utility Environments}
%
%
%    \begin{macrocode}
\newenvironment{absolutequote}
               {\list{}{\leftmargin2cm\rightmargin\leftmargin}%
                \item\relax\footnotesize}
               {\endlist}

\newenvironment{summary}
               {\list{}{\listparindent0pt %
                        \itemindent\listparindent
                        \leftmargin0pt
                        \rightmargin\leftmargin
                        \parsep\z@ \@plus\p@}%
                \item\relax\itshape}
               {\endlist}
%
\def\solution{%
   \everypar{}
   \parindent0pt
  \leavevmode\par
  \makebox{\llap{\bfseries\textit{Solution }:}\thinspace}%
  \parindent2em
  }
%    \end{macrocode}
%
% \subsection{Setting up the key system}
%
% We are going to use a few conditionals and we start by defining 
% them here:
%
%    \begin{macrocode}
\newif\if@left
\newif\if@right
\newif\if@center
\@leftfalse
\@rightfalse
\@centerfalse
% newifs for number position
\newif\if@lefttitle
\newif\if@righttitle
\newif\if@leftname
\newif\if@rightname
\newif\if@chapterspaceout\@chapterspaceoutfalse
\newif\if@soulspaceout\@soulspaceoutfalse
\newif\if@numberspaceout\@numberspaceoutfalse
\newif\if@titlespaceout\@chapterspaceoutfalse
\newif\if@sectionspaceout\@sectionspaceoutfalse
\newif\if@openanywhere\@openanywherefalse
%    \end{macrocode}
%
% The standard LaTeX2e settings does not allow for open left chapters.
% However, quite a few designs do have this incorporated so we add an
% openany boolean.
%    \begin{macrocode}
\newif\if@openleft\@openleftfalse
\newif\if@openany\@openanyfalse
%    \end{macrocode}
%
% Some publications allow chapters to be written by different authors
% we provide a conditional for this. This also makes the package more general.
% 
%    \begin{macrocode}
\newif\if@special\@specialfalse
\newif\if@chaptertitlespecial
\@chaptertitlespecialfalse

\newif\if@authorblock
%    \end{macrocode}
%
% We are going to allow the user to use a key to add a toc, also
% wea re allowing to incorporate images in such table of contents.
% We creating two conditionals to hold this information.
%
%    \begin{macrocode}
\newif\if@toc  \@toctrue
\newif\if@tocimage \@tocimagefalse
%    \end{macrocode}
%
% \subsection{Defining Document Keys}
%
% As we aim to make the package generic to be used with any base class
% we define some conditionals and keys.
%
%    \begin{macrocode}
\newif\if@book
\newif\if@report
\newif\if@article
\cxset{document type/.is choice,
  document type/book/.code = {\@booktrue},
  document type/article/.code = {\@reporttrue},
  document type/report/.code = {\@articletrue}, 
}
%    \end{macrocode}
%
% {setfontparam@cx} 
% {setfont@cx} 
% This macro enables font setting keys to either
% be entered by an author as  a command e.g., |\Huge| or as a macro name |Huge|. It uses
% the \pkg{etoolbox} |\ifdef| macro.
%
%    \begin{macrocode}
\ExplSyntaxOn 
\gdef\setfontparam@cx #1;{%
  \ifdefmacro{#1}{#1}{
  \csname#1\endcsname
  }%
}
\cs_new:Npn \setfont@cx #1#2#3#4 
  {
    \expandafter\setfontparam@cx#1;
    \expandafter\setfontparam@cx#2;
    \expandafter\setfontparam@cx#3;
    \expandafter\setfontparam@cx#4;
  }
\let\bold\bfseries
\let\normal\mdseries
\let\serif\rmfamily
\ExplSyntaxOff
%    \end{macrocode}
% 
% \section{Front Matter Commands}
% 
%	We define author commands for coverpages and
%	second pages. If they have been defined by the
%	author we do nothing, otherwise we provide some
%	defaults as examples.
% \begin{docCommand} {coverpage} {\marg{} \marg{} \marg{} \marg{} \marg{} }
%   Creates a cover page for a document.
% \end{docCommand}
% The design of a cover page---and perhaps a dust cover---is best left to a book
%  designer, here we provide a number of predefined templates for documents
%  that will be primarily viewed on screen.
%    \begin{macrocode}
 \ExplSyntaxOn
\cxset
  {
    cover~font-size/.font-size~in = \cover_font_size,
 }

\cs_if_exist:NF \coverpage 
  {
    \DeclareDocumentCommand {\coverpage}  { m m m m m }
     {
       \coverpage_aux:nnnnn {#1} {#2} { #3} {#4} {#5}
     }

     \cs_new:Npn \coverpage_aux:nnnnn #1 #2 #3 #4 #5
      {
       \gdef\secondpageimg{#1}
      \vspace*{1.7cm}
      \vbox{%
         \vspace*{-8\baselineskip} %-1
         \hskip-3.6cm\includegraphics[width=\paperwidth]{#1}\par %hine-02
         \vspace*{.8\baselineskip} %3
         \hbox to \hsize{%
         \Huge \hfill\hfill{\MakeUppercase{\bfseries  
         \textsf{#4}}}}%
         \vspace*{0.3cm}
         \hbox to \hsize{\Huge \hfill\hfill{\MakeUppercase{\bfseries   \textsf{#5}}}}
         \vspace*{1.8\baselineskip}
         \hbox to \hsize{\huge \hfill\hfill\textsf{\hbox{#2}}}%
         \vspace*{1.3cm}
         \hbox to \hsize{\huge \hfill\hfill\textsf{\hbox{#3}}}%
        }
     }
  }
  { }  
\ExplSyntaxOff
%    \end{macrocode}
% end{macro}
% 
% begin{macro}{secondpage}
%	This macro typesets what a copyright page. It is not a general
%	command, but rather a command that you will need to redefine. It is included
%	here as an example and to typeset the second page of this publication.
%	\begin{macrocode}
\newcommand\secondpage{\clearpage\null\vfill\vfill
  \begin{minipage}[b]{0.9\textwidth}
  \includegraphics[width=3cm]{\secondpageimg}\par
  \raggedright
  \textit{Cover image: }
    The cover image shows Jo Bodeon, a back-roper in the mule room at 
    Chace Cotton Mill. Burlington, Vermont. This and other similar images 
    in this book were taken by Lewis W. Hine, in the period between 
    1908-1912. These images as well as social campaigns by many including 
    Hine, helped to formulate America's anti-child labour laws.
  \end{minipage}\par
  \vspace*{\baselineskip}
  \begin{minipage}[b]{0.9\textwidth}
  \RaggedRight
  \setlength{\parskip}{0.5\baselineskip}
  Copyright \copyright 2015  Dr Yiannis Lazarides\par
  Permission is granted to copy, distribute and\slash or modify this document 
  under the terms of the GNU Free Documentation License, version 1.2, with no 
  invariant sections, no front-cover texts, and no back-cover texts.\par
  A copy of the license is included in the appendix.\par
  This document is distributed in the hope that it will be useful, but without 
  any warranty; without even the implied warranty of merchantability or 
  fitness for a particular purpose.
  \end{minipage}
  \vspace*{2\baselineskip}
  \clearpage
}
%    \end{macrocode}
% 


% \chapter{Handling Footnotes and Endnotes}
%
% \precis{Handling of Footnotes and Endnotes.}
%
% Keeping up with the spirit of the package, we now
% have a go at footnotes and endnotes. This is a difficult
% topic, with many packages and a diverse way of handlingg
% things.
% TO DO STORE IN PREHOOKS
% AND POST HOOKS
%
%    \begin{macrocode}
\cxset{endnotes package/.code ={\gdef\endnotes@cs{#1}%
                   \RequirePackage{\endnotes@cs}%
                }%
}%
\cxset{endotes package/.default=pagenote}
\cxset{endnotes package=pagenote}%
%
%    \end{macrocode}
%

%    \begin{macrocode}
\ifUNICODE
    \RequirePackage{unicode-math}
    \setmathfont{xits-math.otf}
\fi    
%    \end{macrocode}

%
%  %%%% END OF PACKAGE
%\iffalse
%</package>
%\fi
%
% \iffalse
%<*settings>
% \fi
%% Some settings
%    \begin{macrocode}
\cxset{nag keys = {l2tabu,%
                   orthodox}}
\cxset{onlyamsmath keys = {warning}}
%%%%

%    \end{macrocode}
% \iffalse
%</settings>
% \fi
% \iffalse
%<*DEFAULTS>
% \fi
% title related settings
%    \begin{macrocode}    
%% Title related settings
 \cxset{title padding-top=0pt}
 \cxset{title padding-right=0pt}
 \cxset{title padding-bottom=0pt}
 \cxset{title padding-left=0pt}
%    \end{macrocode}    
% \iffalse
%</DEFAULTS>
% \fi
%
%
% \Finale
\endinput
% \newpage
%
% \section{List of Packages and Usage Statistics}
%
% Table~\ref{tbl:listofpaks} provides a list of the packages loaded as default by |phd|.
% The column describing usage statistics
% is from \url{http://arxmliv.kwarc.info/package_usage.php}. It is by no means an
% indication of overall popularity, but I have used these statistics as an
% guide in selecting what packages to include here in order to at least cover
% the scientific side well.
%
% ^^A\input{packages-table}
% \label{tbl:listofpaks}
%
% \bibliography{phd}
% ^^A\printindex



