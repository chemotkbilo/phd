% \iffalse meta-comment
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
phd-fontmanager --- a package to manage fonts
E-mail: yannislaz@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------
This file provides a phd for defining a class.
%</readme>
%<*readmemd>
###The `phd` LaTeX2e package

The `phd` latex package and the class with the same name provide
convenient methods to create new styles for books, reports
and articles. It also loads the most commonly used packages 
and resolves conflicts.

This work consists of the file  `phd.dtx`,
and the derived files   `phd.ins`,  `phd.pdf`, and `phd.sty`.

###Installation

run
          phd-lua.bat on windows
           pdflatex phd.dtx
           makeindex -s gind.ist -g phd 

If you have any difficulties with the package come and join us at
http://tex.stackexchange.com and post a new question or
add a comment at http://tex.stackexchange.com/a/45023/963.
or send me a message at  yannislaz at gmail.com

### Documentation

The package was written using the `doc` and `docscript` packages,
so that it is self documented in a literary programming style. 
The .pdf is a fat document, providing over fifty book styles (the
equivalent of classes) plus there is a lot of write-up on the inner
workings of TeX and LaTeX2e. However, you don't need to know much
to use it.

      \usepackage{phd}
      \input{style13}

All choices, are made via an extended key-value interface. 
Although not a compliment, it resembles CSS and the keys are a bit verbose but
attributes are easy to change and have a consistent and easy to remember interface.

To set or add a key we only use one command:

      \cxset{chapter name font-size = Huge,
             chapter number font-size = HUGE} 

### Future Development

This is still an experimental version, but I will retain the
interface in future releases. There is a large amount of
work still to be carried out to improve the template styles
provided, to test it more thoroughly and to add a number of
improvements in the special designs. At present I estimate
that I have completed about 70% of the work that needs
to be done.

__The package as it stands is not production stable.__ 


%</readmemd>
%
%<*TODO>
1. On final round add pkg options. This was left as last in order not to solve problems by adding
    options. Too many options are not a good User Interface.
2.  Finish symbol management, both text and math. Math already 80% incorporated.
3.  Better integration of indexing commands.   
4.  Revisit layout manager for Chapters. Broke again in tests.
5.  Docs. Add all references.
6.  Incorporate phd class for more flexibility.
7.  Improve package manager.
8.  Group script loading for better font management.
9.  General font management to relook it again.
10. Add all style sections (about 100 already prepared). Once they
     are all working issue beta version.
%</TODO>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
phd --- A package to beautify documents.
E-mail: yannislaz@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------
\endpreamble

%\BaseDirectory{C:/users/admin/my documents/github/phd}
%\usedir{MWE}
\generate{\file{\jobname.sty}{
  \from{\jobname.dtx}{FMAN}}
  }

%\nopreamble\nopostamble

%</install>

%<install>\endbatchfile
%<*internal>
%\usedir{tex/latex/phd}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble

\generate{
	\file{README.txt}{\from{\jobname.dtx}{readme}}
  }

\generate{
  \file{README.md}{\from{\jobname.dtx}{readmemd}}
}
\generate{
  \file{TODO.tex}{\from{\jobname.dtx}{TODO}}
}

\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
%<*driver>

%\listfiles
%gdef\@onlypreamble{} % TO BE REMOVED NEEDED FOR TUTS
\documentclass[twoside,11pt,a4paper]{ltxdoc}
\usepackage[bottom=2cm]{geometry}
\savegeometry{std}
% \usepackage[style=mla]{biblatex}
\usepackage{phd}
\usepackage{phd-documentation}
\usepackage{phd-toc}
\usepackage{phd-runningheads}
\usepackage{phd-lowersections}
\usepackage{makeidx}
\usepackage{phd-lists}
\pagestyle{headings}
\sethyperref
\cxset{palette bbc}
\makeindex
\begin{filecontents}{defaults-chapters}
%%    General Defaults for Chapters
\cxset{%    
    chapter title margin-top-width    =  0cm,
    chapter title margin-right-width  =  1cm,
    chapter title margin-bottom-width = 10pt,
    chapter title margin-left-width   = 0pt,
    chapter align                     = left,
    chapter title align               = left, %checked
    chapter name                      = hang,
    chapter format                    = fashion,
    chapter font-size                 = Huge,
    chapter font-weight               = bold,
    chapter font-family               = sffamily,
    chapter font-shape                = upshape,
    chapter color                     = black,
    chapter number prefix             = ,
    chapter number suffix             = ,
    chapter numbering                 = arabic,
    chapter indent                    = 0pt,
    chapter beforeskip                = -3cm,
    chapter afterskip                 = 30pt,
    chapter afterindent               = off,
    chapter number after              = ,
    chapter arc                       = 0mm,
    chapter background-color          = bgsexy,
    chapter afterindent               = off,
    chapter grow left                 = 0mm,
    chapter grow right                = 0mm, 
    chapter rounded corners           = northeast,
    chapter shadow                    = fuzzy halo,
    chapter border-left-width         = 0pt,
    chapter border-right-width        = 0pt,
    chapter border-top-width          = 0pt,
    chapter border-bottom-width       = 0pt,
    chapter padding-left-width        = 0pt,
    chapter padding-right-width       = 10pt,
    chapter padding-top-width         = 10pt,
    chapter padding-bottom-width      = 10pt,
    chapter number color              = white,
    chapter label color               = white,    
    }
 \cxset{    
    chapter number font-size        = huge,
    chapter number font-weight      = bfseries,
    chapter number font-family      = sffamily,
    chapter number font-shape       = upshape,
    chapter number align            = Centering,
    }
\cxset{%    
     chapter title font-size        = Huge,
     chapter title font-weight      = bold,
     chapter title font-family      = calligra,
     chapter title font-shape       = upshape,
     chapter title color            = black,
     }    
\end{filecontents}
\input{defaults-chapters}  
%\definecolor{bgsexy}{HTML}{FF6927}
%
%\definecolor{creamy}{HTML}{FDEBD7}
\cxset{chapter title color= creamy,
       chapter label color = creamy,
       chapter number color = creamy,
       chapter number font-size = Huge,
       subsection title color = creamy,
       chapter name = CHAPTER,
       chapter label case = upper,
       chapter number align=left,
       part format = traditional,
       part background-color=spot,
       part beforeskip                = -3cm,
       part afterskip                 = 30pt,
       }
\begin{document}
\parindent1em
\coverpage{asia}{Book Design Monographs}{Camel Press}{FMAN}{DESIGN} 
\pagestyle{empty}
%\coverpage{habtoor-city}{Delay Claim}{HLS-DSE/JV}{HABTOOR CITY}{MEP CLAIM} 
\secondpage
\pagestyle{empty}
\clearpage

\tableofcontents

\pagestyle{empty}
\setcounter{secnumdepth}{6}
\parskip0pt plus.1ex minus.1ex
\mainmatter
\pagenumbering{arabic}
\pagestyle{headings}        
\makeatletter
%\@debugtrue

\makeatother
\DocInput{\jobname.dtx}
\printindex
 %
% 
\end{document}
%</driver>
% \fi
% 
%  \CheckSum{0}
%  \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
%
% \changes{1.0}{2013/01/26}{Converted to DTX file}
%
% \DoNotIndex{\newcommand,\newenvironment}
% \GetFileInfo{phd.dtx}
% 
%  \def\fileversion{v1.0}          
%  \def\filedate{2012/03/06}
% \title{The \textsf{phd} package.
% \thanks{This
%        file (\texttt{phd.dtx}) has version number \fileversion, last revised
%        \filedate.}
% }
% \author{Dr. Yiannis Lazarides \\ \url{yannislaz@gmail.com}}
% \date{\filedate}
%
%
% 
% ^^A\maketitle
% 
% ^^A\frontmatter
%  ^^A\coverpage{./images/hine02.jpg}{Book Design }{Camel Press}{}{}
%  \newpage
% ^^A\secondpage
% \pagestyle{empty}
%
%
% 
%
%
% \pagestyle{headings}
% \raggedbottom
%  \OnlyDescription
%
%  ^^A\StopEventually{\printindex}

% \CodelineNumbered
% \pagestyle{headings}
% 
% 
% ^^A\part{IMPLEMENTATION AND FRIENDS}
% 
%
% \chapter{Font Manager Package Code Implementation Objectives and Strategy}
% 
% \epigraph{
% I was reflecting on the convoluted Java frameworks widely adopted at work. Those hefty frameworks brought coding structures and conventions to large engineering teams; meanwhile, they also sucked the fun of programming like a Pastafarian monster slurping all the tomato sauce on a plate of spaghetti.
%}{\href{http://blog.zmxv.com/2015/07/code-golf-at-google.html}{Zhen Wang}}
%
% We start by outlining what we are trying to achieve with this package:
%
% \begin{enumerate}
% \item To provide a declarative interface to enable users to modify headings by
%       setting keys, rather than writing macros.  
% \item The interface must be able to manupulate properties of headings down to
%       the last detail.
% \item To provide a compatibility mode, where documents wishing to test the package
% can have an easy switch to switch in and out. This is also important for the testing of the package.
% \item To provide a number of templates that cover most of the typical use case.
% \item To provide means for a plug-in architecture for extensions.

% \end{enumerate}
% 
% \section{Terminology}
%
%  \begin{description}
%  \item [document] Any written item, as a book, article, or letter, especially 
%                  of a factual or informative nature.
%  \item [heading] A division of a document or document series. For a normal
%        book headings are chapters, sections etc. However we allow for
%        specifying a more complex document divided into books, volumes
%        parts etc. For example the Bible has Books, chapters and verses,
%        where a legal document might require divisions such as clauses.
%        In general these divisions are numbered. These document divisions
%        are stored in the comma list \refCom{phd_book_divisions_clist}.
%  \item [head] A typeset heading, such as chapter head, or section head.
%        This can include a counter, label and title for example, 
%        \emph{Chapter 1 Introduction}.
%  \item [dom] This is a programming interface that provides a structured
%        representation of the document (a tree) and it defines a way
%        that the structure can be accessed. Although \latexe does not
%        offer a standard way to build such a tree (mainly because
%        \tex does not require the marking of paragraphs, it is 
%        useful to think of the document as a tree structure. We also
%        allow for a semi-automated way to build such a tree (with the 
%        exception that paragraphs are not included).
% \item [element] A part of the document tree that can be styled on
%       its own. For example the chapter label, or the section number.
%
% \end{description}
%
% \section{Users}
%  We classify users according to the \LaTeX3 terminology as a) programmers b) template designers
%  and c) authors.
% \subsection{Author}
%  We assume that the author has an exising template which she is using but might want to do
%  some minor modifications, for example use an italic shape for the font of the mark, but an 
%  upright font for the page numbers. 
%
% {\obeylines 
%~~ |\cxset|
%~~~~~|{|
%~~~~~~~~\textit{chapter number color}~~|format          = apa,|
%~~~~~~~~\textit{section title font-size} |font-size   = Large,|
%~~~~~|}|
%}  
%
% We follow the idea of representing the basic elements of documents
% as elements, each one having a parent in order to specify
% the element we need to style as accurate as possible. One can think of
% this approach being congruent with objects in other languages.
% As a matter fact nothing stops us from defining a key value
% interface as shown below.
%
% {\obeylines 
%~~ |\cxset|
%~~~~~|{| 
%~~~~~~~~\textit{header.even.mark.font.size}   = |Large,|
%~~~~~~~~\textit{header.even.mark.font.family} = |serif,|
%~~~~~|}|
%}  
%
% This would pehaps make it easier for the template designer, but I have rejected
% the idea as my aim is to make it easy for the author, who can search the template
% and just enter a couple of new proerty values.
%
% \subsection{Template designer}
% \pagestyle{headings}
% The template designer in the example above would have selected the format style
% from a number of predefined formats (templates) or would have created a style
% called \textit{apa} from an existing template and modified it using declarative
% key style.
%
% \subsection{The programmer}
%
% The programmer in the example above could have created the basic format
% \textit{apa} by using both declarative as well as defining or using existing
% macros. To the programmer we offer an extension mechanism, where the contents
% of a |ps@| command are defined. For example the programmer can define a new
% style using \tikzname, but without having to worry about defining full |ps@|
% and their interface.
%
% \section{Preliminaries}
%
%  Standard file identification. We first announce the package 
%	 and require that it be used with \LaTeX2e. 
% \iffalse
%<*FMAN>
% \fi
%  
%
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1994/12/01]%
\RequirePackage[2014/05/01]{latexrelease}
\ProvidesFile{phd-fontmanager}[2015/1/13 v1.0 font management (YL)]%
\RequirePackage{expl3}
%    \end{macrocode}
% \section{Font Manager}
%
% \subsection{Font Sizing}
% 
% The standard classes manage font-sizes through class options and a series
% of |.clo| files. The interesting part of the |.clo| files is that they also
% manage the skips, before and after blocks of text or maths to keep a consistent
% interface and to relate these skips to the size of the fonts. 
%
% \begin{enumerate}
%   \item Define |\normalsize| for the different text fonts 10pt, 11pt and 12pt
%         This sets the following properties:
%          \begin{enumerate}
%             \item |abovedisplayskip|
%             \item |belowdisplayskip|
%             \item |abovedisplayshortskip|
%             \item |belowdisplayshortskip| 
%          \end{enumerate} 
% \end{enumerate}
%
% Surprise surprise, here also the parameter of the first level list are always
% given by |\@listI|.
%
% Once the \docAuxCmd {normalsize} is defined for the default case, the cs |\small|,
% |footnotesize|, |scriptsize| etc are defined for each font size.
%
% Orchestrating fonts and font-sizing in a package that primarily uses one of the
% Modern Engines needs some different thoughts, as the size can be defined when we
% are loading the fonts via fontspec. 
%
% Peeking at some expl3 code, the view is that these items will bebhandled via 
% measures and the xgalley eventually and through the use of templates, which is
% not very diferent from setting them via a key value system.
%
% The sizing is also needed in some calculations for the page geometry to ensure
% that inaccuracies due to point calculations do not cause a number of non-integer
% lines.
%
% \begin{macrocode}
\ExplSyntaxOn
\let\set_fontsize\@setfontsize
\cs_set:Npn \textfontnine
{
   \set_fontsize\normalsize {9} {10}
   \abovedisplayskip 10pt \@plus2pt \@minus5pt
   \abovedisplayshortskip \z@ \@plus3pt
   \belowdisplayshortskip 6pt \@plus3pt \@minus3pt
}

\cs_set:Npn \textfontninepointfive
{
   \set_fontsize\normalsize {9.5} {10.5}
   \abovedisplayskip 10pt \@plus2pt \@minus5pt
   \abovedisplayshortskip \z@ \@plus3pt
   \belowdisplayshortskip 6pt \@plus3pt \@minus3pt
}

\cs_set:Npn \textfontten
{
   \set_fontsize\normalsize \c_ten \c_twelve
   \abovedisplayskip 10pt \@plus2pt \@minus5pt
   \abovedisplayshortskip \z@ \@plus3pt
   \belowdisplayshortskip 6pt \@plus3pt \@minus3pt
   
   \def\small
   {
     \@setfontsize\small\@ixpt{11}%
     \abovedisplayskip 8.5pt \@plus3pt \@minus4pt
     \abovedisplayshortskip \z@ \@plus2pt
     \belowdisplayshortskip 4pt \@plus2pt \@minus2pt
     \def\@listi{\leftmargin\leftmargini
               \topsep 4pt \@plus2pt \@minus2pt
               \parsep 2pt \@pluspt \@minuspt
               \itemsep \parsep}
   }
   
   \renewcommand\scriptsize{\@setfontsize\scriptsize\@viipt\@viiipt}
   \renewcommand\tiny{\@setfontsize\tiny\c_five\c_six }
   \renewcommand\large{\@setfontsize\large\@xiipt{14}}
   \renewcommand\Large{\@setfontsize\Large\@xivpt{18}}
   \renewcommand\LARGE{\@setfontsize\LARGE\@xviipt{22}}
   \renewcommand\huge{\@setfontsize\huge\@xxpt{25}}
   \renewcommand\Huge{\@setfontsize\Huge\@xxvpt{30}}
   \setlength\parindent{15pt}
 }
  
\cs_set:Npn \textfonttenpointfive
{
   \set_fontsize\normalsize {10.5} \c_twelve
   \abovedisplayskip 10pt \@plus2pt \@minus5pt
   \abovedisplayshortskip \z@ \@plus3pt
   \belowdisplayshortskip 6pt \@plus3pt \@minus3pt
}  
   
\cs_set:Npn \textfonteleven
  { 
    \set_fontsize\normalsize\c_eleven {13.6}
    \abovedisplayskip 11pt plus3pt minus6pt
    \abovedisplayshortskip \z@ \@plus3pt
    \belowdisplayshortskip 6.5pt \@plus3.5pt \@minus3pt
    
    \renewcommand\scriptsize {\@setfontsize\scriptsize \@viiipt {9.5}  }
    \renewcommand\tiny       {\@setfontsize\tiny       \@vipt  \@viipt }
    \renewcommand\large      {\@setfontsize\large      \@xiipt  {14}   }
    \renewcommand\Large      {\@setfontsize\Large      \@xivpt  {18}   }
    \renewcommand\LARGE      {\@setfontsize\LARGE      \@xviipt {22}   }
    \renewcommand\huge       {\@setfontsize\huge       \@xxpt   {25}   }
    \renewcommand\Huge       {\@setfontsize\Huge       \@xxvpt  {30}   }
    \setlength\parindent{17pt}
  }
 
\cs_set:Npn \textfonttwelve
 {
   \set_fontsize\normalsize\c_twelve {14.5}%
   \abovedisplayskip 12pt \@plus3pt \@minus7pt
   \abovedisplayshortskip \z@ \@plus3pt
   \belowdisplayshortskip 6.5pt \@plus3.5pt \@minus3pt
   
   
   \renewcommand\scriptsize  { \@setfontsize\scriptsize \@viiipt {9.5} }
   \renewcommand\tiny        { \@setfontsize\tiny       \@vipt \@viipt }
   \renewcommand\large       { \@setfontsize\large      \@xivpt  {18}  }
   \renewcommand\Large       { \@setfontsize\Large      \@xviipt {22}  }
   \renewcommand\LARGE       { \@setfontsize\LARGE      \@xxpt   {25}  }
   \renewcommand\huge        { \@setfontsize\huge       \@xxvpt  {30}  }
   
   \let\Huge=\huge
   
   \setlength\parindent{1.5em}
 }
 
\cs_set:Npn \textfontthirteen
 {
   \set_fontsize\normalsize {13} {15.5}%
   \abovedisplayskip 12pt \@plus3pt \@minus7pt
   \abovedisplayshortskip \z@ \@plus3pt
   \belowdisplayshortskip 6.5pt \@plus3.5pt \@minus3pt
 } 
 
\setlength\smallskipamount{3pt \@plus 1pt \@minus 1pt}
\setlength\medskipamount{6pt \@plus 2pt \@minus 2pt}
\setlength\bigskipamount{12pt \@plus 4pt \@minus 4pt} 
 
\ExplSyntaxOff
 
\ExplSyntaxOn 
\cxset
  {
     text~font/.is~choice,
     text~font/9pt/.code      = \let\normalsize\textfontnine\normalsize,
     text~font/9.5pt/.code    = \let\normalsize\textfontninepointfive\normalsize,
     text~font/10pt/.code     = \let\normalsize\textfontten\normalsize,
     text~font/10.5pt/.code   = \let\normalsize\textfonttenpointfive\normalsize,
     text~font/11pt/.code     = \let\normalsize\textfonteleven\normalsize, 
     text~font/12pt/.code     = \let\normalsize\textfonttwelve\normalsize,
     text~font/13pt/.code     = \let\normalsize\textfontthirteen\normalsize,
  }
\ExplSyntaxOff   
%    \end{macrocode}
%
% Set the default font size at 10pt.
%
%    \begin{macrocode} 
\cxset{text font=12pt}
%    \end{macrocode}
% \bgroup
% \cxset{text font = 9pt} 
% (9pt) \lorem

% \cxset{text font = 9.5pt}
% \normalsize (9.5pt) \lorem

% \cxset{text font = 10pt}
% \normalsize \lorem
%
% \cxset{text font = 10.5pt}
% \normalsize \lorem
%

%
% \cxset{text font = 12pt} \normalsize
%\lorem (12pt)
%
%  \cxset{text font = 10pt}
%\lorem (10pt)
%
% 
%
% \egroup
%
% \section{Paragraphing parameters}
%
% \begin{docCommand}{lineskip} { \marg{dim}}
%   These are currently hybrids. 
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
  \dim_gset:Nn \tex_lineskip:D {1pt}
  \dim_gset:Nn \normallineskip {1pt}
  \cs_gset:Npn \baselinestretch {}
\ExplSyntaxOff
%    \end{macrocode}
%
%    \begin{macrocode}
\ExplSyntaxOn
%\newskip \phd@baseskip
%\skip_new:N \phd@theskip
%\skip_gset:Nn \phd@theskip {2pt}
\newskip\phd@baseskip
\newskip\phd@theskip
\def\phd@setskips #1
  {
    \phd@theskip #1\relax%
    \abovedisplayskip      0.50\phd@theskip \@plus 0.25\phd@theskip \@minus 1pt%
    \belowdisplayskip      \abovedisplayskip
    \abovedisplayshortskip 0.25\phd@theskip \@plus 0.25\phd@theskip
    \belowdisplayshortskip 0.50\phd@theskip \@plus 0.25\phd@theskip \@minus 1pt%
  }

\def\phd@setlists#1{\phd@theskip #1\relax%
 \def\@listi{\leftmargin\leftmargini
  \topsep  0.5\phd@theskip \@plus 2pt \@minus 1pt%
  \parsep  \z@
  \itemsep \z@}}
%
\ExplSyntaxOff  
%
%
% common Sizes  
\newcommand{\@viiiptv}{8.5}%                  8.5pt

\DeclareMathSizes{\@viiiptv}{\@viiiptv}{\@vipt}{\@vpt}

\newcommand{\@ixptv}{9.5}%                    9.5pt

\DeclareMathSizes{\@ixptv}{\@ixptv}{\@viipt}{\@vpt}

\newcommand{\@xptv}{10.5}%                    10.5pt (normalsize)

\DeclareMathSizes{\@xptv}{\@xptv}{\@viipt}{\@vpt}

\newcommand{\@xvipt}{16}%                     16pt size

\DeclareMathSizes{\@xvipt}{\@xvipt}{\@xiipt}{\@xpt}

\newcommand{\@xviiipt}{18}%                   18pt size

\DeclareMathSizes{\@xviiipt}{\@xviiipt}{\@xiipt}{\@xpt}

\renewcommand\tiny{\@setfontsize\tiny\@vpt{6}\phd@setskips\phd@setlists}
%   
% Similar to cambridge class
% font sizes for cambridge7A, 228x152mm
% \tiny                        5/6\\
% \footnotesize                8/9\\
% \large (B headings)         11/14\\
% \Aheadsize                  12/14\\
% \Large                      12/17\\
% \LARGE                      16/19 (chaptertitle size)\\
% \let\Huge\huge              18/24 (chapternumber size)\\
% \scriptsize                  7/8\\
% \let\tablesize\small         9/10\\
% \let\enotesize\small         9/10\\
% \smallish                    9/11\\
% \normalsmall                10/12\\
% \let\listsize\normalsize    10/13\\
%
%     \end{macrocode}
% \begin{docCommand}{footnotesize} {\meta{void}}
%  Sets the font to the footnotesize
% \end{docCommand}
%    \begin{macrocode}
\renewcommand \footnotesize
  {
    \phd@baseskip 10.5pt%
    \@setfontsize\footnotesize{8pt}{10.5}
    \phd@setskips\phd@setlists
  }
%    \end{macrocode}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \HHUGE  { \set_fontsize \HHUGE {58}{67}  }
\cs_set:Npn \HHHUGE { \set_fontsize \HHHUGE{94}{105} }

\newcommand\verbatimsize
  {
    \phd@baseskip 13pt%
    \set_fontsize \verbatimsize\@xpt{13} \phd@setskips\phd@setlists
 }
\ExplSyntaxOff
%
%    \end{macrocode}
% \cxset{text font = 11pt}

% \section{Loading fontspec} 
%
% 
% We load the \pkgname{fontspec} package \citep{fontspec} both
% for XeTeX or LuaTeX.
% The font manager needs to first distinguish  between the various
% engines used, and secondly needs to use the right packages. This is a bit of
% a kludge at the moment.
%
%    \begin{macrocode}
\cxset{document font/.code 2 args=\setmainfont[#2]{#1}}
%

  
\def\defaultfontsxetexluatex{% 
%  
  \RequirePackage[no-math]{fontspec}

  \setmainfont[
      BoldFont={timesbd.ttf},
      ItalicFont={timesi.ttf},
      BoldItalicFont={timesbi.ttf},
      SmallCapsFont={times.ttf},
                      ]{times.ttf}                     
 \setsansfont{Tex Gyre Heros}% work okay with palatino
 \setmonofont[Scale=.95]{consola.ttf}
 \newfontfamily\verbatimfamily[Scale=0.95]{consola.ttf}
 \newfontfamily\ttbf[Scale=0.95]{consolab.ttf}  
 \DeclareTextFontCommand{\texttt}{\verbatimfamily} %CHANGED
 \newfontfamily\arial{Arial}
 \let\pan\arial
 \let\unicodenumberfam\arial
 \newfontfamily\smallcps[Scale=0.8]{Arial}
 \def\phd@font@times{times.ttf}
}  
%    \end{macrocode}
%
%  The management of default fonts for scripts and languages is attempted here first. 
%  This is a difficult topic, as the user might not have the fonts installed in their system.
%  If polyglossia is used it checks that language<languagename>  is defined, hence we
%  need to define |\arabicfont|  for the arabic language etc. 
%  
%    \begin{macrocode}  
%
\ifengine{\defaultfontsxetexluatex}{\defaultfontsxetexluatex}{}
%    \end{macrocode}
%
%  We need to cater for LTR without changing basic commands of XeTeX or eTeX.
%
%    \begin{macrocode}
\ifluatex
   \RequirePackage{luaotfload}
   \let\TeXXeTstate\@gobble
   \def\setRTL{\luatextextdir TRT}%\pardir TRT\textdir TRT}
   \def\endLTR{\luatextextdir TLT}%{\pardir TLT\textdir TLT}
   \let\beginR\setRTL
   \let\endR\endLTR
\fi
%    \end{macrocode}
%</FMAN>
\endinput